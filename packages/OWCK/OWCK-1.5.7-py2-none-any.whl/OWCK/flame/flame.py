# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_flame', [dirname(__file__)])
        except ImportError:
            import _flame
            return _flame
        if fp is not None:
            try:
                _mod = imp.load_module('_flame', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _flame = swig_import_helper()
    del swig_import_helper
else:
    import _flame
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


EPSILON = _flame.EPSILON
class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _flame.IntArray_array_set
    __swig_getmethods__["array"] = _flame.IntArray_array_get
    if _newclass:array = _swig_property(_flame.IntArray_array_get, _flame.IntArray_array_set)
    __swig_setmethods__["size"] = _flame.IntArray_size_set
    __swig_getmethods__["size"] = _flame.IntArray_size_get
    if _newclass:size = _swig_property(_flame.IntArray_size_get, _flame.IntArray_size_set)
    __swig_setmethods__["bufsize"] = _flame.IntArray_bufsize_set
    __swig_getmethods__["bufsize"] = _flame.IntArray_bufsize_get
    if _newclass:bufsize = _swig_property(_flame.IntArray_bufsize_get, _flame.IntArray_bufsize_set)
    def __init__(self): 
        this = _flame.new_IntArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flame.delete_IntArray
    __del__ = lambda self : None;
IntArray_swigregister = _flame.IntArray_swigregister
IntArray_swigregister(IntArray)

class IndexFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _flame.IndexFloat_index_set
    __swig_getmethods__["index"] = _flame.IndexFloat_index_get
    if _newclass:index = _swig_property(_flame.IndexFloat_index_get, _flame.IndexFloat_index_set)
    __swig_setmethods__["value"] = _flame.IndexFloat_value_set
    __swig_getmethods__["value"] = _flame.IndexFloat_value_get
    if _newclass:value = _swig_property(_flame.IndexFloat_value_get, _flame.IndexFloat_value_set)
    def __init__(self): 
        this = _flame.new_IndexFloat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flame.delete_IndexFloat
    __del__ = lambda self : None;
IndexFloat_swigregister = _flame.IndexFloat_swigregister
IndexFloat_swigregister(IndexFloat)


def PartialQuickSort(*args):
  return _flame.PartialQuickSort(*args)
PartialQuickSort = _flame.PartialQuickSort

def Flame_Euclidean(*args):
  return _flame.Flame_Euclidean(*args)
Flame_Euclidean = _flame.Flame_Euclidean

def Flame_Cosine(*args):
  return _flame.Flame_Cosine(*args)
Flame_Cosine = _flame.Flame_Cosine

def Flame_Pearson(*args):
  return _flame.Flame_Pearson(*args)
Flame_Pearson = _flame.Flame_Pearson

def Flame_UCPearson(*args):
  return _flame.Flame_UCPearson(*args)
Flame_UCPearson = _flame.Flame_UCPearson

def Flame_SQPearson(*args):
  return _flame.Flame_SQPearson(*args)
Flame_SQPearson = _flame.Flame_SQPearson

def Flame_DotProduct(*args):
  return _flame.Flame_DotProduct(*args)
Flame_DotProduct = _flame.Flame_DotProduct

def Flame_Covariance(*args):
  return _flame.Flame_Covariance(*args)
Flame_Covariance = _flame.Flame_Covariance

def Flame_Manhattan(*args):
  return _flame.Flame_Manhattan(*args)
Flame_Manhattan = _flame.Flame_Manhattan

def Flame_CosineDist(*args):
  return _flame.Flame_CosineDist(*args)
Flame_CosineDist = _flame.Flame_CosineDist

def Flame_PearsonDist(*args):
  return _flame.Flame_PearsonDist(*args)
Flame_PearsonDist = _flame.Flame_PearsonDist

def Flame_UCPearsonDist(*args):
  return _flame.Flame_UCPearsonDist(*args)
Flame_UCPearsonDist = _flame.Flame_UCPearsonDist

def Flame_SQPearsonDist(*args):
  return _flame.Flame_SQPearsonDist(*args)
Flame_SQPearsonDist = _flame.Flame_SQPearsonDist

def Flame_DotProductDist(*args):
  return _flame.Flame_DotProductDist(*args)
Flame_DotProductDist = _flame.Flame_DotProductDist

def Flame_CovarianceDist(*args):
  return _flame.Flame_CovarianceDist(*args)
Flame_CovarianceDist = _flame.Flame_CovarianceDist
DST_USER = _flame.DST_USER
DST_EUCLID = _flame.DST_EUCLID
DST_COSINE = _flame.DST_COSINE
DST_PEARSON = _flame.DST_PEARSON
DST_UC_PEARSON = _flame.DST_UC_PEARSON
DST_SQ_PEARSON = _flame.DST_SQ_PEARSON
DST_DOT_PROD = _flame.DST_DOT_PROD
DST_COVARIANCE = _flame.DST_COVARIANCE
DST_MANHATTAN = _flame.DST_MANHATTAN
DST_NULL = _flame.DST_NULL
OBT_NORMAL = _flame.OBT_NORMAL
OBT_SUPPORT = _flame.OBT_SUPPORT
OBT_OUTLIER = _flame.OBT_OUTLIER
class Flame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["simtype"] = _flame.Flame_simtype_set
    __swig_getmethods__["simtype"] = _flame.Flame_simtype_get
    if _newclass:simtype = _swig_property(_flame.Flame_simtype_get, _flame.Flame_simtype_set)
    __swig_setmethods__["N"] = _flame.Flame_N_set
    __swig_getmethods__["N"] = _flame.Flame_N_get
    if _newclass:N = _swig_property(_flame.Flame_N_get, _flame.Flame_N_set)
    __swig_setmethods__["K"] = _flame.Flame_K_set
    __swig_getmethods__["K"] = _flame.Flame_K_get
    if _newclass:K = _swig_property(_flame.Flame_K_get, _flame.Flame_K_set)
    __swig_setmethods__["KMAX"] = _flame.Flame_KMAX_set
    __swig_getmethods__["KMAX"] = _flame.Flame_KMAX_get
    if _newclass:KMAX = _swig_property(_flame.Flame_KMAX_get, _flame.Flame_KMAX_set)
    __swig_setmethods__["graph"] = _flame.Flame_graph_set
    __swig_getmethods__["graph"] = _flame.Flame_graph_get
    if _newclass:graph = _swig_property(_flame.Flame_graph_get, _flame.Flame_graph_set)
    __swig_setmethods__["dists"] = _flame.Flame_dists_set
    __swig_getmethods__["dists"] = _flame.Flame_dists_get
    if _newclass:dists = _swig_property(_flame.Flame_dists_get, _flame.Flame_dists_set)
    __swig_setmethods__["nncounts"] = _flame.Flame_nncounts_set
    __swig_getmethods__["nncounts"] = _flame.Flame_nncounts_get
    if _newclass:nncounts = _swig_property(_flame.Flame_nncounts_get, _flame.Flame_nncounts_set)
    __swig_setmethods__["weights"] = _flame.Flame_weights_set
    __swig_getmethods__["weights"] = _flame.Flame_weights_get
    if _newclass:weights = _swig_property(_flame.Flame_weights_get, _flame.Flame_weights_set)
    __swig_setmethods__["cso_count"] = _flame.Flame_cso_count_set
    __swig_getmethods__["cso_count"] = _flame.Flame_cso_count_get
    if _newclass:cso_count = _swig_property(_flame.Flame_cso_count_get, _flame.Flame_cso_count_set)
    __swig_setmethods__["obtypes"] = _flame.Flame_obtypes_set
    __swig_getmethods__["obtypes"] = _flame.Flame_obtypes_get
    if _newclass:obtypes = _swig_property(_flame.Flame_obtypes_get, _flame.Flame_obtypes_set)
    __swig_setmethods__["fuzzyships"] = _flame.Flame_fuzzyships_set
    __swig_getmethods__["fuzzyships"] = _flame.Flame_fuzzyships_get
    if _newclass:fuzzyships = _swig_property(_flame.Flame_fuzzyships_get, _flame.Flame_fuzzyships_set)
    __swig_setmethods__["count"] = _flame.Flame_count_set
    __swig_getmethods__["count"] = _flame.Flame_count_get
    if _newclass:count = _swig_property(_flame.Flame_count_get, _flame.Flame_count_set)
    __swig_setmethods__["clusters"] = _flame.Flame_clusters_set
    __swig_getmethods__["clusters"] = _flame.Flame_clusters_get
    if _newclass:clusters = _swig_property(_flame.Flame_clusters_get, _flame.Flame_clusters_set)
    __swig_setmethods__["distfunc"] = _flame.Flame_distfunc_set
    __swig_getmethods__["distfunc"] = _flame.Flame_distfunc_get
    if _newclass:distfunc = _swig_property(_flame.Flame_distfunc_get, _flame.Flame_distfunc_set)
    def __init__(self): 
        this = _flame.new_Flame()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _flame.delete_Flame
    __del__ = lambda self : None;
Flame_swigregister = _flame.Flame_swigregister
Flame_swigregister(Flame)
cvar = _flame.cvar
basicDistFunctions = cvar.basicDistFunctions


def Flame_New():
  return _flame.Flame_New()
Flame_New = _flame.Flame_New

def Print_Clusters(*args):
  return _flame.Print_Clusters(*args)
Print_Clusters = _flame.Print_Clusters

def Flame_Clear(*args):
  return _flame.Flame_Clear(*args)
Flame_Clear = _flame.Flame_Clear

def Flame_SetDataMatrix(*args):
  return _flame.Flame_SetDataMatrix(*args)
Flame_SetDataMatrix = _flame.Flame_SetDataMatrix

def Flame_SetDistMatrix(*args):
  return _flame.Flame_SetDistMatrix(*args)
Flame_SetDistMatrix = _flame.Flame_SetDistMatrix

def Flame_DefineSupports(*args):
  return _flame.Flame_DefineSupports(*args)
Flame_DefineSupports = _flame.Flame_DefineSupports

def Flame_LocalApproximation(*args):
  return _flame.Flame_LocalApproximation(*args)
Flame_LocalApproximation = _flame.Flame_LocalApproximation

def Flame_MakeClusters(*args):
  return _flame.Flame_MakeClusters(*args)
Flame_MakeClusters = _flame.Flame_MakeClusters
# This file is compatible with both classic and new-style classes.


