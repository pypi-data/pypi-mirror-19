# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class PollQuestionSampleSubpopulations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, observations=None, name=None, margin_of_error=None, responses=None):
        """
        PollQuestionSampleSubpopulations - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'observations': 'int',
            'name': 'str',
            'margin_of_error': 'float',
            'responses': 'list[PollQuestionResponses]'
        }

        self.attribute_map = {
            'observations': 'observations',
            'name': 'name',
            'margin_of_error': 'margin_of_error',
            'responses': 'responses'
        }

        self._observations = observations
        self._name = name
        self._margin_of_error = margin_of_error
        self._responses = responses


    @property
    def observations(self):
        """
        Gets the observations of this PollQuestionSampleSubpopulations.
        Number of people in this subpopulation who responded to this question, or `null` if the survey house did not report a number.

        :return: The observations of this PollQuestionSampleSubpopulations.
        :rtype: int
        """
        return self._observations

    @property
    def name(self):
        """
        Gets the name of this PollQuestionSampleSubpopulations.
        One of: Adults, Adults - Democrat, Adults - Republican, Adults - independent, Registered Voters, Registered Voters - Democrat, Registered Voters - Republican, Registered Voters - independent, Likely Voters, Likely Voters - Democrat, Likely Voters - Republican, Likely Voters - independent. `Likely Voters` is editorially important during election seasons; sometimes Pollster editors will skip all other subpopulations.

        :return: The name of this PollQuestionSampleSubpopulations.
        :rtype: str
        """
        return self._name

    @property
    def margin_of_error(self):
        """
        Gets the margin_of_error of this PollQuestionSampleSubpopulations.
        Margin of error for this subpopulation, or `null` if the survey house did not report a number.

        :return: The margin_of_error of this PollQuestionSampleSubpopulations.
        :rtype: float
        """
        return self._margin_of_error

    @property
    def responses(self):
        """
        Gets the responses of this PollQuestionSampleSubpopulations.
        Options the survey house provided to respondents, and respondents' answers. These are ordered randomly.

        :return: The responses of this PollQuestionSampleSubpopulations.
        :rtype: list[PollQuestionResponses]
        """
        return self._responses

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
