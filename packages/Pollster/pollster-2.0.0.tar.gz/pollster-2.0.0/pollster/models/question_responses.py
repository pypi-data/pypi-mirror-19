# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class QuestionResponses(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, label=None, party=None, incumbent=None):
        """
        QuestionResponses - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'label': 'str',
            'party': 'str',
            'incumbent': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'party': 'party',
            'incumbent': 'incumbent'
        }

        self._name = name
        self._label = label
        self._party = party
        self._incumbent = incumbent


    @property
    def name(self):
        """
        Gets the name of this QuestionResponses.
        More verbose description of the option, also unique to this Question. For people, this is usually a full name (e.g., `Hillary Clinton`); other response names are chosen on a case-by-case basis (e.g., `Other` or `Remain in the E.U.`)

        :return: The name of this QuestionResponses.
        :rtype: str
        """
        return self._name

    @property
    def label(self):
        """
        Gets the label of this QuestionResponses.
        Identifier for this response, succinct and unique to this Question. For example, `Clinton`. The canonical use case: the label is what one would write on a chart.

        :return: The label of this QuestionResponses.
        :rtype: str
        """
        return self._label

    @property
    def party(self):
        """
        Gets the party of this QuestionResponses.
        If this response is a candidate running for office, the name of the candidate's registered political party (e.g., `Republican`); otherwise `null`

        :return: The party of this QuestionResponses.
        :rtype: str
        """
        return self._party

    @property
    def incumbent(self):
        """
        Gets the incumbent of this QuestionResponses.
        If this response is a candidate running for re-election to the same office, `true`; otherwise `false`.

        :return: The incumbent of this QuestionResponses.
        :rtype: bool
        """
        return self._incumbent

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
