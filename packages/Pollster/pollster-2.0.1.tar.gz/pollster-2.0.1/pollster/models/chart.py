# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class Chart(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, slug=None, url=None, created_at=None, tags=None, pollster_estimates=None, pollster_estimate_summary=None, question=None):
        """
        Chart - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'slug': 'str',
            'url': 'str',
            'created_at': 'datetime',
            'tags': 'list[str]',
            'pollster_estimates': 'list[ChartEstimate]',
            'pollster_estimate_summary': 'ChartPollsterEstimateSummary',
            'question': 'Question'
        }

        self.attribute_map = {
            'slug': 'slug',
            'url': 'url',
            'created_at': 'created_at',
            'tags': 'tags',
            'pollster_estimates': 'pollster_estimates',
            'pollster_estimate_summary': 'pollster_estimate_summary',
            'question': 'question'
        }

        self._slug = slug
        self._url = url
        self._created_at = created_at
        self._tags = tags
        self._pollster_estimates = pollster_estimates
        self._pollster_estimate_summary = pollster_estimate_summary
        self._question = question


    @property
    def slug(self):
        """
        Gets the slug of this Chart.
        Unique Chart identifier. For example: `obama-job-approval`.

        :return: The slug of this Chart.
        :rtype: str
        """
        return self._slug

    @property
    def url(self):
        """
        Gets the url of this Chart.
        URL where Pollster has published this Chart (for end-users, not API users).

        :return: The url of this Chart.
        :rtype: str
        """
        return self._url

    @property
    def created_at(self):
        """
        Gets the created_at of this Chart.
        Date Pollster editors first created this Chart

        :return: The created_at of this Chart.
        :rtype: datetime
        """
        return self._created_at

    @property
    def tags(self):
        """
        Gets the tags of this Chart.
        Tag slugs that pertain to this Chart. Includes Tags that pertain to this Chart's Question.

        :return: The tags of this Chart.
        :rtype: list[str]
        """
        return self._tags

    @property
    def pollster_estimates(self):
        """
        Gets the pollster_estimates of this Chart.
        Pollster-generated estimates. Intuitively, \"what the polls suggest\".  These estimates are produced by algorithms. We publish the output of one or more algorithms. This Array always has at least one entry, and that entry is Pollster's best guess as to \"what the polls suggest\".  Branding-wise, you may call these \"Pollster Estimates\" if you publish `chart.pollster_estimates[0].values`. 

        :return: The pollster_estimates of this Chart.
        :rtype: list[ChartEstimate]
        """
        return self._pollster_estimates

    @property
    def pollster_estimate_summary(self):
        """
        Gets the pollster_estimate_summary of this Chart.


        :return: The pollster_estimate_summary of this Chart.
        :rtype: ChartPollsterEstimateSummary
        """
        return self._pollster_estimate_summary

    @property
    def question(self):
        """
        Gets the question of this Chart.


        :return: The question of this Chart.
        :rtype: Question
        """
        return self._question

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
