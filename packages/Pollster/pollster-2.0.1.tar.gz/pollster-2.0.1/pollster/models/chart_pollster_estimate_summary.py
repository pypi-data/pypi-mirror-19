# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class ChartPollsterEstimateSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, behind=None, datetime=None, ahead=None, probability=None, created_at=None):
        """
        ChartPollsterEstimateSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'behind': 'str',
            'datetime': 'datetime',
            'ahead': 'str',
            'probability': 'float',
            'created_at': 'datetime'
        }

        self.attribute_map = {
            'behind': 'behind',
            'datetime': 'datetime',
            'ahead': 'ahead',
            'probability': 'probability',
            'created_at': 'created_at'
        }

        self._behind = behind
        self._datetime = datetime
        self._ahead = ahead
        self._probability = probability
        self._created_at = created_at


    @property
    def behind(self):
        """
        Gets the behind of this ChartPollsterEstimateSummary.
        Response label

        :return: The behind of this ChartPollsterEstimateSummary.
        :rtype: str
        """
        return self._behind

    @property
    def datetime(self):
        """
        Gets the datetime of this ChartPollsterEstimateSummary.
        `chart.pollster_estimates[0].datetime`

        :return: The datetime of this ChartPollsterEstimateSummary.
        :rtype: datetime
        """
        return self._datetime

    @property
    def ahead(self):
        """
        Gets the ahead of this ChartPollsterEstimateSummary.
        Response label

        :return: The ahead of this ChartPollsterEstimateSummary.
        :rtype: str
        """
        return self._ahead

    @property
    def probability(self):
        """
        Gets the probability of this ChartPollsterEstimateSummary.
        Probability (between 0.5 and 1) that the response label `ahead` is ahead of `behind`

        :return: The probability of this ChartPollsterEstimateSummary.
        :rtype: float
        """
        return self._probability

    @property
    def created_at(self):
        """
        Gets the created_at of this ChartPollsterEstimateSummary.
        `chart.pollster_estimates[0].created_at`

        :return: The created_at of this ChartPollsterEstimateSummary.
        :rtype: datetime
        """
        return self._created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
