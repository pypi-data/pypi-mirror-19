# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class Poll(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, slug=None, start_date=None, end_date=None, created_at=None, updated_at=None, survey_house=None, mode=None, url=None, partisanship=None, partisan_affiliation=None, poll_questions=None):
        """
        Poll - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'slug': 'str',
            'start_date': 'date',
            'end_date': 'date',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'survey_house': 'str',
            'mode': 'str',
            'url': 'str',
            'partisanship': 'str',
            'partisan_affiliation': 'str',
            'poll_questions': 'list[PollQuestion]'
        }

        self.attribute_map = {
            'slug': 'slug',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'survey_house': 'survey_house',
            'mode': 'mode',
            'url': 'url',
            'partisanship': 'partisanship',
            'partisan_affiliation': 'partisan_affiliation',
            'poll_questions': 'poll_questions'
        }

        self._slug = slug
        self._start_date = start_date
        self._end_date = end_date
        self._created_at = created_at
        self._updated_at = updated_at
        self._survey_house = survey_house
        self._mode = mode
        self._url = url
        self._partisanship = partisanship
        self._partisan_affiliation = partisan_affiliation
        self._poll_questions = poll_questions


    @property
    def slug(self):
        """
        Gets the slug of this Poll.
        Unique Poll identifier. For example: `gallup-26892`.

        :return: The slug of this Poll.
        :rtype: str
        """
        return self._slug

    @property
    def start_date(self):
        """
        Gets the start_date of this Poll.
        First date survey house conducted polling.

        :return: The start_date of this Poll.
        :rtype: date
        """
        return self._start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this Poll.
        Last date survey house conducted polling

        :return: The end_date of this Poll.
        :rtype: date
        """
        return self._end_date

    @property
    def created_at(self):
        """
        Gets the created_at of this Poll.
        Date Pollster editors first entered this Poll

        :return: The created_at of this Poll.
        :rtype: datetime
        """
        return self._created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Poll.
        Date Pollster editors last edited this Poll. Edits are usually corrections; they are sometimes additions of new questions that were originally skipped.

        :return: The updated_at of this Poll.
        :rtype: datetime
        """
        return self._updated_at

    @property
    def survey_house(self):
        """
        Gets the survey_house of this Poll.
        Name of survey house. For example: `Gallup`

        :return: The survey_house of this Poll.
        :rtype: str
        """
        return self._survey_house

    @property
    def mode(self):
        """
        Gets the mode of this Poll.
        One of `Automated Phone`, `Internet`, `IVR/Live Phone`, etc.

        :return: The mode of this Poll.
        :rtype: str
        """
        return self._mode

    @property
    def url(self):
        """
        Gets the url of this Poll.
        Website where the survey house published the poll results.

        :return: The url of this Poll.
        :rtype: str
        """
        return self._url

    @property
    def partisanship(self):
        """
        Gets the partisanship of this Poll.
        One of `Nonpartisan`, `Pollster` (the survey house is partisan), `Sponsor` (the survey house is nonpartisan, but the sponsor is partisan)

        :return: The partisanship of this Poll.
        :rtype: str
        """
        return self._partisanship

    @property
    def partisan_affiliation(self):
        """
        Gets the partisan_affiliation of this Poll.
        `None` if `partisanship` is `Nonpartisan`; otherwise one of `Dem`, `Rep` or `Other`

        :return: The partisan_affiliation of this Poll.
        :rtype: str
        """
        return self._partisan_affiliation

    @property
    def poll_questions(self):
        """
        Gets the poll_questions of this Poll.
        Questions on the Poll that Pollster editors have entered. Pollster doesn't include every question on the poll: it only includes questions of interest to Pollster editors. Poll questions are ordered in the same order as published by the survey house. 

        :return: The poll_questions of this Poll.
        :rtype: list[PollQuestion]
        """
        return self._poll_questions

        self._poll_questions = poll_questions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
