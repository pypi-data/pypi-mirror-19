# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class PollQuestion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, text=None, question=None, sample_subpopulations=None):
        """
        PollQuestion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'text': 'str',
            'question': 'Question',
            'sample_subpopulations': 'list[PollQuestionSampleSubpopulations]'
        }

        self.attribute_map = {
            'text': 'text',
            'question': 'question',
            'sample_subpopulations': 'sample_subpopulations'
        }

        self._text = text
        self._question = question
        self._sample_subpopulations = sample_subpopulations


    @property
    def text(self):
        """
        Gets the text of this PollQuestion.
        The text of the question in the Poll. This may be an empty string if the survey house didn't publish the question or if Pollster editors didn't enter it.

        :return: The text of this PollQuestion.
        :rtype: str
        """
        return self._text

    @property
    def question(self):
        """
        Gets the question of this PollQuestion.


        :return: The question of this PollQuestion.
        :rtype: Question
        """
        return self._question

    @property
    def sample_subpopulations(self):
        """
        Gets the sample_subpopulations of this PollQuestion.
        Results by subpopulation that Pollster editors have entered for this question. These are always in this order: Adults, Adults - Democrat, Adults - Republican, Adults - independent, Registered Voters, Registered Voters - Democrat, Registered Voters - Republican, Registered Voters - independent, Likely Voters, Likely Voters - Democrat, Likely Voters - Republican, Likely Voters - independent 

        :return: The sample_subpopulations of this PollQuestion.
        :rtype: list[PollQuestionSampleSubpopulations]
        """
        return self._sample_subpopulations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
