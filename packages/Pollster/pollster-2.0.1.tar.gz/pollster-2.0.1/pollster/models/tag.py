# coding: utf-8

from pprint import pformat
from six import iteritems
import re


class Tag(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, slug=None, n_questions=None, n_charts=None, n_polls=None):
        """
        Tag - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'slug': 'str',
            'n_questions': 'int',
            'n_charts': 'int',
            'n_polls': 'int'
        }

        self.attribute_map = {
            'slug': 'slug',
            'n_questions': 'n_questions',
            'n_charts': 'n_charts',
            'n_polls': 'n_polls'
        }

        self._slug = slug
        self._n_questions = n_questions
        self._n_charts = n_charts
        self._n_polls = n_polls


    @property
    def slug(self):
        """
        Gets the slug of this Tag.
        Unique tag identifier. For example: `2016-president`.

        :return: The slug of this Tag.
        :rtype: str
        """
        return self._slug

    @property
    def n_questions(self):
        """
        Gets the n_questions of this Tag.
        Number of Questions with this Tag

        :return: The n_questions of this Tag.
        :rtype: int
        """
        return self._n_questions

    @property
    def n_charts(self):
        """
        Gets the n_charts of this Tag.
        Number of Charts with this Tag (including Charts that represent Questions with this Tag).

        :return: The n_charts of this Tag.
        :rtype: int
        """
        return self._n_charts

    @property
    def n_polls(self):
        """
        Gets the n_polls of this Tag.
        Number of Polls that include Questions with this Tag.

        :return: The n_polls of this Tag.
        :rtype: int
        """
        return self._n_polls

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
