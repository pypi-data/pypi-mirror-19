# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems
import re


class EdgeOfflineConfigurationInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EdgeOfflineConfigurationInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'routes': 'list[DomainNetworkRoute]',
            'addresses': 'list[DomainNetworkAddress]',
            'ipv4_capabilities': 'DomainCapabilities',
            'ipv6_capabilities': 'DomainCapabilities'
        }

        self.attribute_map = {
            'routes': 'routes',
            'addresses': 'addresses',
            'ipv4_capabilities': 'ipv4Capabilities',
            'ipv6_capabilities': 'ipv6Capabilities'
        }

        self._routes = None
        self._addresses = None
        self._ipv4_capabilities = None
        self._ipv6_capabilities = None

    @property
    def routes(self):
        """
        Gets the routes of this EdgeOfflineConfigurationInterface.
        The list of routes assigned to this interface.

        :return: The routes of this EdgeOfflineConfigurationInterface.
        :rtype: list[DomainNetworkRoute]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """
        Sets the routes of this EdgeOfflineConfigurationInterface.
        The list of routes assigned to this interface.

        :param routes: The routes of this EdgeOfflineConfigurationInterface.
        :type: list[DomainNetworkRoute]
        """
        
        self._routes = routes

    @property
    def addresses(self):
        """
        Gets the addresses of this EdgeOfflineConfigurationInterface.
        The list of IP addresses on this interface.  Priority of dns addresses are based on order in the list.

        :return: The addresses of this EdgeOfflineConfigurationInterface.
        :rtype: list[DomainNetworkAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """
        Sets the addresses of this EdgeOfflineConfigurationInterface.
        The list of IP addresses on this interface.  Priority of dns addresses are based on order in the list.

        :param addresses: The addresses of this EdgeOfflineConfigurationInterface.
        :type: list[DomainNetworkAddress]
        """
        
        self._addresses = addresses

    @property
    def ipv4_capabilities(self):
        """
        Gets the ipv4_capabilities of this EdgeOfflineConfigurationInterface.
        IPv4 interface settings.

        :return: The ipv4_capabilities of this EdgeOfflineConfigurationInterface.
        :rtype: DomainCapabilities
        """
        return self._ipv4_capabilities

    @ipv4_capabilities.setter
    def ipv4_capabilities(self, ipv4_capabilities):
        """
        Sets the ipv4_capabilities of this EdgeOfflineConfigurationInterface.
        IPv4 interface settings.

        :param ipv4_capabilities: The ipv4_capabilities of this EdgeOfflineConfigurationInterface.
        :type: DomainCapabilities
        """
        
        self._ipv4_capabilities = ipv4_capabilities

    @property
    def ipv6_capabilities(self):
        """
        Gets the ipv6_capabilities of this EdgeOfflineConfigurationInterface.
        IPv6 interface settings.

        :return: The ipv6_capabilities of this EdgeOfflineConfigurationInterface.
        :rtype: DomainCapabilities
        """
        return self._ipv6_capabilities

    @ipv6_capabilities.setter
    def ipv6_capabilities(self, ipv6_capabilities):
        """
        Sets the ipv6_capabilities of this EdgeOfflineConfigurationInterface.
        IPv6 interface settings.

        :param ipv6_capabilities: The ipv6_capabilities of this EdgeOfflineConfigurationInterface.
        :type: DomainCapabilities
        """
        
        self._ipv6_capabilities = ipv6_capabilities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

