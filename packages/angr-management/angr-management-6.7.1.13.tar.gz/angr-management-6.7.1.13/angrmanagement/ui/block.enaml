
import capstone
import angr

from capstone import x86
from angr import PathHierarchy
from enaml.core.api import Looper, Conditional
from enaml.layout.api import hbox, vbox, spacer
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import Container, Label, PushButton, Menu, Action, Timer

from ..widgets.api import RichLabel, RichContainer
from ..utils import (
    get_label_text, get_block_objects, address_to_text, jump_to_address, get_out_branches_for_insn,
    get_string_for_display,
)

from .wkitem import get_inst, get_wk
from .rename_label import RenameLabel


enamldef Operand(Container): op_ui:
    attr insn
    attr operand
    attr operand_index
    attr is_branch_target
    attr is_indirect_branch
    attr branch_targets
    attr is_last
    attr disasm
    attr wk
    #attr arch
    #attr thumb
    #attr stmt_idx
    #attr state = None

    attr addr_jump_to = None

    padding = 0

    # tool_tip << str(op_val(state, insn, stmt_idx, op))

    constraints = [
        hbox(cntOperand, delimiter, spacing=0)
    ]

    Timer: tmrJumpTo:
        interval = 30
        single_shot = True
        timeout ::
            jump_to_address(wk, addr_jump_to)

    Container: cntOperand:
        padding = 0

        Conditional:
            condition = is_branch_target

            Conditional:
                condition = is_indirect_branch

                Container:
                    padding = 0

                    constraints = [
                        hbox(lblDelim0, lblIndirTargetOperand, lblDelim1, spacing=0, *sum(loopIndirTarget.items, []))
                    ]

                    Looper: loopIndirTarget:
                        iterable << branch_targets

                        RichLabel: lblIndirTarget:
                            style_class = 'operand_branch_target_func' if loop_item in disasm.kb.functions else 'operand_branch_target'
                            text = address_to_text(loop_item, disasm.kb)

                            mouse_double_clicked ::
                                op_ui.addr_jump_to = loop_item
                                tmrJumpTo.start()

                    Label: lblDelim0:
                        text = '['

                    RichLabel: lblIndirTargetOperand:
                        style_class = 'insn'
                        text = operand.render()[0]

                    Label: lblDelim1:
                        text = '] '

            Conditional:
                condition = not is_indirect_branch

                RichLabel: lblDirectTarget:
                    style_class = 'operand_branch_target_func' if branch_targets is not None and next(iter(branch_targets)) in disasm.kb.functions else 'operand_branch_target'
                    text = operand.render()[0]

                    mouse_double_clicked ::
                        if branch_targets is not None:
                            op_ui.addr_jump_to = next(iter(branch_targets))
                            tmrJumpTo.start()

        Conditional:
            condition = not is_branch_target

            RichLabel: lblOperand:
                style_class = 'insn'
                text = operand.render()[0]

                mouse_pressed ::
                    mouse_event = change.get('value')
                    if mouse_event.button() == 1:
                        # left click
                        if self.style_class != 'insn_selected':
                            self.style_class = 'insn_selected'
                        else:
                            self.style_class = 'insn'

    Label: delimiter:
        style_class = 'insn'
        text = "," if not is_last else ""

enamldef Instruction(RichContainer): insn_ui:
    attr insn
    attr arch
    attr thumb
    attr stmt_idx
    attr out_branch
    attr state = None
    attr is_onfocus
    attr wk
    attr disasm

    padding = 0

    constraints = [
        hbox(address, mnemonic, spacing=5, *(sum(operands_loop.items + [[spacer]], []) + condDataRef.items))
    ]

    is_onfocus << insn.addr in insn_ui.wk.highlighted_insns

    # style_class << '' #'highlight' if get_wk(self).selected_function._addr in get_inst(self).ddgs and networkx.dijkstra_blah(get_inst().ddgs[get_wk(self).selected_function._addr][1]) else ''
    style_class << "highlight" if is_onfocus else ""

    clicked ::
        # toggle whether self is selected or not
        self.is_onfocus = not self.is_onfocus
        if not self.is_onfocus and insn.addr in insn_ui.wk.highlighted_insns:
            insn_ui.wk.highlighted_insns.remove(insn.addr)

    Menu:
        context_menu = True
        Action:
            text = "SymExec from %#x" % (insn.addr)
            triggered ::
                # Create a new path group starting from this address
                inst = wk.inst

                state = inst.proj.factory.blank_state(addr=insn.addr)
                hierarchy = PathHierarchy(weakkey_path_mapping=True)
                pg = inst.proj.factory.path_group(state, hierarchy=hierarchy)
                inst.path_groups.add_path_group(pg=pg)

                sym_wk = inst.get_workspaces(sort='symbolic')[0]
                sym_wk.selected_pg = pg
                inst.current_workspace = sym_wk

    RichLabel: address:
        style_class = 'insn_addr'
        text = '%08x' % insn.addr

    RichLabel: mnemonic:
        style_class = 'insn'
        text = insn.mnemonic.render()[0]
        mouse_pressed ::
            mouse_event = change.get('value')
            if mouse_event.button() == 1:
                # left click
                if self.style_class != 'insn_selected':
                    self.style_class = 'insn_selected'
                else:
                    self.style_class = 'insn'

    Looper: operands_loop:
        iterable << list(enumerate(insn.operands))

        Operand:
            operand = loop_item[1]
            operand_index = loop_item[0]
            wk = insn_ui.wk
            insn = insn_ui.insn
            is_branch_target = insn.type in ('branch', 'call') and operand_index == insn.branch_target_operand
            is_indirect_branch = insn.branch_type == 'indirect'
            branch_targets = (out_branch.targets if out_branch is not None else None) if is_branch_target else None
            disasm = insn_ui.disasm
            #arch = insn_ui.arch
            #insn = insn_ui.insn
            #thumb = insn_ui.thumb
            #stmt_idx = insn_ui.stmt_idx
            is_last = operand_index == len(insn_ui.insn.operands) - 1
            #state << insn_ui.state

    Conditional: condDataRef:
        condition = insn.addr in wk.inst.cfg._insn_addr_to_memory_data

        Container:
            padding = 0

            Conditional:
                condition = wk.inst.cfg._insn_addr_to_memory_data[insn.addr].sort == 'string'

                RichLabel: lblStringData:
                    text = get_string_for_display(wk.inst.cfg._insn_addr_to_memory_data[insn.addr])


enamldef Block(Container): block_ui:
    attr disasm
    attr cfg_nodes
    attr state = None
    attr wk
    attr addr
    attr out_branches

    style_class = 'block'
    padding = 0

    constraints = [
        vbox(spacing=2, *sum([ i.items for i in sum(insns_loop.items, [])], []))
    ]

    StyleSheet:
        Style:
            style_class = 'block'

        Style:
            style_class = 'insn'
            Setter:
                field = 'font'
                value = '10pt courier new'
            Setter:
                field = 'color'
                value = '#000080'
            #Setter:
            #    field = 'border'
            #    value = '2px solid blue'

        Style:
            style_class = 'operand_branch_target'
            Setter:
                field = 'font'
                value = '10pt courier new'
            Setter:
                field = 'color'
                value = '#ff0000'

        Style:
            style_class = 'operand_branch_target_func'
            Setter:
                field = 'font'
                value = '10pt courier new'
            Setter:
                field = 'color'
                value = '#0000ff'

        Style:
            style_class = 'insn_selected'
            Setter:
                field = 'font'
                value = '10pt courier new'
            Setter:
                field = 'color'
                value = '#000080'
            Setter:
                field = 'background-color'
                value = '#efbfba'

        Style:
            style_class = 'label'
            Setter:
                field = 'color'
                value = '#0000ff'

        Style:
            style_class = 'label_selected'
            Setter:
                field = 'color'
                value = '#0000ff'
            Setter:
                field = 'background-color'
                value = '#efbfba'

        Style:
            style_class = 'insn_addr'
            Setter:
                field = 'font'
                value = '10pt courier new'
            Setter:
                field = 'color'
                value = 'black'

        Style:
            style_class = 'highlight'
            Setter:
                field = 'background-color'
                value = '#ffffbb'

    Looper: insns_loop:
        #iterable = list(itertools.chain.from_iterable())
        iterable << get_block_objects(disasm, cfg_nodes)

        Conditional:
            condition = isinstance(loop_item, angr.analyses.disassembly.Instruction)
            Instruction:
                insn = loop_item
                #arch = blocks[0].capstone.arch
                #thumb = blocks[0].capstone.thumb
                #stmt_idx = None
                # stmt_idx = next(i for (i, stmt) in reversed(list(enumerate(block.vex.statements))) if stmt.tag == 'Ist_IMark' and stmt.addr == loop_item.addr)
                state = block_ui.state
                wk = block_ui.wk
                disasm = block_ui.disasm
                out_branch = get_out_branches_for_insn(out_branches, insn.addr)

        Conditional:
            condition = isinstance(loop_item, tuple)
            RichLabel: lblLabel:

                attr label_addr = loop_item[0]
                attr label_text = loop_item[1]

                Menu:
                    context_menu = True
                    Action: actRenameHeader:
                        text = "Re&name..."
                        triggered ::
                            rename_window = RenameLabel(disasm=disasm, disasm_wk=wk, addr=addr)
                            rename_window.exec_()

                            if rename_window.label_updated:
                                # redraw the label
                                lblLabel.text = get_label_text(lblLabel.label_addr, disasm.kb, function=None)

                style_class << 'label_selected' if wk.selected_addr == label_addr else 'label'
                text = label_text

                mouse_pressed ::
                    mouse_event = change.get('value')
                    btn = mouse_event.button()
                    if btn == 1:
                        # left click
                        if wk.selected_addr != label_addr:
                            wk.selected_addr = label_addr
                            wk.selected_label = lblLabel
                        else:
                            wk.selected_addr = -1
                            wk.selected_label = None

                    elif btn == 2:
                        # right click
                        wk.selected_addr = label_addr
                        wk.selected_label = lblLabel
