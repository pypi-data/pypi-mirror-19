import os
from collections import defaultdict
import websocket

from enaml.core.api import Looper, Include
from enaml.layout.api import vbox
from enaml.layout.dock_layout import AreaLayout, HSplitLayout, VSplitLayout, TabLayout, DockBarLayout, ItemLayout, InsertItem
from enaml.widgets.api import (
    Action, Container, DockArea, FileDialogEx, Label, MainWindow, Menu, MenuBar, Notebook, Page, PushButton,
    Timer,
    DockItem, ToolBar, StatusBar, StatusItem
)

import angr
import simuvex
import claripy
from angr import Project

from ..data.workspace import SymexecView, DisasmGraphView
from ..data.jobs import CFGGenerationJob
from .state import RegistersItem, MemoryItem
from .pathgroup import PathGroupItem
from .pathtree import PathTreeItem
from .cfg import CFGItem
from .functions import FunctionManagerItem
from .console import DisasmConsoleItem, SymexecConsoleItem


def gen_static_wk(inst):
    layout = AreaLayout(item=HSplitLayout('funcs', 'cfg'), dock_bars=[DockBarLayout(ItemLayout('console'), position='bottom')])

    view = DisasmGraphView(name='Disassembly View', sort='disassembly', layout=layout, inst=inst)
    cfg = CFGItem(name='cfg', wk=view)
    funcs = FunctionManagerItem(name='funcs', wk=view)
    console = DisasmConsoleItem(name='console', wk=view)
    view.items = [cfg, funcs, console]

    return view

def gen_symbolic_wk(inst):
    layout = AreaLayout(item=HSplitLayout('path_tree', VSplitLayout('path_group', TabLayout('regs', 'mem'))), dock_bars=[DockBarLayout(ItemLayout('console'), position='bottom')])

    view = SymexecView(name='Symbolic Analysis', sort='symbolic', layout=layout, inst=inst)
    path_tree = PathTreeItem(name='path_tree', wk=view)
    path_group = PathGroupItem(name='path_group', wk=view)
    regs = RegistersItem(name='regs', wk=view)
    mem = MemoryItem(name='mem', wk=view)
    console = SymexecConsoleItem(name='console', wk=view)
    view.items = [path_tree, path_group, regs, mem, console]

    return view

def get_current_wk(inst):
    return inst.current_workspace

def get_job_stats(inst):
    if inst:
        if not inst.jobs:
            return 'Ready.'
        else:
            return '%d job%s.' % (len(inst.jobs), 's' if len(inst.jobs) != 1 else '')
    else:
        return 'No available instance.'

def initialize_instance(inst, cfg_args):
    if inst is not None and len(inst.workspaces) == 0:
        static_wk = gen_static_wk(inst)
        symbolic_wk = gen_symbolic_wk(inst)

        inst.add_workspace(static_wk)
        inst.add_workspace(symbolic_wk)

    # automatically build the CFG
    if inst is not None:
        inst.add_job(CFGGenerationJob(**cfg_args))

def open_load_binary_window(path, main_window):
    # TODO: Check if the file exists

    lb_window = LoadBinary(file_path=path)
    lb_window.main = main_window
    lb_window.exec_()


enamldef AnalysisToolBar(ToolBar):
    attr inst

    Action:
        text = 'Re-analyze'
        tool_tip = text
        triggered :: inst.add_job(CFGGenerationJob())

enamldef Workspace(Page): wk:
    attr data
    attr ida_conn

    # is this horrible? yes
    initialized :: wk.observe('selected_path', on_path_sel)

    func on_path_sel(_):
        if ida_conn is not None:
            ida_conn.send('setaddress %d' % data.selected_path.addr)

    title << data.name
    name << data.name

    Container:
        #Menu:
        #    context_menu = True
        #    Menu:
        #        title = 'Add Item...'
        #        Looper:
        #            iterable << ALL_ITEMS.items()

        #            Action:
        #                text = loop_item[0]
        #                triggered ::
        #                    name = data.next_item_name()
        #                    item = loop_item[1](area, name=name, wk=data)
        #                    op = InsertItem(item=name)
        #                    area.update_layout(op)

        DockArea: area:
            layout := data.layout

            Include:
                objects << data.items


enamldef Main(MainWindow): main:
    attr app
    attr inst = None
    attr ida_conn = None

    attr file_to_open  # coming from sys.argv[1]

    initialized ::
        if inst is None and file_to_open is not None:
            open_load_binary_window(file_to_open, main)

            if main.inst is None:
                # exit the program
                # TODO: figure out why it doesn't work
                main.close()

        main.show()
        tmrUpdateStatus.start()

    title << os.path.basename(inst.proj.filename) + " - Angr Management" if inst else "Angr Management"

    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Load a new binary\tCtrl+N'
                triggered ::
                    path = FileDialogEx.get_open_file_name(main)
                    if path:
                        open_load_binary_window(path, main)

            Action:
                text = 'Save\tCtrl+S'
                enabled << bool(inst)
                triggered ::
                    path = FileDialogEx.get_save_file_name(main)
                    if path:
                        inst.save(path)
            Action:
                text = 'Open\tCtrl+O'
                triggered ::
                    path = FileDialogEx.get_open_file_name(main)
                    if path:
                        main.inst = Instance.from_file(path)

            Action:
                text = 'Exit\tCtrl+X'
                triggered ::
                    main.close()

    AnalysisToolBar: analysis_toolbar:
        inst << main.inst

    Container:
        constraints = [
            vbox(nbook),
        ]

        #Menu:
        #    context_menu = True
        #    Menu:
        #        title = 'Add Workspace...'
        #        enabled << bool(inst)
        #        Action:
        #            text = 'Symbolic Analysis'
        #            triggered :: inst.add_workspace(gen_symbolic_wk(inst))
        #        Action:
        #            text = 'Static Analysis'
        #            triggered :: inst.add_workspace(gen_symbolic_wk(inst))
        #        Action:
        #            text = 'Blank'
        #            triggered :: inst.add_workspace(WorkspaceData(name='Blank', inst=inst, layout=AreaLayout()))
        #    Action:
        #        text = 'Connect to IDA'
        #        enabled << ida_conn is None
        #        triggered ::
        #            main.ida_conn = websocket.create_connection("ws://localhost:3003", subprotocols=['qira'])

        Notebook: nbook:
            tab_style = 'document'
            selected_tab << inst.current_workspace.name if inst is not None and inst.current_workspace is not None else u''
            selected_tab ::
                inst.current_workspace = self.find(selected_tab)

            Looper:
                iterable << inst.workspaces if inst else []

                Workspace:
                    data = loop_item
                    ida_conn := main.ida_conn

    StatusBar:
        StatusItem:
            Label: lblStatus:
                text << ('Ready.' if not inst.jobs else '%d job%s.' % (len(inst.jobs), 's' if len(inst.jobs) != 1 else '')) if inst else 'No available instance.'

        StatusItem:
            Label: lblProgress:
                text = ""

    Timer: tmrUpdateStatus:
        interval = 500
        single_shot = False
        timeout ::
            lblProgress.text = ('' if not inst or not inst.jobs else ('%s: progress ' % (inst.jobs[0].name)) + '{0:.2f}%...'.format(inst.jobs[0].progress_percentage))

from .load_binary import LoadBinary
