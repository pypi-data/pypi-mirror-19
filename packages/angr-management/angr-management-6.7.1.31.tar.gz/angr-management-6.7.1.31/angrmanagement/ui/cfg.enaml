import textwrap

from enaml.core.api import Conditional, Looper
from enaml.layout.api import vbox, align
from enaml.widgets.api import DockItem, Container, Label, PushButton, MultilineField
from enaml.widgets.timer import Timer
from enaml.styling import StyleSheet, Style, Setter
from enaml.qt.QtCore import Qt

from angr.errors import AngrError

from .jumpto import Jumpto
from .rename_label import RenameLabel
from .block import Block
from ..widgets.api import FlowGraph
from .notify import notify_update
from .wkitem import WorkspaceItem
from ..data.jobs import CFGGenerationJob
from ..data.function_graph import FunctionGraph
from ..utils import get_label_text, get_out_branches


# enamldef CFGNode(Container):
#     attr proj
#     attr node

#     Label:
#         font = '10pt Courier'
#         text = str(get_block(proj, node).capstone) if not proj.is_hooked(node) else str(proj._sim_procedures[node][0].__name__)


enamldef CFGNode(Container): cfgnode:
    attr disasm
    attr proj
    attr function
    attr node
    attr out_branches
    attr addr
    attr func_addr
    attr state = None
    attr wk

    style_class = 'cfg_node'

    StyleSheet:
        Style:
            style_class = 'cfg_node'
            Setter:
                field = 'border'
                value = '2px solid black'

    Block:
        disasm = cfgnode.disasm
        cfg_nodes = [ n for n in node.cfg_nodes ]
        out_branches = cfgnode.out_branches
        # blocks = [ proj.factory.block(n.addr, max_size=n.size) for n in node.cfg_nodes ]
        # header = get_block_header(node.addr, disasm.kb, function=function)
        state = cfgnode.state
        wk = cfgnode.wk
        addr = cfgnode.addr


def get_block(proj, address):
    try:
        block = proj.factory.block(address)
        return block
    except AngrError:
        return None

def find_vfg_state(wk, func_addr, block_addr):
    vfg = wk.inst.vfgs.get(func_addr, None)
    if vfg is None:
        return None

    try:
        return next(node.final_states[0] for node in vfg._graph.nodes() if node.addr == block_addr)
    except StopIteration:
        return None

enamldef CFGItem(WorkspaceItem): cfgi:
    title = "CFG"

    Conditional:
        condition << wk.selected_function is not None

        Container:
            constraints << [
                vbox(graph),
                (width == 500) | 'weak'
                ]

            FlowGraph: graph:
                proj = wk.proj
                selected_function << wk.selected_function
                func_graph << FunctionGraph(function=selected_function)
                selected_function ::
                    graph.visible = False

                key_pressed ::
                    key = change.get('value')
                    if key == Qt.Key_G:
                        # jump to...
                        jumpto = Jumpto()
                        jumpto.disasm_wk = wk
                        jumpto.show()
                    elif key == Qt.Key_N:
                        # rename
                        if wk.selected_addr != -1:
                            rename_window = RenameLabel(disasm=graph.disasm, disasm_wk=wk, addr=wk.selected_addr)
                            rename_window.exec_()

                            if rename_window.label_updated:
                                # redraw the label
                                wk.selected_label.text = get_label_text(wk.selected_addr, disasm.kb, function=None)

                Looper:
                    iterable << func_graph.supergraph.nodes()

                    iterable ::
                        update_timer.start()

                    CFGNode:
                        function = wk.selected_function
                        disasm = graph.disasm
                        name = str(loop_item.addr)
                        addr = loop_item.addr
                        node = loop_item
                        out_branches = get_out_branches(loop_item)
                        func_addr = wk.selected_function.addr
                        proj = wk.proj
                        state = None #find_vfg_state(wk, wk.selected_function.addr, loop_item)
                        wk = cfgi.wk

            Timer: update_timer:
                interval = 30
                single_shot = True
                timeout ::
                    graph.request_relayout()
                    graph.visible = True

    Conditional:
        condition << wk.inst.cfg is None

        Container: container:
            constraints = [
                align('h_center', container),
                align('v_center', container),
                (width == 500) | 'weak',
            ]
