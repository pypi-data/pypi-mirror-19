
from enaml.layout.api import hbox, align, vbox
from enaml.widgets.api import (
    Container, Field, Label, PushButton, Window,
)
from enaml.styling import StyleSheet, Style, Setter
from enaml.qt.QtCore import Qt

from ..widgets.rich_container import RichContainer
from ..widgets.rich_field import RichField
from ..utils import jump_to_address
from .wkitem import get_inst

def is_valid_addr_or_label(input):
    r = convert_to_addr(input)
    return r is not None

def convert_to_addr(input):
    # TODO: take care of labels

    try:
        addr = int(input, 16)
        return addr
    except ValueError:
        return None

enamldef Jumpto(Window): window:
    title = 'Jump to address'
    always_on_top = True
    modality = 'application_modal'

    attr disasm_wk

    StyleSheet:
        Style:
            style_class = 'valid'
            Setter:
                field = 'color'
                value = 'green'

        Style:
            style_class = 'invalid'
            Setter:
                field = 'color'
                value = 'red'

    RichContainer:
        constraints = [
            vbox(
                 hbox(lbl, fldAddr),
                 lblAddrStatus,
                 hbox(btnOK, btnCancel),
                 )
        ]

        key_pressed ::
            key = change.get('value')
            if key == Qt.Key_Escape:
                # close the window
                window.close()

        Label: lbl:
            text = 'Address'

        RichField: fldAddr:
            submit_triggers = [ 'auto_sync', 'return_pressed' ]

            key_pressed ::
                key = change.get('value')
                if key == Qt.Key_Return:
                    # submit
                    btnOK.clicked()

        Label: lblAddrStatus:
            text << 'Valid' if is_valid_addr_or_label(fldAddr.text) else 'Invalid'
            style_class << 'valid' if is_valid_addr_or_label(fldAddr.text) else 'invalid'

        PushButton: btnOK:
            text = "OK"
            clicked ::
                inst = disasm_wk.inst
                addr = convert_to_addr(fldAddr.text)
                if addr is None:
                    # invalid input
                    pass
                else:
                    r = jump_to_address(disasm_wk, addr)
                    if r:
                        window.close()
                    else:
                        # it doesn't belong to any function
                        lblAddrStatus.text = "TODO: the address does not belong to any function."

        PushButton: btnCancel:
            text = "Cancel"
            clicked ::
                window.close()
