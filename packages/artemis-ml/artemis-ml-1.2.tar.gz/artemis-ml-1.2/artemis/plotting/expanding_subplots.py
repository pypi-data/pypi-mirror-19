from collections import OrderedDict
from contextlib import contextmanager

import itertools
import matplotlib.pyplot as plt
from artemis.general.should_be_builtins import bad_value
from artemis.plotting.data_conversion import vector_length_to_tile_dims

__author__ = 'peter'


_newplot_settings = dict(
    layout='grid',
    show_x = True,
    show_y = True,
    xscale = None,
    yscale = None,
    )


def _create_subplot(fig = None, layout = None):

    if layout is None:
        layout = _newplot_settings['layout']
    if fig is None:
        fig = plt.gcf()
    n = len(fig.axes)
    n_rows, n_cols = (1, n+1) if layout in ('h', 'horizontal') else (n+1, 1) if layout in ('v', 'vertical') else \
        vector_length_to_tile_dims(n+1) if layout in ('g', 'grid') else bad_value(layout)
    for i in range(n):
        fig.axes[i].change_geometry(n_rows, n_cols, i+1)
    ax = fig.add_subplot(n_rows, n_cols, n+1)

    if not _newplot_settings['show_x']:
        ax.get_xaxis().set_visible(False)
    if not _newplot_settings['show_y']:
        ax.get_yaxis().set_visible(False)
    return ax



_subplots = OrderedDict()

_plot_name_generator = ('_autogenerated_subplot_{}'.format(i) for i in itertools.count(0))


def select_subplot(name, fig=None, layout=None):
    """
    Set the current axes.  If "name" has been defined, just return that axes, otherwise make a new one.

    :param name: The name of the subplot
    :param fig: The figure, or None to select current figure
    :param layout: 'h' for horizontal layout, 'v' for vertical layout, 'g' for approximately-square grid
    :return: An axes object
    """

    if fig is None:
        fig = plt.gcf()

    if name in _subplots and fig is _subplots[name].get_figure():
        # (subplot has been created) and (figure containing it has not been closed)
        plt.subplot(_subplots[name])
    else:
        if name is None:
            name = _plot_name_generator.next()
        _subplots[name] = _create_subplot(fig=fig, layout=layout)
    return _subplots[name]



def add_subplot(fig = None, layout = None):
    """
    Add a subplot, and adjust the positions of the other subplots appropriately.
    Lifted from this answer: http://stackoverflow.com/a/29962074/851699

    :param fig: The figure, or None to select current figure
    :param layout: 'h' for horizontal layout, 'v' for vertical layout, 'g' for approximately-square grid
    :return: A new axes object
    """
    return select_subplot(name=None, fig=fig, layout=layout)


@contextmanager
def _define_plot_settings(**settings):
    global _newplot_settings
    old_settings = _newplot_settings
    _newplot_settings = _newplot_settings.copy()
    _newplot_settings.update(settings)
    yield
    _newplot_settings = old_settings


class CaptureNewSubplots(object):

    def __enter__(self):
        self._old_subplots = _subplots.copy()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.new_subplots = OrderedDict((s, p) for s, p in _subplots.iteritems() if s not in self._old_subplots)

    def get_new_subplots(self):
        return self.new_subplots


@contextmanager
def hstack_plots():

    with CaptureNewSubplots() as cap:
        with _define_plot_settings(layout='h', show_y = False):
            plt.subplots_adjust(wspace=0)
            yield
    new_subplots = cap.get_new_subplots().values()
    new_subplots[0].get_yaxis().set_visible(True)
    for ax in new_subplots[:-1]:
        ax.set_xticks(ax.get_xticks()[:-1])
