#!/usr/bin/env python

__author__ = "Felix Simkovic"
__date__ = "28 Nov 2016"
__version__ = "0.1"

import argparse
import conkit
import logging
import os
import sys

logging.basicConfig(format='%(message)s', level=logging.INFO)

DESCRIPTION = """
Plot a simple contact map

File format options are:

    Contact files: [{0}]

""".format(' '.join(sorted(conkit.io.CONTACT_FILE_PARSERS.keys())))


def main():
    parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-c', dest='pdbchain', default=None, help='PDB chain to use [default: first in file]. Inter-molecular predictions use two letter convention, i.e AD for contacts between A and D.')
    parser.add_argument('-d', dest='dtn', default=5, type=int, help='Minimum sequence separation [default: 5]')
    parser.add_argument('-f', dest='dfactor', default=1.0, type=float, help='number of contacts to include relative to sequence length [default: 1.0]')
    parser.add_argument('-p', dest='pdbfile', default=None, type=str)
    parser.add_argument('--interchain', action="store_true", default=False, help='Plot inter-chain contacts')
    parser.add_argument('seqfile')
    parser.add_argument('seqformat')
    parser.add_argument('confile')
    parser.add_argument('conformat')
    args = parser.parse_args()
    
    logging.info('This script is experimental for inter-chain contact plotting')
    
    seq = conkit.io.read(args.seqfile, args.seqformat)[0]
    con = conkit.io.read(args.confile, args.conformat)[0]
    
    con.sequence = seq
    con.assign_sequence_register()

    logging.info('Distance to neighbors: {0}'.format(args.dtn))
    con.remove_neighbors(min_distance=args.dtn, inplace=True)

    ncontacts = int(seq.seq_len * args.dfactor)
    logging.info('Number of contacts: {0}'.format(ncontacts))
    con.sort('raw_score', reverse=True, inplace=True)
    con_sliced = con[:ncontacts]
    
    if args.pdbfile:
        if args.pdbchain:
            pdb = conkit.io.read(args.pdbfile, 'pdb')[args.pdbchain]
        elif args.pdbfile:
            pdb = conkit.io.read(args.pdbfile, 'pdb')[0]
        reference = pdb
        logging.info('Potentially removing unmatched contact pairs')
        con_matched = con_sliced.match(pdb, renumber=True, remove_unmatched=True)
    else:
        reference = None
        con_matched = con_sliced

    altloc=False
    for contact in con_matched.copy():
        if contact.res1_chain != contact.res2_chain:
            logging.debug('Setting altloc to True')
            altloc = True
            break
        if contact.res1_chain == contact.res2_chain and args.interchain:
            con_matched.remove(contact.id)
        elif contact.res1_chain != contact.res2_chain and not args.interchain:
            con_matched.remove(contact.id)

    mapformat = 'pdf'
    mapfile = os.path.basename(args.confile).rsplit('.', 1)[0] + '.' + mapformat
    logging.info('Contact map written in {0} format to: {1}'.format(mapformat.upper(), mapfile))
    con_matched.plot_map(reference=reference, file_format=mapformat, file_name=mapfile, altloc=altloc)

    return 0


if __name__ == "__main__":
    sys.exit(main())
