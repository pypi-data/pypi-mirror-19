
/* #########################################################################
 * [2017-01-16 14:37:04.972000] THIS FILE IS AUTOGENERATED - DO NOT EDIT!
 * ######################################################################### */
#ifndef ___DROPBOT_DX__COMMANDS___
#define ___DROPBOT_DX__COMMANDS___

#include "CArrayDefs.h"



namespace dropbot_dx {


typedef struct __attribute__((packed)) {
} BaseNodeSoftwareVersionRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} BaseNodeSoftwareVersionResponse;

typedef struct __attribute__((packed)) {
} PackageNameRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} PackageNameResponse;

typedef struct __attribute__((packed)) {
} DisplayNameRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} DisplayNameResponse;

typedef struct __attribute__((packed)) {
} ManufacturerRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ManufacturerResponse;

typedef struct __attribute__((packed)) {
} SoftwareVersionRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} SoftwareVersionResponse;

typedef struct __attribute__((packed)) {
} UrlRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} UrlResponse;

typedef struct __attribute__((packed)) {
} MicrosecondsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MicrosecondsResponse;

typedef struct __attribute__((packed)) {
} MillisecondsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MillisecondsResponse;

typedef struct __attribute__((packed)) {
  uint16_t us;
} DelayUsRequest;

typedef struct __attribute__((packed)) {
} DelayUsResponse;

typedef struct __attribute__((packed)) {
  uint16_t ms;
} DelayMsRequest;

typedef struct __attribute__((packed)) {
} DelayMsResponse;

typedef struct __attribute__((packed)) {
} RamFreeRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} RamFreeResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  uint8_t mode;
} PinModeRequest;

typedef struct __attribute__((packed)) {
} PinModeResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
} DigitalReadRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} DigitalReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  uint8_t value;
} DigitalWriteRequest;

typedef struct __attribute__((packed)) {
} DigitalWriteResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
} AnalogReadRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} AnalogReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  uint8_t value;
} AnalogWriteRequest;

typedef struct __attribute__((packed)) {
} AnalogWriteResponse;

typedef struct __attribute__((packed)) {
  UInt8Array array;
} ArrayLengthRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} ArrayLengthResponse;

typedef struct __attribute__((packed)) {
  UInt32Array array;
} EchoArrayRequest;

typedef struct __attribute__((packed)) {
  UInt32Array result;
} EchoArrayResponse;

typedef struct __attribute__((packed)) {
  UInt8Array msg;
} StrEchoRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} StrEchoResponse;

typedef struct __attribute__((packed)) {
} MaxSerialPayloadSizeRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} MaxSerialPayloadSizeResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  UInt8Array data;
} UpdateEepromBlockRequest;

typedef struct __attribute__((packed)) {
} UpdateEepromBlockResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint16_t n;
} ReadEepromBlockRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadEepromBlockResponse;

typedef struct __attribute__((packed)) {
} EepromE2endRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} EepromE2endResponse;

typedef struct __attribute__((packed)) {
  uint32_t frequency;
} SetClockRequest;

typedef struct __attribute__((packed)) {
} SetClockResponse;

typedef struct __attribute__((packed)) {
  uint8_t address;
} SetI2cAddressRequest;

typedef struct __attribute__((packed)) {
} SetI2cAddressResponse;

typedef struct __attribute__((packed)) {
} I2cAddressRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} I2cAddressResponse;

typedef struct __attribute__((packed)) {
} I2cBufferSizeRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} I2cBufferSizeResponse;

typedef struct __attribute__((packed)) {
} I2cScanRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} I2cScanResponse;

typedef struct __attribute__((packed)) {
} I2cAvailableRequest;

typedef struct __attribute__((packed)) {
  int16_t result;
} I2cAvailableResponse;

typedef struct __attribute__((packed)) {
} I2cReadByteRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} I2cReadByteResponse;

typedef struct __attribute__((packed)) {
  uint8_t address;
  uint8_t n_bytes_to_read;
} I2cRequestFromRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} I2cRequestFromResponse;

typedef struct __attribute__((packed)) {
  uint8_t address;
  uint8_t n_bytes_to_read;
} I2cReadRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} I2cReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t address;
  UInt8Array data;
} I2cWriteRequest;

typedef struct __attribute__((packed)) {
} I2cWriteResponse;

typedef struct __attribute__((packed)) {
} I2cEnableBroadcastRequest;

typedef struct __attribute__((packed)) {
} I2cEnableBroadcastResponse;

typedef struct __attribute__((packed)) {
} I2cDisableBroadcastRequest;

typedef struct __attribute__((packed)) {
} I2cDisableBroadcastResponse;

typedef struct __attribute__((packed)) {
} MaxI2cPayloadSizeRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MaxI2cPayloadSizeResponse;

typedef struct __attribute__((packed)) {
  uint8_t address;
  UInt8Array data;
} I2cRequestRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} I2cRequestResponse;

typedef struct __attribute__((packed)) {
} I2cPacketResetRequest;

typedef struct __attribute__((packed)) {
} I2cPacketResetResponse;

typedef struct __attribute__((packed)) {
} LoadConfigRequest;

typedef struct __attribute__((packed)) {
} LoadConfigResponse;

typedef struct __attribute__((packed)) {
} SaveConfigRequest;

typedef struct __attribute__((packed)) {
} SaveConfigResponse;

typedef struct __attribute__((packed)) {
} ResetConfigRequest;

typedef struct __attribute__((packed)) {
} ResetConfigResponse;

typedef struct __attribute__((packed)) {
} SerializeConfigRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} SerializeConfigResponse;

typedef struct __attribute__((packed)) {
  UInt8Array serialized;
} UpdateConfigRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} UpdateConfigResponse;

typedef struct __attribute__((packed)) {
  uint32_t new_value;
} OnConfigI2cAddressChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnConfigI2cAddressChangedResponse;

typedef struct __attribute__((packed)) {
} ResetStateRequest;

typedef struct __attribute__((packed)) {
} ResetStateResponse;

typedef struct __attribute__((packed)) {
} SerializeStateRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} SerializeStateResponse;

typedef struct __attribute__((packed)) {
  UInt8Array serialized;
} UpdateStateRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} UpdateStateResponse;

typedef struct __attribute__((packed)) {
} TimerCallbackRequest;

typedef struct __attribute__((packed)) {
} TimerCallbackResponse;

typedef struct __attribute__((packed)) {
} GetBufferRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} GetBufferResponse;

typedef struct __attribute__((packed)) {
} BeginRequest;

typedef struct __attribute__((packed)) {
} BeginResponse;

typedef struct __attribute__((packed)) {
} ServoReadRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} ServoReadResponse;

typedef struct __attribute__((packed)) {
  uint8_t angle;
} ServoWriteRequest;

typedef struct __attribute__((packed)) {
} ServoWriteResponse;

typedef struct __attribute__((packed)) {
  uint16_t us;
} ServoWriteMicrosecondsRequest;

typedef struct __attribute__((packed)) {
} ServoWriteMicrosecondsResponse;

typedef struct __attribute__((packed)) {
} ServoAttachedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} ServoAttachedResponse;

typedef struct __attribute__((packed)) {
} NumberOfChannelsRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} NumberOfChannelsResponse;

typedef struct __attribute__((packed)) {
  uint16_t number_of_channels;
} SetNumberOfChannelsRequest;

typedef struct __attribute__((packed)) {
} SetNumberOfChannelsResponse;

typedef struct __attribute__((packed)) {
} HardwareVersionRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} HardwareVersionResponse;

typedef struct __attribute__((packed)) {
} _UuidRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} _UuidResponse;

typedef struct __attribute__((packed)) {
} StateOfChannelsRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} StateOfChannelsResponse;

typedef struct __attribute__((packed)) {
  UInt8Array id;
} SetIdRequest;

typedef struct __attribute__((packed)) {
  bool result;
} SetIdResponse;

typedef struct __attribute__((packed)) {
  UInt8Array channel_states;
} SetStateOfChannelsRequest;

typedef struct __attribute__((packed)) {
  bool result;
} SetStateOfChannelsResponse;

typedef struct __attribute__((packed)) {
  float frequency;
} OnStateFrequencyChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnStateFrequencyChangedResponse;

typedef struct __attribute__((packed)) {
} MinWaveformVoltageRequest;

typedef struct __attribute__((packed)) {
  float result;
} MinWaveformVoltageResponse;

typedef struct __attribute__((packed)) {
  float voltage;
} _SetVoltageRequest;

typedef struct __attribute__((packed)) {
  bool result;
} _SetVoltageResponse;

typedef struct __attribute__((packed)) {
  float voltage;
} OnStateVoltageChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnStateVoltageChangedResponse;

typedef struct __attribute__((packed)) {
  bool value;
} OnStateHvOutputEnabledChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnStateHvOutputEnabledChangedResponse;

typedef struct __attribute__((packed)) {
  bool value;
} OnStateHvOutputSelectedChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnStateHvOutputSelectedChangedResponse;

typedef struct __attribute__((packed)) {
  bool value;
} OnStateMagnetEngagedChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnStateMagnetEngagedChangedResponse;

typedef struct __attribute__((packed)) {
  float value;
} OnConfigLightIntensityChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnConfigLightIntensityChangedResponse;

typedef struct __attribute__((packed)) {
  bool value;
} OnStateLightEnabledChangedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} OnStateLightEnabledChangedResponse;

typedef struct __attribute__((packed)) {
} MagnetEngagedRequest;

typedef struct __attribute__((packed)) {
  bool result;
} MagnetEngagedResponse;

typedef struct __attribute__((packed)) {
} _InitializeSwitchingBoardsRequest;

typedef struct __attribute__((packed)) {
} _InitializeSwitchingBoardsResponse;

typedef struct __attribute__((packed)) {
} _MagnetEngageRequest;

typedef struct __attribute__((packed)) {
} _MagnetEngageResponse;

typedef struct __attribute__((packed)) {
} _MagnetDisengageRequest;

typedef struct __attribute__((packed)) {
} _MagnetDisengageResponse;

typedef struct __attribute__((packed)) {
  float a;
} TestRequest;

typedef struct __attribute__((packed)) {
  float result;
} TestResponse;

typedef struct __attribute__((packed)) {
} DmaTcdRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} DmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint32_t buffer_size;
} DmaStartRequest;

typedef struct __attribute__((packed)) {
  bool result;
} DmaStartResponse;

typedef struct __attribute__((packed)) {
} DmaStopRequest;

typedef struct __attribute__((packed)) {
} DmaStopResponse;

typedef struct __attribute__((packed)) {
} DmaReadRequest;

typedef struct __attribute__((packed)) {
  int16_t result;
} DmaReadResponse;

typedef struct __attribute__((packed)) {
} DmaFullRequest;

typedef struct __attribute__((packed)) {
  bool result;
} DmaFullResponse;

typedef struct __attribute__((packed)) {
} DmaEmptyRequest;

typedef struct __attribute__((packed)) {
  bool result;
} DmaEmptyResponse;

typedef struct __attribute__((packed)) {
} AdcBufferRequest;

typedef struct __attribute__((packed)) {
  UInt16Array result;
} AdcBufferResponse;

typedef struct __attribute__((packed)) {
  uint8_t type;
  int8_t adc_num;
} SetreferenceRequest;

typedef struct __attribute__((packed)) {
} SetreferenceResponse;

typedef struct __attribute__((packed)) {
} OnTickRequest;

typedef struct __attribute__((packed)) {
} OnTickResponse;

typedef struct __attribute__((packed)) {
} V_SystCvrRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} V_SystCvrResponse;

typedef struct __attribute__((packed)) {
} V_ScbIcsrRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} V_ScbIcsrResponse;

typedef struct __attribute__((packed)) {
} D_FCpuRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} D_FCpuResponse;

typedef struct __attribute__((packed)) {
} D_FBusRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} D_FBusResponse;

typedef struct __attribute__((packed)) {
} OnAdcDoneRequest;

typedef struct __attribute__((packed)) {
} OnAdcDoneResponse;

typedef struct __attribute__((packed)) {
} AdcTimestampUsRequest;

typedef struct __attribute__((packed)) {
  float result;
} AdcTimestampUsResponse;

typedef struct __attribute__((packed)) {
  uint32_t _SYST_CVR;
  uint32_t _millis;
} ComputeTimestampUsRequest;

typedef struct __attribute__((packed)) {
  float result;
} ComputeTimestampUsResponse;

typedef struct __attribute__((packed)) {
} AdcPeriodUsRequest;

typedef struct __attribute__((packed)) {
  float result;
} AdcPeriodUsResponse;

typedef struct __attribute__((packed)) {
  uint8_t bits;
  int8_t adc_num;
} SetresolutionRequest;

typedef struct __attribute__((packed)) {
} SetresolutionResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} GetresolutionRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} GetresolutionResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} GetmaxvalueRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} GetmaxvalueResponse;

typedef struct __attribute__((packed)) {
  uint8_t speed;
  int8_t adc_num;
} SetconversionspeedRequest;

typedef struct __attribute__((packed)) {
} SetconversionspeedResponse;

typedef struct __attribute__((packed)) {
  uint8_t speed;
  int8_t adc_num;
} SetsamplingspeedRequest;

typedef struct __attribute__((packed)) {
} SetsamplingspeedResponse;

typedef struct __attribute__((packed)) {
  uint32_t N;
} BenchmarkFlopsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} BenchmarkFlopsResponse;

typedef struct __attribute__((packed)) {
  uint32_t N;
} BenchmarkIopsRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} BenchmarkIopsResponse;

typedef struct __attribute__((packed)) {
  uint8_t num;
  int8_t adc_num;
} SetaveragingRequest;

typedef struct __attribute__((packed)) {
} SetaveragingResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} EnableinterruptsRequest;

typedef struct __attribute__((packed)) {
} EnableinterruptsResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisableinterruptsRequest;

typedef struct __attribute__((packed)) {
} DisableinterruptsResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} EnabledmaRequest;

typedef struct __attribute__((packed)) {
} EnabledmaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisabledmaRequest;

typedef struct __attribute__((packed)) {
} DisabledmaResponse;

typedef struct __attribute__((packed)) {
  int16_t compValue;
  bool greaterThan;
  int8_t adc_num;
} EnablecompareRequest;

typedef struct __attribute__((packed)) {
} EnablecompareResponse;

typedef struct __attribute__((packed)) {
  int16_t lowerLimit;
  int16_t upperLimit;
  bool insideRange;
  bool inclusive;
  int8_t adc_num;
} EnablecomparerangeRequest;

typedef struct __attribute__((packed)) {
} EnablecomparerangeResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisablecompareRequest;

typedef struct __attribute__((packed)) {
} DisablecompareResponse;

typedef struct __attribute__((packed)) {
  uint8_t gain;
  int8_t adc_num;
} EnablepgaRequest;

typedef struct __attribute__((packed)) {
} EnablepgaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} GetpgaRequest;

typedef struct __attribute__((packed)) {
  uint8_t result;
} GetpgaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} DisablepgaRequest;

typedef struct __attribute__((packed)) {
} DisablepgaResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IsconvertingRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IsconvertingResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IscompleteRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IscompleteResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IsdifferentialRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IsdifferentialResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} IscontinuousRequest;

typedef struct __attribute__((packed)) {
  bool result;
} IscontinuousResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  int8_t adc_num;
} AnalogreadRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} AnalogreadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pinP;
  uint8_t pinN;
  int8_t adc_num;
} AnalogreaddifferentialRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} AnalogreaddifferentialResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  int8_t adc_num;
} StartsinglereadRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartsinglereadResponse;

typedef struct __attribute__((packed)) {
  uint8_t pinP;
  uint8_t pinN;
  int8_t adc_num;
} StartsingledifferentialRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartsingledifferentialResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} ReadsingleRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} ReadsingleResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin;
  int8_t adc_num;
} StartcontinuousRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartcontinuousResponse;

typedef struct __attribute__((packed)) {
  uint8_t pinP;
  uint8_t pinN;
  int8_t adc_num;
} StartcontinuousdifferentialRequest;

typedef struct __attribute__((packed)) {
  bool result;
} StartcontinuousdifferentialResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} AnalogreadcontinuousRequest;

typedef struct __attribute__((packed)) {
  int32_t result;
} AnalogreadcontinuousResponse;

typedef struct __attribute__((packed)) {
  int8_t adc_num;
} StopcontinuousRequest;

typedef struct __attribute__((packed)) {
} StopcontinuousResponse;

typedef struct __attribute__((packed)) {
  uint8_t pin0;
  uint8_t pin1;
} AnalogsynchronizedreadRequest;

typedef struct __attribute__((packed)) {
  Int32Array result;
} AnalogsynchronizedreadResponse;

typedef struct __attribute__((packed)) {
  uint16_t pin;
} AnalogInputToDigitalPinRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} AnalogInputToDigitalPinResponse;

typedef struct __attribute__((packed)) {
  uint16_t pin;
} DigitalPinHasPwmRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} DigitalPinHasPwmResponse;

typedef struct __attribute__((packed)) {
  uint16_t pin;
} DigitalPinToInterruptRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} DigitalPinToInterruptResponse;

typedef struct __attribute__((packed)) {
  uint8_t adc_num;
} ReadAdcRegistersRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadAdcRegistersResponse;

typedef struct __attribute__((packed)) {
  uint8_t adc_num;
  UInt8Array serialized_adc_msg;
} UpdateAdcRegistersRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateAdcRegistersResponse;

typedef struct __attribute__((packed)) {
} ReadPitRegistersRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadPitRegistersResponse;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_pit_msg;
} UpdatePitRegistersRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdatePitRegistersResponse;

typedef struct __attribute__((packed)) {
  uint8_t timer_index;
} ReadPitTimerConfigRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadPitTimerConfigResponse;

typedef struct __attribute__((packed)) {
  uint32_t index;
  UInt8Array serialized_config;
} UpdatePitTimerConfigRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdatePitTimerConfigResponse;

typedef struct __attribute__((packed)) {
} DmaChannelCountRequest;

typedef struct __attribute__((packed)) {
  uint16_t result;
} DmaChannelCountResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ReadDmaTcdRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ResetDmaTcdRequest;

typedef struct __attribute__((packed)) {
} ResetDmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
  UInt8Array serialized_tcd;
} UpdateDmaTcdRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateDmaTcdResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ReadDmaPriorityRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaPriorityResponse;

typedef struct __attribute__((packed)) {
} ReadDmaRegistersRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaRegistersResponse;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_dma_msg;
} UpdateDmaRegistersRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateDmaRegistersResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
} ReadDmaMuxChcfgRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadDmaMuxChcfgResponse;

typedef struct __attribute__((packed)) {
  uint8_t channel_num;
  UInt8Array serialized_mux;
} UpdateDmaMuxChcfgRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateDmaMuxChcfgResponse;

typedef struct __attribute__((packed)) {
} ClearDmaErrorsRequest;

typedef struct __attribute__((packed)) {
} ClearDmaErrorsResponse;

typedef struct __attribute__((packed)) {
} ReadSimScgc6Request;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadSimScgc6Response;

typedef struct __attribute__((packed)) {
} ReadSimScgc7Request;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} ReadSimScgc7Response;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_scgc6;
} UpdateSimScgc6Request;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateSimScgc6Response;

typedef struct __attribute__((packed)) {
  UInt8Array serialized_scgc7;
} UpdateSimScgc7Request;

typedef struct __attribute__((packed)) {
  int8_t result;
} UpdateSimScgc7Response;

typedef struct __attribute__((packed)) {
} FreeAllRequest;

typedef struct __attribute__((packed)) {
} FreeAllResponse;

typedef struct __attribute__((packed)) {
  uint32_t size;
} MemAllocRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MemAllocResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
} MemFreeRequest;

typedef struct __attribute__((packed)) {
} MemFreeResponse;

typedef struct __attribute__((packed)) {
  uint32_t alignment;
  uint32_t size;
} MemAlignedAllocRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MemAlignedAllocResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
} MemAlignedFreeRequest;

typedef struct __attribute__((packed)) {
} MemAlignedFreeResponse;

typedef struct __attribute__((packed)) {
  uint32_t alignment;
  UInt8Array data;
} MemAlignedAllocAndSetRequest;

typedef struct __attribute__((packed)) {
  uint32_t result;
} MemAlignedAllocAndSetResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  UInt8Array data;
} MemCpyHostToDeviceRequest;

typedef struct __attribute__((packed)) {
} MemCpyHostToDeviceResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint32_t size;
} MemCpyDeviceToHostRequest;

typedef struct __attribute__((packed)) {
  UInt8Array result;
} MemCpyDeviceToHostResponse;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint8_t value;
  uint32_t size;
} MemFillUint8Request;

typedef struct __attribute__((packed)) {
} MemFillUint8Response;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint16_t value;
  uint32_t size;
} MemFillUint16Request;

typedef struct __attribute__((packed)) {
} MemFillUint16Response;

typedef struct __attribute__((packed)) {
  uint32_t address;
  uint32_t value;
  uint32_t size;
} MemFillUint32Request;

typedef struct __attribute__((packed)) {
} MemFillUint32Response;

typedef struct __attribute__((packed)) {
  uint32_t address;
  float value;
  uint32_t size;
} MemFillFloatRequest;

typedef struct __attribute__((packed)) {
} MemFillFloatResponse;

typedef struct __attribute__((packed)) {
} LoopRequest;

typedef struct __attribute__((packed)) {
} LoopResponse;

typedef struct __attribute__((packed)) {
} LastDmaChannelDoneRequest;

typedef struct __attribute__((packed)) {
  int8_t result;
} LastDmaChannelDoneResponse;

typedef struct __attribute__((packed)) {
  uint8_t dma_channel;
} AttachDmaInterruptRequest;

typedef struct __attribute__((packed)) {
} AttachDmaInterruptResponse;

typedef struct __attribute__((packed)) {
  uint8_t dma_channel;
} DetachDmaInterruptRequest;

typedef struct __attribute__((packed)) {
} DetachDmaInterruptResponse;



static const int CMD_BASE_NODE_SOFTWARE_VERSION = 0x00;
static const int CMD_PACKAGE_NAME = 0x01;
static const int CMD_DISPLAY_NAME = 0x02;
static const int CMD_MANUFACTURER = 0x03;
static const int CMD_SOFTWARE_VERSION = 0x04;
static const int CMD_URL = 0x05;
static const int CMD_MICROSECONDS = 0x06;
static const int CMD_MILLISECONDS = 0x07;
static const int CMD_DELAY_US = 0x08;
static const int CMD_DELAY_MS = 0x09;
static const int CMD_RAM_FREE = 0x0a;
static const int CMD_PIN_MODE = 0x0b;
static const int CMD_DIGITAL_READ = 0x0c;
static const int CMD_DIGITAL_WRITE = 0x0d;
static const int CMD_ANALOG_READ = 0x0e;
static const int CMD_ANALOG_WRITE = 0x0f;
static const int CMD_ARRAY_LENGTH = 0x10;
static const int CMD_ECHO_ARRAY = 0x11;
static const int CMD_STR_ECHO = 0x12;
static const int CMD_MAX_SERIAL_PAYLOAD_SIZE = 0xff;
static const int CMD_UPDATE_EEPROM_BLOCK = 0x1fe;
static const int CMD_READ_EEPROM_BLOCK = 0x1ff;
static const int CMD_EEPROM_E2END = 0x200;
static const int CMD_SET_CLOCK = 0x2fd;
static const int CMD_SET_I2C_ADDRESS = 0x2fe;
static const int CMD_I2C_ADDRESS = 0x2ff;
static const int CMD_I2C_BUFFER_SIZE = 0x300;
static const int CMD_I2C_SCAN = 0x301;
static const int CMD_I2C_AVAILABLE = 0x302;
static const int CMD_I2C_READ_BYTE = 0x303;
static const int CMD_I2C_REQUEST_FROM = 0x304;
static const int CMD_I2C_READ = 0x305;
static const int CMD_I2C_WRITE = 0x306;
static const int CMD_I2C_ENABLE_BROADCAST = 0x307;
static const int CMD_I2C_DISABLE_BROADCAST = 0x308;
static const int CMD_MAX_I2C_PAYLOAD_SIZE = 0x3fc;
static const int CMD_I2C_REQUEST = 0x3fd;
static const int CMD_I2C_PACKET_RESET = 0x3fe;
static const int CMD_LOAD_CONFIG = 0x4fb;
static const int CMD_SAVE_CONFIG = 0x4fc;
static const int CMD_RESET_CONFIG = 0x4fd;
static const int CMD_SERIALIZE_CONFIG = 0x4fe;
static const int CMD_UPDATE_CONFIG = 0x4ff;
static const int CMD_ON_CONFIG_I2C_ADDRESS_CHANGED = 0x500;
static const int CMD_RESET_STATE = 0x5fa;
static const int CMD_SERIALIZE_STATE = 0x5fb;
static const int CMD_UPDATE_STATE = 0x5fc;
static const int CMD_TIMER_CALLBACK = 0x6f9;
static const int CMD_GET_BUFFER = 0x6fa;
static const int CMD_BEGIN = 0x6fb;
static const int CMD_SERVO_READ = 0x6fc;
static const int CMD_SERVO_WRITE = 0x6fd;
static const int CMD_SERVO_WRITE_MICROSECONDS = 0x6fe;
static const int CMD_SERVO_ATTACHED = 0x6ff;
static const int CMD_NUMBER_OF_CHANNELS = 0x700;
static const int CMD_SET_NUMBER_OF_CHANNELS = 0x701;
static const int CMD_HARDWARE_VERSION = 0x702;
static const int CMD__UUID = 0x703;
static const int CMD_STATE_OF_CHANNELS = 0x704;
static const int CMD_SET_ID = 0x705;
static const int CMD_SET_STATE_OF_CHANNELS = 0x706;
static const int CMD_ON_STATE_FREQUENCY_CHANGED = 0x707;
static const int CMD_MIN_WAVEFORM_VOLTAGE = 0x708;
static const int CMD__SET_VOLTAGE = 0x709;
static const int CMD_ON_STATE_VOLTAGE_CHANGED = 0x70a;
static const int CMD_ON_STATE_HV_OUTPUT_ENABLED_CHANGED = 0x70b;
static const int CMD_ON_STATE_HV_OUTPUT_SELECTED_CHANGED = 0x70c;
static const int CMD_ON_STATE_MAGNET_ENGAGED_CHANGED = 0x70d;
static const int CMD_ON_CONFIG_LIGHT_INTENSITY_CHANGED = 0x70e;
static const int CMD_ON_STATE_LIGHT_ENABLED_CHANGED = 0x70f;
static const int CMD_MAGNET_ENGAGED = 0x710;
static const int CMD__INITIALIZE_SWITCHING_BOARDS = 0x711;
static const int CMD__MAGNET_ENGAGE = 0x712;
static const int CMD__MAGNET_DISENGAGE = 0x713;
static const int CMD_TEST = 0x714;
static const int CMD_DMA_TCD = 0x715;
static const int CMD_DMA_START = 0x716;
static const int CMD_DMA_STOP = 0x717;
static const int CMD_DMA_READ = 0x718;
static const int CMD_DMA_FULL = 0x719;
static const int CMD_DMA_EMPTY = 0x71a;
static const int CMD_ADC_BUFFER = 0x71b;
static const int CMD_SETREFERENCE = 0x71c;
static const int CMD_ON_TICK = 0x71d;
static const int CMD_V__SYST_CVR = 0x71e;
static const int CMD_V__SCB_ICSR = 0x71f;
static const int CMD_D__F_CPU = 0x720;
static const int CMD_D__F_BUS = 0x721;
static const int CMD_ON_ADC_DONE = 0x722;
static const int CMD_ADC_TIMESTAMP_US = 0x723;
static const int CMD_COMPUTE_TIMESTAMP_US = 0x724;
static const int CMD_ADC_PERIOD_US = 0x725;
static const int CMD_SETRESOLUTION = 0x726;
static const int CMD_GETRESOLUTION = 0x727;
static const int CMD_GETMAXVALUE = 0x728;
static const int CMD_SETCONVERSIONSPEED = 0x729;
static const int CMD_SETSAMPLINGSPEED = 0x72a;
static const int CMD_BENCHMARK_FLOPS = 0x72b;
static const int CMD_BENCHMARK_IOPS = 0x72c;
static const int CMD_SETAVERAGING = 0x72d;
static const int CMD_ENABLEINTERRUPTS = 0x72e;
static const int CMD_DISABLEINTERRUPTS = 0x72f;
static const int CMD_ENABLEDMA = 0x730;
static const int CMD_DISABLEDMA = 0x731;
static const int CMD_ENABLECOMPARE = 0x732;
static const int CMD_ENABLECOMPARERANGE = 0x733;
static const int CMD_DISABLECOMPARE = 0x734;
static const int CMD_ENABLEPGA = 0x735;
static const int CMD_GETPGA = 0x736;
static const int CMD_DISABLEPGA = 0x737;
static const int CMD_ISCONVERTING = 0x738;
static const int CMD_ISCOMPLETE = 0x739;
static const int CMD_ISDIFFERENTIAL = 0x73a;
static const int CMD_ISCONTINUOUS = 0x73b;
static const int CMD_ANALOGREAD = 0x73c;
static const int CMD_ANALOGREADDIFFERENTIAL = 0x73d;
static const int CMD_STARTSINGLEREAD = 0x73e;
static const int CMD_STARTSINGLEDIFFERENTIAL = 0x73f;
static const int CMD_READSINGLE = 0x740;
static const int CMD_STARTCONTINUOUS = 0x741;
static const int CMD_STARTCONTINUOUSDIFFERENTIAL = 0x742;
static const int CMD_ANALOGREADCONTINUOUS = 0x743;
static const int CMD_STOPCONTINUOUS = 0x744;
static const int CMD_ANALOGSYNCHRONIZEDREAD = 0x745;
static const int CMD_ANALOG_INPUT_TO_DIGITAL_PIN = 0x746;
static const int CMD_DIGITAL_PIN_HAS_PWM = 0x747;
static const int CMD_DIGITAL_PIN_TO_INTERRUPT = 0x748;
static const int CMD_READ_ADC_REGISTERS = 0x749;
static const int CMD_UPDATE_ADC_REGISTERS = 0x74a;
static const int CMD_READ_PIT_REGISTERS = 0x74b;
static const int CMD_UPDATE_PIT_REGISTERS = 0x74c;
static const int CMD_READ_PIT_TIMER_CONFIG = 0x74d;
static const int CMD_UPDATE_PIT_TIMER_CONFIG = 0x74e;
static const int CMD_DMA_CHANNEL_COUNT = 0x74f;
static const int CMD_READ_DMA_TCD = 0x750;
static const int CMD_RESET_DMA_TCD = 0x751;
static const int CMD_UPDATE_DMA_TCD = 0x752;
static const int CMD_READ_DMA_PRIORITY = 0x753;
static const int CMD_READ_DMA_REGISTERS = 0x754;
static const int CMD_UPDATE_DMA_REGISTERS = 0x755;
static const int CMD_READ_DMA_MUX_CHCFG = 0x756;
static const int CMD_UPDATE_DMA_MUX_CHCFG = 0x757;
static const int CMD_CLEAR_DMA_ERRORS = 0x758;
static const int CMD_READ_SIM_SCGC6 = 0x759;
static const int CMD_READ_SIM_SCGC7 = 0x75a;
static const int CMD_UPDATE_SIM_SCGC6 = 0x75b;
static const int CMD_UPDATE_SIM_SCGC7 = 0x75c;
static const int CMD_FREE_ALL = 0x75d;
static const int CMD_MEM_ALLOC = 0x75e;
static const int CMD_MEM_FREE = 0x75f;
static const int CMD_MEM_ALIGNED_ALLOC = 0x760;
static const int CMD_MEM_ALIGNED_FREE = 0x761;
static const int CMD_MEM_ALIGNED_ALLOC_AND_SET = 0x762;
static const int CMD_MEM_CPY_HOST_TO_DEVICE = 0x763;
static const int CMD_MEM_CPY_DEVICE_TO_HOST = 0x764;
static const int CMD_MEM_FILL_UINT8 = 0x765;
static const int CMD_MEM_FILL_UINT16 = 0x766;
static const int CMD_MEM_FILL_UINT32 = 0x767;
static const int CMD_MEM_FILL_FLOAT = 0x768;
static const int CMD_LOOP = 0x769;
static const int CMD_LAST_DMA_CHANNEL_DONE = 0x76a;
static const int CMD_ATTACH_DMA_INTERRUPT = 0x76b;
static const int CMD_DETACH_DMA_INTERRUPT = 0x76c;

}  // namespace dropbot_dx



#endif  // ifndef ___DROPBOT_DX__COMMANDS___
