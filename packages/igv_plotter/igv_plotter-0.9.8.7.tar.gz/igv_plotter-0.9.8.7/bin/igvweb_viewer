#!/usr/bin/env python

import argparse
import flask
import json
import logging
import os
import re
import socket
import requests


try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen


logging.getLogger('werkzeug').setLevel(logging.ERROR) # disable Flask log messages

log = logging.getLogger('igvweb_viewer')
log.addHandler(logging.StreamHandler())

app = flask.Flask(__name__)

# This data structure is populated before starting the web server. Each entry
# in the top-level list is a dictionary representing an HTML page (eg. the 1st
# dict represents the 1st web page the user will see).
# The 'files' sublist contains file paths to be loaded as IGV tracks on this page.
# The 'loci' sublist contains locus strings (eg. "chr1:12345") each of which
# will become a 'jump to: <locus>' link on this page.
# If there is more than one dict, 'prev', 'next' links will appear to allow the
# user to navigate between these pages.
HTML_PAGE_LIST = [{'files': [], 'loci': []}]

# List of file paths that can be accessed through this server. WARNING: unless
# the machine this script runs on is behind a firewall, anybody on the internet
# will be able to access these files while this script is running.
FILES_VISIBLE_THROUGH_WEB_SERVER = set()

# Which client IPs are permitted to make requests to this server. If set to None,
# all IPs will be permitted.
PERMITTED_CLIENT_IP_ADDRESSES = set()
STATIC_DIR = os.path.abspath(os.path.dirname(__file__) + "/../../static/")

REFERENCE_GENOME_SPEC = {'id': 'hg19'}


@app.route('/js/<path>', methods=['GET'])
@app.route('/css/<path>', methods=['GET'])
@app.route('/css/img/<path>', methods=['GET'])
@app.route('/fonts/<path>', methods=['GET'])
def send_static_files(path):
    relative_path = flask.request.path.lstrip('/').split('?')[0]

    log.info("sending: %s/%s" % (STATIC_DIR, relative_path))
    return flask.send_from_directory(STATIC_DIR, relative_path)


@app.route('/file/<path>', methods=['GET'])
def send_file_contents(path):
    """Handles IGV.js requests"""

    relative_path = path.replace("|", "/")

    client_ip_address = flask.request.remote_addr
    if not is_permitted_IP_address(client_ip_address):
        return "ERROR: your IP address (%s) is not permitted to view this data. " \
               "If you are behind a firewall or can share this data publicly, run " \
               "igvweb_viewer with -a to permit all IP addresses." % client_ip_address

    # as a security precaution, only allow access to files that were specified in the command line args
    if relative_path not in FILES_VISIBLE_THROUGH_WEB_SERVER:
        error_msg = "ERROR: unexpected file path requested: %s" % relative_path
        log.error(error_msg)
        return error_msg

    path = os.path.abspath(relative_path)
    
    if path.endswith('.bam.bai'):
        if not os.path.isfile(path):
            path = path.replace('.bam.bai', '.bai')
    elif path.endswith('.bai'):
        if not os.path.isfile(path):
            path = path.replace('.bai', '.bam.bai')

    # handle igv.js Range header which it uses to request a subset of a .bam
    range_header = flask.request.headers.get('Range', None)
    if not range_header:
        log.info("sending %(relative_path)s to %(client_ip_address)s" % locals())
        return flask.send_from_directory(os.path.dirname(path),
                                         os.path.basename(path))

    #log.info("sending %(relative_path)s %(range_header)s to %(client_ip_address)s" % locals())
    m = re.search('(\d+)-(\d*)', range_header)
    if not m:
        error_msg = "ERROR: unexpected range header syntax: %s" % range_header
        log.error(error_msg)
        return error_msg

    size = os.path.getsize(path)
    offset = int(m.group(1))
    length = int(m.group(2) or size) - offset

    log.info("sending %(relative_path)s bytes %(offset)s+%(length)s/%(size)s to %(client_ip_address)s" % locals())

    data = None
    with open(path, 'rb') as f:
        f.seek(offset)
        data = f.read(length)

    rv = flask.Response(data, 206, mimetype="application/octet-stream",
        direct_passthrough=True)
    rv.headers.add('Content-Range', 'bytes {0}-{1}/{2}'.format(
        offset, offset + length - 1, size))

    return rv


@app.route('/', defaults={'page_number': 0})
@app.route('/page/<int:page_number>')
def send_html_page(page_number):
    """Flask handler that generates all html web pages"""

    if page_number >= len(HTML_PAGE_LIST):
        return "Invalid page: %(page_number)s. To create more pages, specify " \
               "more files on the command line." % locals()

    client_ip_address = flask.request.remote_addr
    if not is_permitted_IP_address(client_ip_address):
        return "ERROR: your IP address (%s) is not permitted to view this page. " \
               "If you are behind a firewall or can share this data publicly, run " \
               "igvweb_viewer with -a to permit all IP addresses." % client_ip_address


    html_page_dict = HTML_PAGE_LIST[page_number]
    html_page_dict['reference_genome_spec'] = REFERENCE_GENOME_SPEC
    html_page_dict['prev_page'] = page_number - 1 if page_number > 0 else None
    html_page_dict['page'] = page_number
    html_page_dict['next_page'] = page_number + 1 if page_number + 1 < len(HTML_PAGE_LIST) else None

    #log.info("--------")
    log.info("sending page #%(page_number)s to %(client_ip_address)s" % locals())

    html_page_template = """
    <html>
    <head><title>IGV web viewer</title></head>
    <body>
        <table width='100%'><tr>
        <td width='50px'></td>
        {% if loci %}
            <td>
            <b>Jump to:</b>&nbsp;&nbsp;
            {% for locus in loci %}
                <a href="javascript: igv.browser.search('{{locus}}');">{{locus}}</a>
                &nbsp;&nbsp;
            {% endfor %}
            </td>
        {% endif %}
        {% if prev_page or prev_page == 0 or next_page %}
            <td width='120px'>
                {% if prev_page or prev_page == 0 %}
                    <a href = '/page/{{ prev_page }}'>&lt; prev</a>
                {% else %}
                    &nbsp; prev
                {% endif %}
                 &nbsp; &nbsp;
                {% if next_page %}
                    <a href = '/page/{{ next_page }}'>next &gt;</a>
                {% else %}
                    next &nbsp;
                {% endif %}
            </td>
        {% endif %}
        </tr></table>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <div id='igv_container'></div>

          <!-- igv.js -->
          <link rel="stylesheet" type="text/css" href="/css/jquery-ui.css"/>
          <link rel="stylesheet" type="text/css" href="/css/font-awesome.min.css">
          <link rel="stylesheet" type="text/css" href="/css/igv-1.0.1.css">
          <script type="text/javascript" src="/js/jquery.min.js"></script>
          <script type="text/javascript" src="/js/jquery-ui.min.js"></script>
          <script type="text/javascript" src="/js/igv-1.0.1.js"></script>

         <script type="text/javascript">
            var igv_div = $("#igv_container")[0];
            var tracks = [];

            {% for filename, extension, indexed, name in files %}
                tracks.push({
                    name: '{{ name }}',
                    url: '/file/{{ filename }}',
                });
                //type: '{{ extension }}',ll
                //indexed: {{ indexed | tojson }},

            {% endfor %}

           var options = {
              showCommandBar: true,
              showKaryo: false,
              reference: {{ reference_genome_spec  | tojson }},
              locus: '{{ loci[0] }}',
              tracks: tracks,
           };

           browser = igv.createBrowser(igv_div, options);

           $('#reset-read-viz').click(function() {
              igv.browser.search(locus);
           });
        </script>
    </body>
    </html>
    """

    return flask.render_template_string(html_page_template, **html_page_dict)


def is_permitted_IP_address(ip_address):
    """Takes an IP address string and returns True if it's ok to send data to this IP"""
    if PERMITTED_CLIENT_IP_ADDRESSES is None:
        return True

    if ip_address in PERMITTED_CLIENT_IP_ADDRESSES:
        return True

    # ask on the command line whether to accept request from unknown IP
    # NOTE: This could occupy all server request-handling threads if multiple requests from non-permitted IP addresses
    # come in. request handlers appear to run in separate processes, so not possible to share state between them.
    #
    #i = ""
    #while True:
    #    i = raw_input("Allow requests from IP %(ip_address)s [Y/n]? " % locals())
    #    if i.lower() == "y":
    #        PERMITTED_CLIENT_IP_ADDRESSES.add(ip_address)
    #        logging.info("accepting request from %(ip_address)s" % locals())
    #        return True
    #    elif i.lower() == "n":
    #        logging.info("rejecting request from %(ip_address)s" % locals())
    #        return Fasle
    #    else:
    #        print("ERROR: please enter Y or n")


def parse_locus(locus):
    """Takes a string like "chrX:12345" and returns ("chrX", 12345),
    or None if parsing failed.
    """
    match = re.match("^([a-zA-Z0-9]{1,5}):([0-9,]{1,10})$", locus)
    if match:
        return match.group(1), int(match.group(2).replace(",", ""))
    else:
        return None


def parse_region(region):
    """Takes a string like "chrX:12345-54321" and returns ("chrX", 12345, 54321)
    or None if parsing failed.
    """
    match = re.match("^([a-zA-Z0-9]{1,5}):([0-9]{1,10})-([0-9]{1,10})$", region)
    if match:
        return match.group(1), int(match.group(2)), int(match.group(3))
    else:
        return None


def start_igvweb_server(files_and_loci, verbose=True, host="0.0.0.0", port=8000,
                        permitted_client_ip_addresses=["127.0.0.1"],
                        reference_fasta_path=None):
    """
    The main entry point for igvweb_viewer.

    Args:
        files_and_loci: A list of file paths to display in igv.js, optionally
            interspersed with loci to jump to. Files can be: bed, wig, vcf,
            and/or bam. Loci can be specified as, for example, "X:12345" or
            "chr1:12345-54321".
        verbose: whether to print detailed logging info.
        host: network interface the server should listen on  ("0.0.0.0" will
            listen on all interfaces, while "127.0.0.1" will listen on one)
        port: network port the server should listen on
        permitted_client_ip_addresses: A list of IP address strings. Requests
            coming from any other IP address will trigger a WARNING log
            message, and no response will be sent unless confirmation to go ahead
            is manually provided on the command line. By default this list just
            contains "127.0.0.1" which means only the computer on which this
            script is running will be able to make requests (eg. the web browser
            must be running on the same computer as this script). Set this
            to None to allow connections from any IP address.
        reference_fasta_path: (optional) path of reference genome fasta to enable
            offline use on localhost
    """

    # validate args and apply verbose arg
    assert type(files_and_loci) is str or type(files_and_loci) is list, \
        "files_and_loci arg type must be list or str. Got %s instead." % type(files_and_loci)

    assert permitted_client_ip_addresses is None or len(permitted_client_ip_addresses) > 0, \
        "permitted_client_ip_addresses list is empty(?) %s" % str(permitted_client_ip_addresses)

    if type(files_and_loci) is str:
        files_and_loci = files_and_loci.split()  # split the string into tokens

    if verbose:
        log.setLevel(logging.INFO)
    else:
        log.setLevel(logging.WARNING)

    # init the global PERMITTED_CLIENT_IP_ADDRESSES set for use by request handlers
    global PERMITTED_CLIENT_IP_ADDRESSES
    if permitted_client_ip_addresses is None:
        PERMITTED_CLIENT_IP_ADDRESSES = None
    else:
        PERMITTED_CLIENT_IP_ADDRESSES = set(permitted_client_ip_addresses)

    if reference_fasta_path:
        assert os.path.isfile(reference_fasta_path), "reference fasta file not found: %s" % reference_fasta_path
        assert os.path.isfile(reference_fasta_path+".fai"), ".fai index file not found for reference fasta: %s" % (
            reference_fasta_path+".fai")

        FILES_VISIBLE_THROUGH_WEB_SERVER.add(reference_fasta_path)
        FILES_VISIBLE_THROUGH_WEB_SERVER.add(reference_fasta_path+".fai")

        REFERENCE_GENOME_SPEC['fastaURL'] = "/file/"+os.path.abspath(reference_fasta_path).replace("/", "|")


    # process files and loci arg
    log.info("---- page 0 ----")
    previous_arg_was_a_locus = False  # used to decide when to start a new page
    for arg in files_and_loci:
        if os.path.isfile(arg):   # handle file args
            if previous_arg_was_a_locus and len(HTML_PAGE_LIST[-1]['files']) > 0:
                # start a new set of files + loci to be displayed on a new page
                HTML_PAGE_LIST.append({
                    'files': [],
                    'loci': [],
                })
                log.info("---- page %d ----" % (len(HTML_PAGE_LIST) - 1))
            previous_arg_was_a_locus = False

            # get the parameters igv wants for each file
            log.info("file: " + arg)
            filename = arg
            name = os.path.basename(filename)
            if name.endswith(".gz") or name.endswith(".bgz"):
                extension = ".".join(filename.split('.')[-2:])
            else:
                extension = filename.split('.')[-1]
            indexed = False

            # validate file extension and index
            if extension == 'bam':
                indexed = True
                if not any(os.path.isfile(idx) for idx in [filename + ".bai", filename.replace(".bam", ".bai")]):
                    log.warn("WARNING: .bai index not found for %(filename)s. Skipping..." % locals())
                    continue

                FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename)
                FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename + ".bai")
                FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename.replace(".bam", ".bai"))
            elif extension in ['bed.gz', 'vcf.gz', 'gff.gz', 'gtf.gz']:
                indexed = os.path.isfile(filename + ".tbi") or os.path.isfile(filename + ".idx")
                extension = extension.replace('.gz', '')
                FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename)
                if indexed:
                    FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename + ".tbi")
                    FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename + ".idx")                
            elif extension in ['bed', 'gff', 'gtf', 'wig', 'vcf']:
                FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename)
                indexed = os.path.isfile(filename + ".idx")
                if indexed:
                    FILES_VISIBLE_THROUGH_WEB_SERVER.add(filename + ".idx")
            else:
                log.warn("WARNING: unexpected file type: %(filename)s. Skipping..." % locals())
                continue

            # replace / with | to work around a Flask bug where url arg values containing slashes are handled
            # badly - making it impossible to say whether the filename originally had a leading slash or not
            HTML_PAGE_LIST[-1]['files'].append(
                (filename.replace("/", "|"),
                 extension,
                 indexed,
                 name))
        elif ":" in arg:
            locus = parse_locus(arg)
            if locus:  # handle locus args
                arg = "%s:%s-%s" % (locus[0], locus[1]-200, locus[1]+200)
            elif ':' not in arg:
                chrom, start, end = look_up_symbol(arg)
                if chrom:
                    log.info("Resolved genomic coordinates for %s as %s:%s-%s" % (arg, chrom, start, end))
                    arg = "%s:%s-%s" % (chrom, start, end)

            if parse_region(arg):
                log.info("region: " + arg)
                HTML_PAGE_LIST[-1]['loci'].append(arg)
                previous_arg_was_a_locus = True
            
        else:
            if "/" in arg:
                p.error("File doesn't exist: " + arg)
            else:
                p.error("Unable to parse arg: " + arg)

    # check that at least one file was specified
    if len(HTML_PAGE_LIST[-1]['files']) == 0:
        p.error("No files provided.")

    # commented out because decided that specifying loci should be optional.
    #if len(HTML_PAGE_LIST[-1]['loci']) == 0:
    #    if len(HTML_PAGE_LIST) > 1:
    #        log.info("WARNING: no loci provided for filename(s): " + ",".join(HTML_PAGE_LIST[-1]['files']) + ". Skipping..")
    #        del HTML_PAGE_LIST[-1]
    #    else:
    #        p.error("No loci provided.")


    log_message = "listening on http://%s:%s" % (host, port)
    if socket.gethostname() != host:
        log_message += "  (aka. http://%s:%s)" % (socket.gethostname(), port)
    print(log_message)

    app.run(host=host, port=port, processes=4)


def look_up_symbol(symbol):
    """Uses Ensembl API to retrieve genomic coordinates for the given gene or transcript.
    Args:
       symbol: gene symbol or gene or transcript id

    Returns: 3-tuple of (chrom, start, end), or None if there was an error.
    """

    r = requests.get("https://rest.ensembl.org/lookup/symbol/homo_sapiens/%s?expand=0" % symbol, headers={'Content-type':'application/json'})
    if r.status_code != 200:
        log.warning("WARNING: unable to lookup %s genomic coordinates using https://rest.ensembl.org API. Received HTTP response code: %s" % (name, r.status_code))
        return (None, None, None)

    try:
        json_dict = json.loads(r.content)
        chrom = json_dict['seq_region_name']
        start = int(json_dict['start'])
        end = int(json_dict['end'])
        return (chrom, start, end)
    except Exception as e:
        log.warning("WARNING: unable to lookup %s genomic coordinates using https://rest.ensembl.org API. Couldn't parse resonse: \"%s\"" % (name, r.content))
        return (None, None, None)

def can_connect_to_www():
    try:
        r = urlopen("http://s3.amazonaws.com/", timeout=1)
        return True
    except Exception as e:
        log.info(e)
        return False


if __name__ == "__main__":
    p = argparse.ArgumentParser(
        description="This script takes a list of files on the command line and, "
                    "after starting up a webserver, prints out the url of "
                    "the computer it's running on. You can then point your web "
                    "browser to this url to see these files in igv.js - which is "
                    "Jim Robinson's web-based implementation of IGV "
                    "(https://github.com/igvteam/igv.js). ",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    p.add_argument("files_and_loci", metavar="files and loci", nargs="+",
        help="One or more files to load, along with (optionally) loci to jump to. "
            "Files can be: bed, wig, vcf, and/or bam. Loci can be specified as, "
            "for example, X:12345 or chr1:12345-54321. ")

    p.add_argument("--host", help="Host name or ip address to listen on. "
        "For computers with more than one network interface, 0.0.0.0 will listen "
        "on all interfaces.", default="0.0.0.0")
    p.add_argument("-p", "--port", help="Port to listen on.", default=8000)
    p.add_argument("-a", "--any-ip", action="store_true",
        help="Permit connections from any IP address. "
            "WARNING: unless the computer this script runs on is behind a firewall, "
            "anybody on the internet may be able to access the given list of files while "
            "this script is running.")
    p.add_argument("-r", "--reference-fasta", help="hg19 reference genome .fasta file "
            "(an .fai index file must also be present). If not provided, it will use a "
            "publicly-hosted copy from an Amazon S3 server.")
    p.add_argument("-v", "--verbose", action="store_true",
        help="Enable detailed logging output.")

    args = p.parse_args()

    permitted_client_ip_addresses = None if args.any_ip else ["127.0.0.1"]

    if not can_connect_to_www() and not args.reference_fasta:
        p.error("Unable to connect to Amazon S3 server. Please check that you're online, "
                "or use -r to provide a reference genome fasta.")

    start_igvweb_server(args.files_and_loci,
                        verbose=args.verbose,
                        host=args.host,
                        port=args.port,
                        permitted_client_ip_addresses=permitted_client_ip_addresses,
                        reference_fasta_path=args.reference_fasta)
