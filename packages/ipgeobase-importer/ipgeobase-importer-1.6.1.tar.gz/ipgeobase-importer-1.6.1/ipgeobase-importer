#!/usr/bin/env python
# coding=utf-8
from __future__ import unicode_literals

from base64 import b64encode
from os import path as os_path
from os import makedirs
from sys import argv, stderr
from zipfile import ZipFile

from requests import get as rget

try:
    from StringIO import StringIO
except ImportError:
    from io import BytesIO as StringIO


def error(text):
    stderr.write(text + "\n")
    exit(1)


if len(argv) < 2:
    error("Usage: %s output_dir" % argv[0])

output = argv[1]
try:
    makedirs(output)
except OSError as exc:
    from errno import EEXIST
    if exc.errno == EEXIST and os_path.isdir(output):
        pass
    else:
        error("Can't create directory %s" % output)

archive = rget("http://ipgeobase.ru/files/db/Main/geo_files.zip")
if archive.status_code != 200:
    error("IPGeobase no answer: %s" % archive.status_code)

extracteddata = ZipFile(StringIO(archive.content))

filelist = extracteddata.namelist()
if "cities.txt" not in filelist:
    error("cities.txt not downloaded")
if "cidr_optim.txt" not in filelist:
    error("cidr_optim.txt not downloaded")

database = {}

REGIONS = {
    u'Республика Адыгея': (1, 'UTC+3'),
    u'Республика Башкортостан': (2, 'UTC+5'),
    u'Республика Бурятия': (3, 'UTC+8'),
    u'Республика Алтай': (4, 'UTC+6'),
    u'Республика Дагестан': (5, 'UTC+3'),
    u'Республика Ингушетия': (6, 'UTC+3'),
    u"Республика Кабардино-Балкария": (7, 'UTC+3'),
    u'Республика Калмыкия': (8, 'UTC+3'),
    u"Республика Карачаево-Черкессия": (9, 'UTC+3'),
    u'Республика Карелия': (10, 'UTC+3'),
    u'Республика Коми': (11, 'UTC+3'),
    u'Республика Марий Эл': (12, 'UTC+3'),
    u'Республика Мордовия': (13, 'UTC+3'),
    u'Республика Саха (Якутия)': (14, 'UTC+11'),
    u"Республика Северная Осетия (Алания)": (15, 'UTC+3'),
    u'Республика Татарстан': (16, 'UTC+3'),
    u"Республика Тыва (Тува)": (17, 'UTC+7'),
    u"Республика Удмуртия": (18, 'UTC+4'),
    u"Республика Хакасия": (19, 'UTC+7'),
    u"Республика Чечня": (20, 'UTC+3'),
    u"Республика Чувашия": (21, 'UTC+3'),
    u'Алтайский край': (22, 'UTC+6'),
    u'Краснодарский край': (23, 'UTC+3'),
    u'Красноярский край': (24, 'UTC+7'),
    u"Приморский край": (25, 'UTC+10'),
    u'Ставропольский край': (26, 'UTC+3'),
    u'Хабаровский край': (27, 'UTC+10'),
    u'Амурская область': (28, 'UTC+9'),
    u'Архангельская область': (29, 'UTC+3'),
    u"Астраханская область": (30, 'UTC+3'),
    u'Белгородская область': (31, 'UTC+3'),
    u'Брянская область': (32, 'UTC+3'),
    u'Владимирская область': (33, 'UTC+3'),
    u'Волгоградская область': (34, 'UTC+3'),
    u"Вологодская область": (35, 'UTC+3'),
    u'Воронежская область': (36, 'UTC+3'),
    u'Ивановская область': (37, 'UTC+3'),
    u'Иркутская область': (38, 'UTC+8'),
    u'Калининградская область': (39, 'UTC+2'),
    u'Калужская область': (40, 'UTC+3'),
    u'Камчатский край': (41, 'UTC+12'),
    u'Кемеровская область': (42, 'UTC+7'),
    u"Кировская область": (43, 'UTC+3'),
    u"Костромская область": (44, 'UTC+3'),
    u'Курганская область': (45, 'UTC+5'),
    u'Курская область': (46, 'UTC+3'),
    u'Ленинградская область': (47, 'UTC+3'),
    u"Липецкая область": (48, 'UTC+3'),
    u"Магаданская область": (49, 'UTC+10'),
    u'Московская область': (50, 'UTC+3'),
    u'Мурманская область': (51, 'UTC+3'),
    u"Нижегородская область": (52, 'UTC+3'),
    u'Новгородская область': (53, 'UTC+3'),
    u"Новосибирская область": (54, 'UTC+6'),
    u"Омская область": (55, 'UTC+6'),
    u'Оренбургская область': (56, 'UTC+5'),
    u'Орловская область': (57, 'UTC+3'),
    u'Пензенская область': (58, 'UTC+3'),
    u'Пермский край': (59, 'UTC+5'),
    u'Псковская область': (60, 'UTC+3'),
    u'Ростовская область': (61, 'UTC+3'),
    u'Рязанская область': (62, 'UTC+3'),
    u'Самарская область': (63, 'UTC+4'),
    u'Саратовская область': (64, 'UTC+3'),
    u'Сахалинская область': (65, 'UTC+11'),
    u"Свердловская область": (66, 'UTC+5'),
    u"Смоленская область": (67, 'UTC+3'),
    u'Тамбовская область': (68, 'UTC+3'),
    u'Тверская область': (69, 'UTC+3'),
    u"Томская область": (70, 'UTC+6'),
    u'Тульская область': (71, 'UTC+3'),
    u'Тюменская область': (72, 'UTC+5'),
    u'Ульяновская область': (73, 'UTC+3'),
    u"Челябинская область": (74, 'UTC+5'),
    u'Забайкальский край': (75, 'UTC+8'),
    u'Ярославская область': (76, 'UTC+3'),
    u'Москва': (77, 'UTC+3'),
    u'Санкт-Петербург': (78, 'UTC+3'),
    u'Еврейская автономная область': (79, 'UTC+10'),
    u'Ненецкий автономный округ': (83, 'UTC+3'),
    u"Ханты-Мансийский автономный округ": (86, 'UTC+5'),
    u'Чукотский автономный округ': (87, 'UTC+12'),
    u"Ямало-Ненецкий автономный округ": (89, 'UTC+5'),
    u"Республика Крым": (91, 'UTC+3')
}

CITIES = {}
for line in extracteddata.open("cities.txt").readlines():
    # Format is:
    # <city_id>\t<city_name>\t<region>\t<district>\t<lattitude>\t<longitude>
    cid, city, region_name = line.decode("cp1251").split("\t")[:3]
    if REGIONS.get(region_name) is not None:
        CITIES[cid] = {'city': b64encode(city.encode("utf8")).decode("utf8"),
                       'reg_id': REGIONS.get(region_name)[0],
                       'tz': REGIONS.get(region_name)[1]}
        if cid == "1199":  # Zelenograd fix
            CITIES[cid]['reg_id'] = 77

for line in extracteddata.open("cidr_optim.txt").readlines():
    # Format is: <int_start>\t<int_end>\t<ip_range>\t<country_code>\tcity_id
    ip_range, country, cid = line.decode("cp1251").rstrip().split("\t")[2:]
    # Skip not russian cities
    if country == "RU" and cid in CITIES:
        database["".join(ip_range.split())] = CITIES[cid]


# Create nginx geoip compatible files
with open(os_path.join(output, "region.txt"), "w") as reg:
    with open(os_path.join(output, "city.txt"), "w") as city:
        with open(os_path.join(output, "tz.txt"), "w") as tz:
            for ip_range in sorted(database):
                info = database[ip_range]
                if info['city']:
                    city.write("%s %s;\n" % (ip_range, info['city']))
                if info['reg_id']:
                    reg.write("%s %02d;\n" % (ip_range, info['reg_id']))
                if info['tz']:
                    tz.write("%s %s;\n" % (ip_range, info['tz']))

# Tor
torlist = rget("https://torstatus.blutmagie.de/ip_list_exit.php"
               "/Tor_ip_list_EXIT.csv")
if torlist.status_code == 200:
    torlist = set(filter(len, torlist.content.decode("utf8").split("\n")))
else:
    torlist = set()

torproject = rget("https://check.torproject.org/exit-addresses")
if torproject.status_code == 200:
    torproject = set(
        map(lambda s: s.split()[1],
            filter(lambda l: "ExitAddress" in l,
                   torproject.content.decode("utf8").split("\n"))))
else:
    torproject = set()

with open(os_path.join(output, "tor.txt"), "w") as tor:
    for ip in sorted(torlist | torproject,
                     key=lambda i: tuple(int(p) for p in i.split("."))):
        tor.write("%s-%s 1;\n" % (ip, ip))
