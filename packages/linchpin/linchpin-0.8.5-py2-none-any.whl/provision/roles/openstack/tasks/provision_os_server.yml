- name: "register resource count"
  shell: python -c "print [x for x in range( 0, {{ res_def['count'] }} )]"
  register: res_count
 
- name: "provision/deprovision os_server resources by looping on count"
  os_server:
    state: "{{ instance.4 }}"
    auth:
      auth_url: "{{ instance.0 }}"
      username: "{{ instance.1 }}"
      password: "{{ instance.2 }}"
      project_name: "{{ instance.3 }}"
    name: "{{ instance.9 }}_{{ instance.10 }}_{{ instance.11 }}"
    image: "{{ instance.5 }}"
    key_name: "{{ instance.6  }}"
    api_timeout: 99999
    flavor: "{{ instance.7 }}"
    nics: "{{ instance.8 }}"
    floating_ip_pools: "{{ instance.12 | default(omit) }}"
  with_nested:
    - ["{{ endpoint }}"]
    - ["{{ username }}"]
    - ["{{ password }}"]
    - ["{{ project }}"]
    - ["{{ state }}"]
    - ["{{ res_def['image'] }}"]
    - ["{{ res_def['keypair']  }}"]
    - ["{{ res_def['flavor']  }}"]
    - ["{{ res_def['networks'] | os_net }}"]
    - ["{{ res_grp_name }}"]
    - ["{{ res_def['res_name'] }}"]
    - "{{ res_count.stdout }}"
    - ["{{ res_def['fip_pool'] | default(omit) }}"]
  loop_control:
    loop_var: instance
  register: res_def_output
  when: async == false

- name: "Append outputitem to topology_outputs"
  set_fact:
    topology_outputs_os_server: "{{ topology_outputs_os_server + res_def_output.results }}"
  when: async == false

- name: "Async:: provision/deprovision os_server resources by looping on count"
  os_server:
    state: "{{ instance.4 }}"
    auth:
      auth_url: "{{ instance.0 }}"
      username: "{{ instance.1 }}"
      password: "{{ instance.2 }}"
      project_name: "{{ instance.3 }}"
    name: "{{ instance.9 }}_{{ instance.10 }}_{{ instance.11 }}"
    image: "{{ instance.5 }}"
    key_name: "{{ instance.6  }}"
    api_timeout: 99999
    flavor: "{{ instance.7 }}"
    nics: "{{ instance.8 }}"
    floating_ip_pools: "{{ instance.12 | default(omit) }}"
  with_nested:
    - ["{{ endpoint }}"]
    - ["{{ username }}"]
    - ["{{ password }}"]
    - ["{{ project }}"]
    - ["{{ state }}"]
    - ["{{ res_def['image'] }}"]
    - ["{{ res_def['keypair']  }}"]
    - ["{{ res_def['flavor']  }}"]
    - ["{{ res_def['networks'] | os_net }}"]
    - ["{{ res_grp_name }}"]
    - ["{{ res_def['res_name'] }}"]
    - "{{ res_count.stdout }}"
    - ["{{ res_def['fip_pool'] | default(omit) }}"]
  loop_control:
    loop_var: instance
  async: "{{ async_timeout }}"
  poll: 0
  register: res_def_output
  when: async == true

# following tasks saves the async job details 
- name: "Async:: save the job id"
  set_fact:
    topology_outputs_os_server: "{{ topology_outputs_os_server + [ res_def_output ] }}"
  when: async == true
