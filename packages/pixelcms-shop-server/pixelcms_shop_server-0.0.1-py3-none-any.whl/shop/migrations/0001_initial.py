# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-29 00:49
from __future__ import unicode_literals

import autoslug.fields
import cms.common.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import filebrowser.fields
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created')),
                ('products_count', models.PositiveSmallIntegerField(default=0, verbose_name='products count')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=18, verbose_name='total')),
                ('converted_to_order', models.BooleanField(default=False, verbose_name='converted to order')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name_plural': 'carts',
                'verbose_name': 'cart',
            },
        ),
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='unit price')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='subtotal')),
                ('quantity', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='quantity')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.Cart')),
            ],
            options={
                'ordering': ('pk',),
                'verbose_name_plural': 'products',
                'verbose_name': 'product',
            },
        ),
        migrations.CreateModel(
            name='CartProductOptionValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='shop.CartProduct')),
            ],
            options={
                'ordering': ('pk',),
                'verbose_name_plural': 'options',
                'verbose_name': 'option',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title_override', models.CharField(blank=True, default='', max_length=255, verbose_name='page title override')),
                ('meta_title_site_name_suffix', models.NullBooleanField(default=None, verbose_name='site name suffix in page title')),
                ('meta_description_override', models.CharField(blank=True, default='', max_length=255, verbose_name='description override')),
                ('meta_robots_override', models.CharField(blank=True, default='', max_length=255, verbose_name='robots override')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=True, populate_from='name', verbose_name='slug')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('published_with_parents', models.BooleanField(default=True, verbose_name='published with parents')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('level', models.PositiveSmallIntegerField(default=0)),
                ('image', filebrowser.fields.FileBrowseField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_subcategories', to='shop.Category')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'verbose_name': 'category',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, default='', max_length=255, verbose_name='address')),
                ('postal_code', models.CharField(blank=True, default='', max_length=255, verbose_name='postal code')),
                ('place', models.CharField(blank=True, default='', max_length=255, verbose_name='place')),
                ('phone', models.CharField(blank=True, default='', max_length=255, verbose_name='phone')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('user',),
                'verbose_name_plural': 'customers',
                'verbose_name': 'customer',
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(choices=[('customer@order_placed', 'Order placement - (to customer)'), ('customer@order_status_changed', 'Order status change (to customer)'), ('admin@order_placed', 'Order placement - (to admin)')], max_length=255, unique=True, verbose_name='event')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('subject', models.CharField(max_length=255, verbose_name='subject')),
                ('content', models.TextField(verbose_name='content')),
            ],
            options={
                'ordering': ('event',),
                'verbose_name_plural': 'email templates',
                'verbose_name': 'email template',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='order id')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created')),
                ('total', models.DecimalField(decimal_places=2, help_text='includes the cost of shipping and payment', max_digits=18, validators=[django.core.validators.MinValueValidator(0)], verbose_name='total')),
                ('status', models.CharField(choices=[('WAITING_FOR_PAYMENT', 'Waiting for payment'), ('WAITING_FOR_SHIPPING', 'Waiting for shipping'), ('COMPLETED', 'Completed')], max_length=255, verbose_name='status')),
                ('additional_comment', models.TextField(blank=True, null=True, verbose_name='additional comment')),
                ('cart', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop.Cart', verbose_name='cart')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name_plural': 'shop orders',
                'verbose_name': 'shop order',
            },
        ),
        migrations.CreateModel(
            name='OrderBillingData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='first and last name / company name')),
                ('vat_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='VAT ID')),
                ('address', models.CharField(max_length=255, verbose_name='address')),
                ('postal_code', models.CharField(max_length=255, verbose_name='postal code')),
                ('place', models.CharField(max_length=255, verbose_name='place')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='phone')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='billing_data', to='shop.Order')),
            ],
            options={
                'verbose_name_plural': 'billing data',
                'verbose_name': '',
            },
        ),
        migrations.CreateModel(
            name='OrderShippingData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='first and last name / company name')),
                ('address', models.CharField(max_length=255, verbose_name='address')),
                ('postal_code', models.CharField(max_length=255, verbose_name='postal code')),
                ('place', models.CharField(max_length=255, verbose_name='place')),
                ('phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='phone')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_data', to='shop.Order')),
            ],
            options={
                'verbose_name_plural': 'shipping data',
                'verbose_name': '',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=18, verbose_name='total')),
                ('success', models.NullBooleanField(default=None, verbose_name='success')),
                ('payment_uri', models.CharField(max_length=255, verbose_name='payment URI')),
                ('valid_until', models.DateTimeField(verbose_name='valid until')),
            ],
            options={
                'ordering': ('-created',),
                'verbose_name_plural': 'payments',
                'verbose_name': 'payment',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('price', models.DecimalField(decimal_places=2, max_digits=18, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price')),
                ('set_waiting_for_payment_status', models.BooleanField(default=True, verbose_name='set "Waiting for payment" status')),
                ('gateway', models.CharField(blank=True, choices=[('shop.payments.payu.models.PayuPayment', 'PayU')], max_length=255, null=True, verbose_name='gateway')),
                ('additional_info', models.TextField(blank=True, help_text='This text will be presented to customer after placing an order.', null=True, verbose_name='additional information')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'payment methods',
                'verbose_name': 'payment method',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_title_override', models.CharField(blank=True, default='', max_length=255, verbose_name='page title override')),
                ('meta_title_site_name_suffix', models.NullBooleanField(default=None, verbose_name='site name suffix in page title')),
                ('meta_description_override', models.CharField(blank=True, default='', max_length=255, verbose_name='description override')),
                ('meta_robots_override', models.CharField(blank=True, default='', max_length=255, verbose_name='robots override')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=True, populate_from='name', verbose_name='slug')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('description', models.TextField(blank=True, default='', verbose_name='description')),
                ('price_gross', models.DecimalField(blank=True, decimal_places=2, max_digits=18, validators=[django.core.validators.MinValueValidator(0)], verbose_name='gross price')),
                ('tax_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=18, verbose_name='tax amount')),
                ('available', models.BooleanField(default=True, verbose_name='available')),
            ],
            options={
                'ordering': ('category', 'order'),
                'verbose_name_plural': 'products',
                'verbose_name': 'product',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('value_type', models.CharField(choices=[('options', 'Options'), ('text', 'Text')], default='options', max_length=255, verbose_name='value type')),
                ('categories', models.ManyToManyField(blank=True, help_text='Attribute will be available only for products in selected categories.', related_name='_product_attributes', to='shop.Category', verbose_name='categories')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'product attributes',
                'verbose_name': 'product attribute',
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='value')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='shop.ProductAttribute', verbose_name='attribute')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'options',
                'verbose_name': 'option',
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='text value')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.ProductAttribute')),
                ('option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.ProductAttributeOption')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='shop.Product')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'attributes',
                'verbose_name': 'attribute',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', filebrowser.fields.FileBrowseField(max_length=255, verbose_name='image')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_images', to='shop.Product')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'images',
                'verbose_name': 'image',
            },
        ),
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('price_mod', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='price modification')),
                ('price_mod_percentage', models.BooleanField(default=False, verbose_name='percentage')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'options',
                'verbose_name': 'option',
            },
        ),
        migrations.CreateModel(
            name='ProductOptionsGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='shop.Product')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'options groups',
                'verbose_name': 'options group',
            },
        ),
        migrations.CreateModel(
            name='ProductsModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('template_id', autoslug.fields.AutoSlugField(blank=True, editable=True, populate_from='name', unique_with=('language',), verbose_name='template id')),
                ('show_module_name', models.BooleanField(default=True, verbose_name='show module name')),
                ('module_name_header_level', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6')], default='2', max_length=1, verbose_name='module name header level')),
                ('html_class', models.CharField(blank=True, default='', max_length=255, verbose_name='HTML class')),
                ('language', cms.common.fields.LanguageField(choices=[('any', '(any)'), ('pl', 'Polish')], default='any', max_length=5, verbose_name='language')),
                ('order_by', models.CharField(choices=[('productsmoduleproduct__order', 'Order'), ('price_gross', 'Price - from lowest'), ('-price_gross', 'Price - from highest'), ('?', 'Random')], default='order', max_length=255, verbose_name='order by')),
                ('number_of_products', models.PositiveSmallIntegerField(default=4, verbose_name='number of products')),
                ('show_names', models.BooleanField(default=True, verbose_name='show names')),
                ('names_headers_level', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6')], default='3', max_length=1, verbose_name='names headers level')),
                ('show_images', models.BooleanField(default=True, verbose_name='show images')),
                ('show_prices', models.BooleanField(default=True, verbose_name='show prices')),
            ],
            options={
                'ordering': ('language', 'name'),
                'abstract': False,
                'verbose_name_plural': 'products modules',
                'verbose_name': 'products module',
            },
        ),
        migrations.CreateModel(
            name='ProductsModuleProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.ProductsModule')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.Product')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'products',
                'verbose_name': 'product',
            },
        ),
        migrations.CreateModel(
            name='ShippingMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('published', models.BooleanField(default=True, verbose_name='published')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='order')),
                ('price', models.DecimalField(decimal_places=2, max_digits=18, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price')),
                ('set_waiting_for_shipping_status', models.BooleanField(default=True, verbose_name='set "Waiting for shipping" status')),
                ('payment_methods', models.ManyToManyField(to='shop.PaymentMethod', verbose_name='payment methods')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'shipping methods',
                'verbose_name': 'shipping method',
            },
        ),
        migrations.CreateModel(
            name='TaxRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='rate [%]')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'tax rules',
                'verbose_name': 'tax rule',
            },
        ),
        migrations.CreateModel(
            name='PayuPayment',
            fields=[
                ('payment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.Payment')),
                ('internal_id', models.CharField(max_length=255, verbose_name='PayU order ID')),
                ('internal_status', models.CharField(choices=[('NEW', 'New'), ('PENDING', 'Pending'), ('WAITING_FOR_CONFIRMATION', 'Waiting for confirmation'), ('COMPLETED', 'Completed'), ('CANCELED', 'Canceled'), ('REJECTED', 'Rejected')], default='NEW', max_length=255, verbose_name='status')),
            ],
            bases=('shop.payment',),
        ),
        migrations.AddField(
            model_name='productsmodule',
            name='_products',
            field=models.ManyToManyField(blank=True, through='shop.ProductsModuleProduct', to='shop.Product'),
        ),
        migrations.AddField(
            model_name='productoption',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='shop.ProductOptionsGroup'),
        ),
        migrations.AddField(
            model_name='product',
            name='_attributes',
            field=models.ManyToManyField(blank=True, through='shop.ProductAttributeValue', to='shop.ProductAttribute', verbose_name='attributes'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_products', to='shop.Category', verbose_name='category'),
        ),
        migrations.AddField(
            model_name='product',
            name='tax_rule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.TaxRule', verbose_name='tax rule'),
        ),
        migrations.AddField(
            model_name='payment',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='shop.Order', verbose_name='shop order'),
        ),
        migrations.AddField(
            model_name='payment',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_shop.payment_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='order',
            name='payment_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='shop.PaymentMethod', verbose_name='payment method'),
        ),
        migrations.AddField(
            model_name='order',
            name='shipping_method',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='shop.ShippingMethod', verbose_name='shipping method'),
        ),
        migrations.AddField(
            model_name='cartproductoptionvalue',
            name='option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.ProductOption'),
        ),
        migrations.AddField(
            model_name='cartproductoptionvalue',
            name='options_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.ProductOptionsGroup'),
        ),
        migrations.AddField(
            model_name='cartproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.Product'),
        ),
        migrations.AddField(
            model_name='cart',
            name='_products',
            field=models.ManyToManyField(through='shop.CartProduct', to='shop.Product', verbose_name='products'),
        ),
        migrations.AddField(
            model_name='cart',
            name='customer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.Customer', verbose_name='customer'),
        ),
        migrations.AlterUniqueTogether(
            name='productoptionsgroup',
            unique_together=set([('product', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='productoption',
            unique_together=set([('group', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together=set([('product', 'attribute')]),
        ),
        migrations.AlterUniqueTogether(
            name='productattributeoption',
            unique_together=set([('attribute', 'value')]),
        ),
        migrations.AlterUniqueTogether(
            name='cartproductoptionvalue',
            unique_together=set([('cart_product', 'options_group')]),
        ),
    ]
