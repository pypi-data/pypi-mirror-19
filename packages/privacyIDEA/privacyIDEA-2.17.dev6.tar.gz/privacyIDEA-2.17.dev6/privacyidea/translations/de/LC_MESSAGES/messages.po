# German translations for PROJECT.
# Copyright (C) 2016 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2016-01-25 15:48+0100\n"
"PO-Revision-Date: 2016-01-25 15:49+0100\n"
"Last-Translator: Cornelius Kölbel <cornelius.koelbel@netknights.it>\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 1.3\n"
"X-Generator: Poedit 1.5.4\n"

#: privacyidea/api/policy.py:164
msgid "The name of the policy may only contain the characters a-zA-Z0-9_."
msgstr ""
"Der Name der Richtlinie draf nur die Zeichen a-zA-Z0-9 und _ enthalten."

#: privacyidea/api/policy.py:168
msgid "T'check' is an invalid policy name."
msgstr ""

#: privacyidea/lib/decorators.py:43
msgid "This action is not possible, since the token is locked"
msgstr ""

#: privacyidea/lib/decorators.py:88
msgid "You need to specify a serial or a user."
msgstr ""

#: privacyidea/lib/error.py:151
msgid "You either need to provide user or serial"
msgstr ""

#: privacyidea/lib/policy.py:691
msgid "Define in which resolver the user should be registered."
msgstr ""

#: privacyidea/lib/policy.py:695
msgid "Define in which realm the user should be registered."
msgstr ""

#: privacyidea/lib/policy.py:699
msgid ""
"The SMTP server configuration, that should be used to send the registration "
"email."
msgstr ""

#: privacyidea/lib/policy.py:703
msgid ""
"Only users with this email address are allowed to register. This is a "
"regular expression."
msgstr ""

#: privacyidea/lib/policy.py:710
msgid "Admin is allowed to enable tokens."
msgstr ""

#: privacyidea/lib/policy.py:712
msgid "Admin is allowed to disable tokens."
msgstr ""

#: privacyidea/lib/policy.py:714
msgid "Admin is allowed to set token properties."
msgstr ""

#: privacyidea/lib/policy.py:717
msgid "Admin is allowed to set the OTP PIN of tokens."
msgstr ""

#: privacyidea/lib/policy.py:721
msgid "Admin is allowed to resync tokens."
msgstr ""

#: privacyidea/lib/policy.py:723
msgid "Admin is allowed to reset the Failcounter of a token."
msgstr ""

#: privacyidea/lib/policy.py:727
msgid "Admin is allowed to revoke a token"
msgstr ""

#: privacyidea/lib/policy.py:729
msgid "Admin is allowed to assign a token to a user."
msgstr ""

#: privacyidea/lib/policy.py:733
msgid ""
"Admin is allowed to remove the token from a user, i.e. unassign a token."
msgstr ""

#: privacyidea/lib/policy.py:738
msgid "Admin is allowed to import token files."
msgstr ""

#: privacyidea/lib/policy.py:741
msgid "Admin is allowed to remove tokens from the database."
msgstr ""

#: privacyidea/lib/policy.py:745
msgid "Admin is allowed to view the list of the users."
msgstr ""

#: privacyidea/lib/policy.py:749
msgid "The Admin is allowed to list the machines."
msgstr ""

#: privacyidea/lib/policy.py:752
msgid "The Admin is allowed to attach and detach tokens to machines."
msgstr ""

#: privacyidea/lib/policy.py:755
msgid ""
"The Admin is allowed to fetch authentication items of tokens assigned to "
"machines."
msgstr ""

#: privacyidea/lib/policy.py:763
msgid "Admin is allowed to manage the realms of a token."
msgstr ""

#: privacyidea/lib/policy.py:766
msgid "Admin is allowed to retrieve a serial for a given OTP value."
msgstr ""

#: privacyidea/lib/policy.py:770
msgid "Admin is allowed to retrieve random keys from privacyIDEA."
msgstr ""

#: privacyidea/lib/policy.py:777
msgid "Admin is allowed to copy the PIN of one token to another token."
msgstr ""
"Der Administrator kann die PIN eines Tokens zu einem anderen Token kopieren."

#: privacyidea/lib/policy.py:783
msgid ""
"Admin is allowed to copy the assigned user to another token, i.e. assign a "
"user ot another token."
msgstr ""

#: privacyidea/lib/policy.py:790
msgid "Admin is allowed to trigger the lost token workflow."
msgstr ""

#: privacyidea/lib/policy.py:799
msgid "Admin is allowed to write and modify the system configuration."
msgstr ""

#: privacyidea/lib/policy.py:803
msgid "Admin is allowed to delete keys in the system configuration."
msgstr ""

#: privacyidea/lib/policy.py:808
msgid ""
"Admin is allowed to export a documentation of the complete configuration "
"including resolvers and realm."
msgstr ""

#: privacyidea/lib/policy.py:815
msgid "Admin is allowed to write and modify the policies."
msgstr ""

#: privacyidea/lib/policy.py:819
msgid "Admin is allowed to delete policies."
msgstr "Der Administrator darf Richtlinien löschen."

#: privacyidea/lib/policy.py:823
msgid ""
"Admin is allowed to write and modify the resolver and realm configuration."
msgstr ""

#: privacyidea/lib/policy.py:829
msgid "Admin is allowed to delete resolvers and realms."
msgstr ""

#: privacyidea/lib/policy.py:833
msgid ""
"Admin is allowed to create new CA Connector definitions and modify existing "
"ones."
msgstr ""

#: privacyidea/lib/policy.py:838
msgid "Admin is allowed to delete CA Connector definitions."
msgstr ""

#: privacyidea/lib/policy.py:842
msgid "Admin is allowed to write and modify the machine resolvers."
msgstr ""

#: privacyidea/lib/policy.py:847
msgid "Admin is allowed to delete machine resolvers."
msgstr ""

#: privacyidea/lib/policy.py:852
msgid "Admin is allowed to view the Audit log."
msgstr ""

#: privacyidea/lib/policy.py:855
msgid "Admin is allowed to add users in a userstore/UserIdResolver."
msgstr ""

#: privacyidea/lib/policy.py:859
msgid "Admin is allowed to update the users data in a userstore."
msgstr ""

#: privacyidea/lib/policy.py:863
msgid "Admin is allowed to delete a user object in a userstore."
msgstr ""

#: privacyidea/lib/policy.py:866
msgid "Admin is allowed to set the password of the HSM/Security Module."
msgstr ""

#: privacyidea/lib/policy.py:869
msgid "Admin is allowed to retrieve the list of active challenges."
msgstr ""

#: privacyidea/lib/policy.py:872
msgid "Admin is allowed to write new SMTP server definitions."
msgstr ""

#: privacyidea/lib/policy.py:896
msgid ""
"The user is allowed to assign an existing token that is not yet assigned "
"using the token serial number."
msgstr ""

#: privacyidea/lib/policy.py:900
msgid "The user is allowed to disable his own tokens."
msgstr ""

#: privacyidea/lib/policy.py:904
msgid "The user is allowed to enable his own tokens."
msgstr ""

#: privacyidea/lib/policy.py:908
msgid "The user is allowed to delete his own tokens."
msgstr ""

#: privacyidea/lib/policy.py:912
msgid "The user is allowed to unassign his own tokens."
msgstr ""

#: privacyidea/lib/policy.py:915
msgid "The user is allowed to resyncronize his tokens."
msgstr ""

#: privacyidea/lib/policy.py:918
msgid "The user is allowed to revoke a token"
msgstr ""

#: privacyidea/lib/policy.py:920
msgid "The user is allowed to reset the failcounter of his tokens."
msgstr ""

#: privacyidea/lib/policy.py:923
msgid "The user is allowed to set the OTP PIN of his tokens."
msgstr "Der Benutzer darf die OTP PIN seines Tokens setzen."

#: privacyidea/lib/policy.py:928
msgid "Set the maximum allowed length of the OTP PIN."
msgstr ""

#: privacyidea/lib/policy.py:932
msgid "Set the minimum required length of the OTP PIN."
msgstr ""

#: privacyidea/lib/policy.py:935
msgid ""
"Specifiy the required contents of the OTP PIN. (c)haracters, (n)umeric, "
"(s)pecial, (o)thers. [+/-]!"
msgstr ""

#: privacyidea/lib/policy.py:959
msgid "Allow the user to view his own token history."
msgstr ""

#: privacyidea/lib/policy.py:961
msgid ""
"The user is allowed to update his own user information, like changing his "
"password."
msgstr ""

#: privacyidea/lib/policy.py:965
msgid ""
"The user is allowed to do a password reset in an editable UserIdResolver."
msgstr ""

#: privacyidea/lib/policy.py:976
msgid "Limit the number of allowed tokens in a realm."
msgstr ""

#: privacyidea/lib/policy.py:979
msgid "Limit the number of tokens a user may have assigned."
msgstr ""

#: privacyidea/lib/policy.py:984
msgid "Set a random OTP PIN with this length for a token."
msgstr ""

#: privacyidea/lib/policy.py:988
msgid "In case of a random OTP PIN use this python module to process the PIN."
msgstr ""

#: privacyidea/lib/policy.py:992
msgid ""
"The OTP PIN can be hashed or encrypted. Hashing the PIN is the default "
"behaviour."
msgstr ""

#: privacyidea/lib/policy.py:996
msgid ""
"Set label for a new enrolled Google Authenticator. Possible tags are <u> "
"(user), <r> (realm), <s> (serial)."
msgstr ""

#: privacyidea/lib/policy.py:1001
msgid "This is the issuer label for new enrolled Google Authenticators."
msgstr ""

#: privacyidea/lib/policy.py:1007
msgid ""
"Users can assign a token just by using the unassigned token to authenticate."
msgstr ""

#: privacyidea/lib/policy.py:1012
msgid "The length of the password in case of temporary token (lost token)."
msgstr ""

#: privacyidea/lib/policy.py:1016
msgid ""
"The contents of the temporary password, described by the characters C, c, n, "
"s."
msgstr ""

#: privacyidea/lib/policy.py:1021
msgid "The length of the validity for the temporary token (in days)."
msgstr ""

#: privacyidea/lib/policy.py:1029
msgid ""
"Either use the Token PIN , use the Userstore Password or use no fixed "
"password component."
msgstr ""

#: privacyidea/lib/policy.py:1034
msgid ""
"This is a whitespace separated list of tokentypes, that can be used with "
"challenge response."
msgstr ""

#: privacyidea/lib/policy.py:1039
msgid ""
"If set, the user in this realm will be authenticated against the "
"UserIdResolver, if the user has no tokens assigned."
msgstr ""

#: privacyidea/lib/policy.py:1045
msgid ""
"If the user has no token, the authentication request for this user will "
"always be true."
msgstr ""

#: privacyidea/lib/policy.py:1050
msgid ""
"If the user user does not exist, the authentication request for this non-"
"existing user will always be true."
msgstr ""

#: privacyidea/lib/policy.py:1056
msgid ""
"Can be used to modify the parameters pass, user and realm in an "
"authentication request. See the documentation for an example."
msgstr ""

#: privacyidea/lib/policy.py:1075
msgid ""
"You can specify how many successful authentication requests a user is "
"allowed to do in a given time. Specify like 1/5s, 2/10m, 10/1h - s, m, h "
"being second, minute and hour."
msgstr ""

#: privacyidea/lib/policy.py:1082
msgid ""
"You can specify how many failed authentication requests a user is allowed to "
"do in a given time. Specify like 1/5s, 2/10m, 10/1h - s, m, h being second, "
"minute and hour."
msgstr ""

#: privacyidea/lib/policy.py:1089
msgid ""
"You can specify in which time frame the user needs to authenticate again "
"with this token. If the user authenticates later, authentication will fail. "
"Specify like 30h, 7d or 1y."
msgstr ""

#: privacyidea/lib/policy.py:1096
msgid "The user will only be authenticated with this very tokentype."
msgstr ""

#: privacyidea/lib/policy.py:1100
msgid ""
"The user will only be authenticated if the serial number of the token "
"matches this regexp."
msgstr ""

#: privacyidea/lib/policy.py:1105
msgid ""
"The Realm of the user is set to this very realm. This is important if the "
"user is not contained in the default realm and can not pass his realm."
msgstr ""

#: privacyidea/lib/policy.py:1110
msgid ""
"In case of successful authentication additional no detail information will "
"be returned."
msgstr ""

#: privacyidea/lib/policy.py:1114
msgid ""
"In case of failed authentication additional no detail information will be "
"returned."
msgstr ""

#: privacyidea/lib/policy.py:1118
msgid ""
"The sending of an API Auth Key is required duringauthentication. This avoids "
"rogue authenticate requests against the /validate/check interface."
msgstr ""

#: privacyidea/lib/policy.py:1127
msgid ""
"If set to \"privacyIDEA\" the users and admins need to authenticate against "
"privacyIDEA when they log in to the Web UI. Defaults to \"userstore\""
msgstr ""

#: privacyidea/lib/policy.py:1137
msgid ""
"The REMOTE_USER set by the webserver can be used to login to privacyIDEA or "
"it will be ignored. Defaults to \"disable\"."
msgstr ""

#: privacyidea/lib/policy.py:1143
msgid ""
"Set the time in seconds after which the user will be logged out from the "
"WebUI. Default: 120"
msgstr ""

#: privacyidea/lib/policy.py:1148
msgid "Set how many tokens should be displayed in the token view on one page."
msgstr ""

#: privacyidea/lib/policy.py:1153
msgid "Set how many users should be displayed in the user view on one page."
msgstr ""

#: privacyidea/lib/policy.py:1158
msgid ""
"Whether the user ID and the resolver should be displayed in the token list."
msgstr ""

#: privacyidea/lib/policy.py:1163
msgid ""
"The URL of a repository, where the policy templates can be found.  (Default "
"https://raw.githubusercontent.com/privacyidea/policy-templates/master/"
"templates/)"
msgstr ""

#: privacyidea/lib/policy.py:1170
msgid "This is the default token type in the token enrollment dialog."
msgstr ""

#: privacyidea/lib/token.py:2020
#, python-format
msgid "Admin is allowed to initialize %s tokens."
msgstr "Der Administrator darf %s Token initialisieren."

#: privacyidea/lib/token.py:2027
#, python-format
msgid "The user is allowed to enroll a %s token."
msgstr "Der Benutzer darf einen %s Token ausrollen."

#: privacyidea/lib/machines/ldap.py:294
#, python-format
msgid "Your LDAP config seems to be OK, %i machine objects found."
msgstr ""

#: privacyidea/lib/resolvers/LDAPIdResolver.py:554
#, python-format
msgid ""
"Your LDAP config found %i user objects, but only %i with the specified "
"uidtype"
msgstr ""

#: privacyidea/lib/resolvers/LDAPIdResolver.py:556
#, python-format
msgid "Your LDAP config seems to be OK, %i user objects found."
msgstr ""

#: privacyidea/lib/tokens/emailtoken.py:133
msgid "EMail Token"
msgstr ""

#: privacyidea/lib/tokens/emailtoken.py:135
msgid "EMail: Send a One Time Password to the users email address."
msgstr ""

#: privacyidea/lib/tokens/emailtoken.py:143
msgid ""
"The text that will be send via EMail for an EMail token. Use <otp> and "
"<serial> as parameters."
msgstr ""

#: privacyidea/lib/tokens/emailtoken.py:148
msgid ""
"The subject of the EMail for an EMail token. Use <otp> and <serial> as "
"parameters."
msgstr ""

#: privacyidea/lib/tokens/emailtoken.py:153
msgid ""
"If set, a new EMail OTP will be sent after successful authentication with "
"one EMail OTP."
msgstr ""

#: privacyidea/lib/tokens/hotptoken.py:102
msgid "Specify the hashlib to be used. Can be sha1 (1) or sha2-256 (2)."
msgstr ""

#: privacyidea/lib/tokens/hotptoken.py:104
msgid "Specify the otplen to be used. Can be 6 or 8 digits."
msgstr ""

#: privacyidea/lib/tokens/hotptoken.py:107
msgid "HOTP: Event based One Time Passwords."
msgstr ""

#: privacyidea/lib/tokens/hotptoken.py:121
#: privacyidea/lib/tokens/totptoken.py:127
msgid "Force the key to be generated on the server."
msgstr ""

#: privacyidea/lib/tokens/hotptoken.py:177
msgid "URL for google Authenticator"
msgstr ""

#: privacyidea/lib/tokens/hotptoken.py:190
msgid "URL for OATH token"
msgstr ""

#: privacyidea/lib/tokens/motptoken.py:141
msgid "URL for MOTP token"
msgstr ""

#: privacyidea/lib/tokens/questionnairetoken.py:90
msgid "Questionnaire: Enroll Questions for the user."
msgstr ""

#: privacyidea/lib/tokens/questionnairetoken.py:137
#, python-format
msgid "You need to provide at least %s answers."
msgstr ""

#: privacyidea/lib/tokens/smstoken.py:183
msgid "SMS Token"
msgstr ""

#: privacyidea/lib/tokens/smstoken.py:185
msgid "SMS: Send a One Time Password to the users mobile phone."
msgstr ""

#: privacyidea/lib/tokens/smstoken.py:194
msgid ""
"The text that will be send via SMS for an SMS token. Use <otp> and <serial> "
"as parameters."
msgstr ""

#: privacyidea/lib/tokens/smstoken.py:199
msgid ""
"If set, a new SMS OTP will be sent after successful authentication with one "
"SMS OTP."
msgstr ""

#: privacyidea/lib/tokens/sshkeytoken.py:84
msgid "SSH Public Key: The public SSH key."
msgstr ""

#: privacyidea/lib/tokens/tiqrtoken.py:216
msgid "URL for TiQR enrollment"
msgstr ""

#: privacyidea/lib/tokens/totptoken.py:107
msgid "TOTP: Time based One Time Passwords."
msgstr ""

#: privacyidea/lib/tokens/u2ftoken.py:237
msgid "This is a list of FQDN hostnames trusting the registered U2F tokens."
msgstr ""

#: privacyidea/lib/tokens/u2ftoken.py:301
msgid "You need to define the appId in the token config!"
msgstr ""
