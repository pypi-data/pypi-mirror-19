# -*- generated by 1.0.6 -*-
import da
PatternExpr_231 = da.pat.TuplePattern([da.pat.ConstantPattern('request'), da.pat.FreePattern('p')])
PatternExpr_252 = da.pat.TuplePattern([da.pat.ConstantPattern('propose'), da.pat.FreePattern('s'), da.pat.BoundPattern('_BoundPattern257_')])
PatternExpr_275 = da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.BoundPattern('_BoundPattern278_'), da.pat.FreePattern('p2')])
PatternExpr_312 = da.pat.TuplePattern([da.pat.ConstantPattern('propose'), da.pat.FreePattern('s'), da.pat.FreePattern(None)])
PatternExpr_335 = da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.FreePattern('s'), da.pat.FreePattern(None)])
PatternExpr_382 = da.pat.TuplePattern([da.pat.ConstantPattern('propose'), da.pat.BoundPattern('_BoundPattern385_'), da.pat.FreePattern(None)])
PatternExpr_405 = da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.BoundPattern('_BoundPattern408_'), da.pat.FreePattern(None)])
PatternExpr_443 = da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.BoundPattern('_BoundPattern446_'), da.pat.FreePattern('p')])
PatternExpr_474 = da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.FreePattern('s'), da.pat.BoundPattern('_BoundPattern478_')])
PatternExpr_539 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_544 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_600 = da.pat.TuplePattern([da.pat.ConstantPattern('1b'), da.pat.BoundPattern('_BoundPattern603_'), da.pat.FreePattern(None)])
PatternExpr_607 = da.pat.FreePattern('a')
PatternExpr_643 = da.pat.TuplePattern([da.pat.ConstantPattern('1b'), da.pat.BoundPattern('_BoundPattern646_'), da.pat.FreePattern('accepted')])
PatternExpr_683 = da.pat.TuplePattern([da.pat.ConstantPattern('propose'), da.pat.FreePattern('s'), da.pat.FreePattern('p')])
PatternExpr_706 = da.pat.TuplePattern([da.pat.ConstantPattern('2a'), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern710_'), da.pat.FreePattern(None)])
PatternExpr_743 = da.pat.TuplePattern([da.pat.ConstantPattern('2b'), da.pat.BoundPattern('_BoundPattern746_'), da.pat.FreePattern('s'), da.pat.FreePattern('p')])
PatternExpr_770 = da.pat.TuplePattern([da.pat.ConstantPattern('2b'), da.pat.BoundPattern('_BoundPattern773_'), da.pat.BoundPattern('_BoundPattern774_'), da.pat.BoundPattern('_BoundPattern775_')])
PatternExpr_778 = da.pat.FreePattern('a')
PatternExpr_803 = da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.BoundPattern('_BoundPattern806_'), da.pat.BoundPattern('_BoundPattern807_')])
PatternExpr_836 = da.pat.TuplePattern([da.pat.ConstantPattern('1b'), da.pat.FreePattern('b'), da.pat.FreePattern(None)])
PatternExpr_862 = da.pat.TuplePattern([da.pat.ConstantPattern('2b'), da.pat.FreePattern('b'), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_894 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_914 = da.pat.TuplePattern([da.pat.ConstantPattern('1b'), da.pat.FreePattern('b'), da.pat.FreePattern(None)])
PatternExpr_939 = da.pat.TuplePattern([da.pat.ConstantPattern('2b'), da.pat.FreePattern('b'), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_970 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_810 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('decision'), da.pat.BoundPattern('_BoundPattern820_'), da.pat.BoundPattern('_BoundPattern821_')])])
PatternExpr_899 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_975 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_1044 = da.pat.TuplePattern([da.pat.ConstantPattern('1a'), da.pat.FreePattern(None)])
PatternExpr_1050 = da.pat.FreePattern('leader')
PatternExpr_1059 = da.pat.TuplePattern([da.pat.ConstantPattern('1a'), da.pat.FreePattern('b')])
PatternExpr_1081 = da.pat.TuplePattern([da.pat.ConstantPattern('2a'), da.pat.FreePattern('b'), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_1126 = da.pat.TuplePattern([da.pat.ConstantPattern('2a'), da.pat.FreePattern('b'), da.pat.FreePattern('s'), da.pat.FreePattern('p')])
PatternExpr_1168 = da.pat.TuplePattern([da.pat.ConstantPattern('2a'), da.pat.FreePattern('b'), da.pat.FreePattern('s'), da.pat.FreePattern('p')])
PatternExpr_1179 = da.pat.FreePattern('leader')
PatternExpr_1188 = da.pat.TuplePattern([da.pat.ConstantPattern('1a'), da.pat.FreePattern('b')])
PatternExpr_1209 = da.pat.TuplePattern([da.pat.ConstantPattern('2a'), da.pat.FreePattern('b'), da.pat.FreePattern(None), da.pat.FreePattern(None)])
PatternExpr_1283 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_1288 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_1393 = da.pat.TuplePattern([da.pat.ConstantPattern('response'), da.pat.FreePattern('cid'), da.pat.FreePattern('result')])
PatternExpr_1597 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_1602 = da.pat.BoundPattern('_BoundPattern1603_')
PatternExpr_1604 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern1610_')]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
_config_object = {}
import sys
import time
import random
NOPS = 10

def operation(i):
    return (lambda state: ((state + [i]), ['result', i, 'on', state]))
operations = {i: operation(i) for i in range(NOPS)}

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaSentEvent_1 = []
        self._ReplicaReceivedEvent_2 = []
        self._ReplicaSentEvent_3 = []
        self._ReplicaReceivedEvent_4 = []
        self._ReplicaSentEvent_5 = []
        self._ReplicaReceivedEvent_6 = []
        self._ReplicaReceivedEvent_7 = []
        self._ReplicaReceivedEvent_8 = []
        self._ReplicaReceivedEvent_9 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_231, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_ReplicaSentEvent_1', PatternExpr_252, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_275, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_ReplicaSentEvent_3', PatternExpr_312, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_335, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_ReplicaSentEvent_5', PatternExpr_382, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_405, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_443, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_8', PatternExpr_474, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_9', PatternExpr_539, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, leaders, initial_state, **rest_1625):
        super().setup(leaders=leaders, initial_state=initial_state, **rest_1625)
        self._state.leaders = leaders
        self._state.initial_state = initial_state
        self._state.state = self._state.initial_state
        self._state.slot_num = 1

    def run(self):
        self.serve()

    def serve(self):
        while True:
            self.debug('### replica')
            super()._label('_st_label_228', block=False)
            p = s = p2 = None

            def ExistentialOpExpr_229():
                nonlocal p, s, p2
                for (_, _, (_ConstantPattern246_, p)) in self._ReplicaReceivedEvent_0:
                    if (_ConstantPattern246_ == 'request'):

                        def UniversalOpExpr_250(p):
                            nonlocal s, p2
                            for (_, _, (_ConstantPattern268_, s, _BoundPattern271_)) in self._ReplicaSentEvent_1:
                                if (_ConstantPattern268_ == 'propose'):
                                    if (_BoundPattern271_ == p):

                                        def ExistentialOpExpr_273(p, s):
                                            nonlocal p2
                                            for (_, _, (_ConstantPattern291_, _BoundPattern293_, p2)) in self._ReplicaReceivedEvent_2:
                                                if (_ConstantPattern291_ == 'decision'):
                                                    if (_BoundPattern293_ == s):
                                                        if (not (p2 == p)):
                                                            return True
                                            return False
                                        if (not ExistentialOpExpr_273(p=p, s=s)):
                                            return False
                            return True
                        if UniversalOpExpr_250(p=p):
                            return True
                return False
            p = None

            def ExistentialOpExpr_441():
                nonlocal p
                for (_, _, (_ConstantPattern458_, _BoundPattern460_, p)) in self._ReplicaReceivedEvent_7:
                    if (_ConstantPattern458_ == 'decision'):
                        if (_BoundPattern460_ == self._state.slot_num):
                            if True:
                                return True
                return False
            _st_label_228 = 0
            while (_st_label_228 == 0):
                _st_label_228 += 1
                if ExistentialOpExpr_229():
                    self.debug('### replica 1', 'p', p)
                    used_s = max((({s for (_, _, (_ConstantPattern327_, s, _)) in self._ReplicaSentEvent_3 if (_ConstantPattern327_ == 'propose')} | {s for (_, _, (_ConstantPattern350_, s, _)) in self._ReplicaReceivedEvent_4 if (_ConstantPattern350_ == 'decision')}) or {0}))
                    self.debug('used_s', used_s)

                    def ExistentialOpExpr_380(s):
                        for (_, _, (_ConstantPattern397_, _BoundPattern399_, _)) in self._ReplicaSentEvent_5:
                            if (_ConstantPattern397_ == 'propose'):
                                if (_BoundPattern399_ == s):
                                    if True:
                                        return True
                        return False

                    def ExistentialOpExpr_403(s):
                        for (_, _, (_ConstantPattern420_, _BoundPattern422_, _)) in self._ReplicaReceivedEvent_6:
                            if (_ConstantPattern420_ == 'decision'):
                                if (_BoundPattern422_ == s):
                                    if True:
                                        return True
                        return False
                    s = min({s for s in range(1, ((used_s + 1) + 1)) if (not (ExistentialOpExpr_380(s=s) or ExistentialOpExpr_403(s=s)))})
                    self.debug('s', s, 'p', p)
                    self.send(('propose', s, p), to=self._state.leaders)
                    _st_label_228 += 1
                elif ExistentialOpExpr_441():
                    self.debug('### replica 2', 'p', p)
                    s = None

                    def ExistentialOpExpr_472():
                        nonlocal s
                        for (_, _, (_ConstantPattern489_, s, _BoundPattern492_)) in self._ReplicaReceivedEvent_8:
                            if (_ConstantPattern489_ == 'decision'):
                                if (_BoundPattern492_ == p):
                                    if (s < self._state.slot_num):
                                        return True
                        return False
                    if (not ExistentialOpExpr_472()):
                        (client, cmd_id, op) = p
                        (self._state.state, result) = operations[op](self._state.state)
                        self.debug('### replica 2.1', 'state', self._state.state, 'result', result)
                        self.send(('response', cmd_id, result), to=client)
                    self._state.slot_num += 1
                    self.debug('slot_num', self._state.slot_num)
                    _st_label_228 += 1
                elif PatternExpr_544.match_iter(self._ReplicaReceivedEvent_9, SELF_ID=self._id):
                    self.output('terminating')
                    break
                    _st_label_228 += 1
                else:
                    super()._label('_st_label_228', block=True)
                    _st_label_228 -= 1
            else:
                if (_st_label_228 != 2):
                    continue
            if (_st_label_228 != 2):
                break

class Leader(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._LeaderReceivedEvent_0 = []
        self._LeaderReceivedEvent_1 = []
        self._LeaderReceivedEvent_2 = []
        self._LeaderSentEvent_3 = []
        self._LeaderReceivedEvent_4 = []
        self._LeaderReceivedEvent_5 = []
        self._LeaderSentEvent_6 = []
        self._LeaderReceivedEvent_7 = []
        self._LeaderReceivedEvent_8 = []
        self._LeaderReceivedEvent_9 = []
        self._LeaderReceivedEvent_10 = []
        self._LeaderReceivedEvent_11 = []
        self._LeaderReceivedEvent_12 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_0', PatternExpr_600, sources=[PatternExpr_607], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_1', PatternExpr_643, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_2', PatternExpr_683, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_LeaderSentEvent_3', PatternExpr_706, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_4', PatternExpr_743, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_5', PatternExpr_770, sources=[PatternExpr_778], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_LeaderSentEvent_6', PatternExpr_803, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_7', PatternExpr_836, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_8', PatternExpr_862, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_9', PatternExpr_894, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_10', PatternExpr_914, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_11', PatternExpr_939, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LeaderReceivedEvent_12', PatternExpr_970, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, replicas, **rest_1625):
        super().setup(acceptors=acceptors, replicas=replicas, **rest_1625)
        self._state.acceptors = acceptors
        self._state.replicas = replicas
        self._state.ballot = (0, self._id)

    def run(self):
        self.lead()

    def lead(self):
        while True:
            self.debug('### leader')
            self.send(('1a', self._state.ballot), to=self._state.acceptors)
            super()._label('_st_label_595', block=False)
            b = None

            def ExistentialOpExpr_912():
                nonlocal b
                for (_, _, (_ConstantPattern929_, b, _)) in self._LeaderReceivedEvent_10:
                    if (_ConstantPattern929_ == '1b'):
                        if (b > self._state.ballot):
                            return True
                return False
            b = None

            def ExistentialOpExpr_937():
                nonlocal b
                for (_, _, (_ConstantPattern955_, b, _, _)) in self._LeaderReceivedEvent_11:
                    if (_ConstantPattern955_ == '2b'):
                        if (b > self._state.ballot):
                            return True
                return False
            _st_label_595 = 0
            while (_st_label_595 == 0):
                _st_label_595 += 1
                if (len({a for (_, (_, _, a), (_ConstantPattern618_, _BoundPattern620_, _)) in self._LeaderReceivedEvent_0 if (_ConstantPattern618_ == '1b') if (_BoundPattern620_ == self._state.ballot)}) > (len(self._state.acceptors) / 2)):
                    self.debug('### leader 1')
                    for (s, p) in self.pmax({t for (_, _, (_ConstantPattern659_, _BoundPattern661_, accepted)) in self._LeaderReceivedEvent_1 if (_ConstantPattern659_ == '1b') if (_BoundPattern661_ == self._state.ballot) for t in accepted}):
                        self.send(('2a', self._state.ballot, s, p), to=self._state.acceptors)
                    while True:
                        super()._label('_st_label_680', block=False)
                        p = s = None

                        def ExistentialOpExpr_681():
                            nonlocal p, s
                            for (_, _, (_ConstantPattern698_, s, p)) in self._LeaderReceivedEvent_2:
                                if (_ConstantPattern698_ == 'propose'):

                                    def ExistentialOpExpr_704(s):
                                        for (_, _, (_ConstantPattern722_, _, _BoundPattern725_, _)) in self._LeaderSentEvent_3:
                                            if (_ConstantPattern722_ == '2a'):
                                                if (_BoundPattern725_ == s):
                                                    if True:
                                                        return True
                                        return False
                                    if (not ExistentialOpExpr_704(s=s)):
                                        return True
                            return False
                        s = p = a = None

                        def ExistentialOpExpr_741():
                            nonlocal s, p, a
                            for (_, _, (_ConstantPattern759_, _BoundPattern761_, s, p)) in self._LeaderReceivedEvent_4:
                                if (_ConstantPattern759_ == '2b'):
                                    if (_BoundPattern761_ == self._state.ballot):
                                        if ((len({a for (_, (_, _, a), (_ConstantPattern789_, _BoundPattern791_, _BoundPattern792_, _BoundPattern793_)) in self._LeaderReceivedEvent_5 if (_ConstantPattern789_ == '2b') if (_BoundPattern791_ == self._state.ballot) if (_BoundPattern792_ == s) if (_BoundPattern793_ == p)}) > (len(self._state.acceptors) / 2)) and (not PatternExpr_810.match_iter(self._LeaderSentEvent_6, _BoundPattern820_=s, _BoundPattern821_=p, SELF_ID=self._id))):
                                            return True
                            return False
                        b = None

                        def ExistentialOpExpr_834():
                            nonlocal b
                            for (_, _, (_ConstantPattern852_, b, _)) in self._LeaderReceivedEvent_7:
                                if (_ConstantPattern852_ == '1b'):
                                    if (b > self._state.ballot):
                                        return True
                            return False
                        b = None

                        def ExistentialOpExpr_860():
                            nonlocal b
                            for (_, _, (_ConstantPattern878_, b, _, _)) in self._LeaderReceivedEvent_8:
                                if (_ConstantPattern878_ == '2b'):
                                    if (b > self._state.ballot):
                                        return True
                            return False
                        _st_label_680 = 0
                        while (_st_label_680 == 0):
                            _st_label_680 += 1
                            if ExistentialOpExpr_681():
                                self.debug('### leader 1.1')
                                self.send(('2a', self._state.ballot, s, p), to=self._state.acceptors)
                                _st_label_680 += 1
                            elif ExistentialOpExpr_741():
                                self.debug('### leader 1.2')
                                self.send(('decision', s, p), to=self._state.replicas)
                                _st_label_680 += 1
                            elif (ExistentialOpExpr_834() or ExistentialOpExpr_860()):
                                self.debug('### leader 1.3')
                                break
                                _st_label_680 += 1
                            elif PatternExpr_899.match_iter(self._LeaderReceivedEvent_9, SELF_ID=self._id):
                                break
                                _st_label_680 += 1
                            else:
                                super()._label('_st_label_680', block=True)
                                _st_label_680 -= 1
                        else:
                            if (_st_label_680 != 2):
                                continue
                        if (_st_label_680 != 2):
                            break
                    _st_label_595 += 1
                elif (ExistentialOpExpr_912() or ExistentialOpExpr_937()):
                    self.output('### leader 2')
                    pass
                    _st_label_595 += 1
                elif PatternExpr_975.match_iter(self._LeaderReceivedEvent_12, SELF_ID=self._id):
                    self.output('terminating')
                    break
                    _st_label_595 += 1
                else:
                    super()._label('_st_label_595', block=True)
                    _st_label_595 -= 1
            else:
                if (_st_label_595 != 2):
                    continue
            if (_st_label_595 != 2):
                break
            self._state.ballot = ((self._state.ballot[0] + 1), self._id)

    def pmax(self, pvals):

        def UniversalOpExpr_1013(s, b):
            for (b2, _BoundPattern1018_, _) in pvals:
                if (_BoundPattern1018_ == s):
                    if (not (b2 <= b)):
                        return False
            return True
        return {(s, p) for (b, s, p) in pvals if UniversalOpExpr_1013(s=s, b=b)}

class Acceptor(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._AcceptorReceivedEvent_1 = []
        self._AcceptorReceivedEvent_2 = []
        self._AcceptorReceivedEvent_3 = []
        self._AcceptorReceivedEvent_5 = []
        self._AcceptorReceivedEvent_6 = []
        self._AcceptorReceivedEvent_7 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_0', PatternExpr_1044, sources=[PatternExpr_1050], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_1043]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_1', PatternExpr_1059, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_2', PatternExpr_1081, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_3', PatternExpr_1126, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_4', PatternExpr_1168, sources=[PatternExpr_1179], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_1167]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_5', PatternExpr_1188, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_6', PatternExpr_1209, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_7', PatternExpr_1283, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, **rest_1625):
        super().setup(**rest_1625)
        pass

    def run(self):
        super()._label('_st_label_1280', block=False)
        _st_label_1280 = 0
        while (_st_label_1280 == 0):
            _st_label_1280 += 1
            if PatternExpr_1288.match_iter(self._AcceptorReceivedEvent_7, SELF_ID=self._id):
                _st_label_1280 += 1
            else:
                super()._label('_st_label_1280', block=True)
                _st_label_1280 -= 1
        self.output('terminating')

    def pmax(self, pvals):

        def UniversalOpExpr_1263(s, b):
            for (b2, _BoundPattern1268_, _) in pvals:
                if (_BoundPattern1268_ == s):
                    if (not (b2 <= b)):
                        return False
            return True
        return {(s, p) for (b, s, p) in pvals if UniversalOpExpr_1263(s=s, b=b)}

    def _Acceptor_handler_1043(self, leader):
        ballot = max((({b for (_, _, (_ConstantPattern1074_, b)) in self._AcceptorReceivedEvent_1 if (_ConstantPattern1074_ == '1a')} | {b for (_, _, (_ConstantPattern1098_, b, _, _)) in self._AcceptorReceivedEvent_2 if (_ConstantPattern1098_ == '2a')}) or {((- 1), (- 1))}))
        accepted = {(ballot, s, p) for (s, p) in self.pmax({(b, s, p) for (_, _, (_ConstantPattern1143_, b, s, p)) in self._AcceptorReceivedEvent_3 if (_ConstantPattern1143_ == '2a')})}
        self.send(('1b', ballot, accepted), to=leader)
    _Acceptor_handler_1043._labels = None
    _Acceptor_handler_1043._notlabels = None

    def _Acceptor_handler_1167(self, b, s, p, leader):
        ballot = max((({b for (_, _, (_ConstantPattern1202_, b)) in self._AcceptorReceivedEvent_5 if (_ConstantPattern1202_ == '1a')} | {b for (_, _, (_ConstantPattern1225_, b, _, _)) in self._AcceptorReceivedEvent_6 if (_ConstantPattern1225_ == '2a')}) or {((- 1), (- 1))}))
        self.send(('2b', ballot, s, p), to=leader)
    _Acceptor_handler_1167._labels = None
    _Acceptor_handler_1167._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_1393, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1392])])

    def setup(self, replicas, nops, **rest_1625):
        super().setup(replicas=replicas, nops=nops, **rest_1625)
        self._state.replicas = replicas
        self._state.nops = nops
        self._state.cid = 0
        self._state.results = dict()
        self._state.count = dict()

    def run(self):
        for i in range(self._state.nops):
            self.send(('request', (self._id, self._state.cid, random.randint(0, (NOPS - 1)))), to=self._state.replicas)
            super()._label('_st_label_1354', block=False)
            _st_label_1354 = 0
            while (_st_label_1354 == 0):
                _st_label_1354 += 1
                if (self._state.cid in self._state.results):
                    _st_label_1354 += 1
                else:
                    super()._label('_st_label_1354', block=True)
                    _st_label_1354 -= 1
            else:
                if (_st_label_1354 != 2):
                    continue
            if (_st_label_1354 != 2):
                break
            self.output('received result', self._state.cid, self._state.results[self._state.cid])
            self._state.cid += 1
        super()._label('_st_label_1368', block=False)
        cid = None

        def UniversalOpExpr_1369():
            nonlocal cid
            for self._state.cid in range(self._state.nops):
                if (not (self._state.count[self._state.cid] == len(self._state.replicas))):
                    return False
            return True
        _st_label_1368 = 0
        while (_st_label_1368 == 0):
            _st_label_1368 += 1
            if UniversalOpExpr_1369():
                _st_label_1368 += 1
            else:
                super()._label('_st_label_1368', block=True)
                _st_label_1368 -= 1
        self.output('terminating')
        self.send(('done',), to=self.nodeof(self._id))

    def _Client_handler_1392(self, cid, result):
        self.debug('### response', cid, result)
        if (not (cid in self._state.results)):
            self._state.results[cid] = result
        elif (not (self._state.results[cid] == result)):
            self.output('different result', cid, result, 'than', self._state.results[cid])
            raise RuntimeError('Desynced!!!!')
        self._state.count[cid] = (1 if (not (cid in self._state.count)) else (self._state.count[cid] + 1))
    _Client_handler_1392._labels = None
    _Client_handler_1392._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_1597, sources=[PatternExpr_1602], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nacceptors = (int(sys.argv[1]) if (len(sys.argv) > 1) else 8)
        nreplicas = (int(sys.argv[2]) if (len(sys.argv) > 2) else 8)
        nleaders = (int(sys.argv[3]) if (len(sys.argv) > 3) else 2)
        nclients = (int(sys.argv[4]) if (len(sys.argv) > 4) else 5)
        nops = (int(sys.argv[5]) if (len(sys.argv) > 5) else 3)
        acceptors = self.new(Acceptor, (), num=nacceptors)
        replicas = self.new(Replica, num=nreplicas)
        leaders = self.new(Leader, (acceptors, replicas), num=nleaders)
        initial_state = []
        self._setup(replicas, (leaders, initial_state))
        clients = self.new(Client, (replicas, nops), num=nclients)
        self._start(acceptors)
        self._start((replicas | leaders))
        self._start(clients)
        super()._label('_st_label_1588', block=False)
        c = None

        def UniversalOpExpr_1589():
            nonlocal c
            for c in clients:
                if (not PatternExpr_1604.match_iter(self._Node_ReceivedEvent_0, _BoundPattern1610_=c)):
                    return False
            return True
        _st_label_1588 = 0
        while (_st_label_1588 == 0):
            _st_label_1588 += 1
            if UniversalOpExpr_1589():
                _st_label_1588 += 1
            else:
                super()._label('_st_label_1588', block=True)
                _st_label_1588 -= 1
        self.output('All clients done!')
        self.send(('done',), to=((acceptors | replicas) | leaders))
