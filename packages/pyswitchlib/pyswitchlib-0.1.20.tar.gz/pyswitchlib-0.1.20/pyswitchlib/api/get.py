def acl_mirror_source_get(self, source=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type source: src_interface_type, src_interface_name, destination, dst_interface_type, dst_interface_name
    :param source: Keyword argument tuple.

    :type src_interface_type: unicode
    :param src_interface_type: **source** tuple argument.

        * enumeration restriction: ::

            ['ethernet']

    :type src_interface_name: unicode
    :param src_interface_name: **source** tuple argument.

        * pattern restriction: ::

            '((([0-9]|1[0-6])/([1-9]|[1-9][0-9])(:[1-4])?)|(['
            '1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-'
            '1][0-4]{2}))'

    :type destination: unicode
    :param destination: **source** tuple argument.

        * enumeration restriction: ::

            ['destination']

    :type dst_interface_type: unicode
    :param dst_interface_type: **source** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type dst_interface_name: unicode
    :param dst_interface_name: **source** tuple argument.

        * pattern restriction: ::

            '((([0-9]|1[0-6])/([1-9]|[1-9][0-9])(:[1-4])?)|(['
            '1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5][0-9]{3}|6[0-'
            '1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.acl_mirror.source', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'source', 'keyval': 'src_interface_type, src_interface_name, destination, dst_interface_type, dst_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, source=source)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def acl_state_vxlan_acl_get(self, vxlan_acl=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vxlan_acl: overlay_acl_tr_name
    :param vxlan_acl: Keyword argument tuple.

    :type overlay_acl_tr_name: unicode
    :param overlay_acl_tr_name: **vxlan_acl** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl', u'extended-data')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vxlan_acl', 'keyval': 'overlay_acl_tr_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vxlan_acl=vxlan_acl)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def acl_state_vxlan_acl_extended_data_get(self, vxlan_acl=None, extended_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vxlan_acl: overlay_acl_tr_name
    :param vxlan_acl: Keyword argument tuple.

    :type overlay_acl_tr_name: unicode
    :param overlay_acl_tr_name: **vxlan_acl** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type extended_data: acl_name, seq_num
    :param extended_data: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **extended_data** tuple argument.

    :type seq_num: long
    :param seq_num: **extended_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl', u'vxlan_acl')]
    bindings_list = [('pybind.slxos.v16r_1_00b.acl_state.vxlan_acl.extended_data', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'overlay_acl_tr_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'extended_data', 'keyval': 'acl_name, seq_num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vxlan_acl=vxlan_acl, extended_data=extended_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def adj_neighbor_entries_state_adj_neighbor_get(self, adj_neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type adj_neighbor: neighbor_id
    :param adj_neighbor: Keyword argument tuple.

    :type neighbor_id: unicode
    :param neighbor_id: **adj_neighbor** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor', u'adj-area')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'adj_neighbor', 'keyval': 'neighbor_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, adj_neighbor=adj_neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def adj_neighbor_entries_state_adj_neighbor_adj_area_get(self, adj_neighbor=None, adj_area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type adj_neighbor: neighbor_id
    :param adj_neighbor: Keyword argument tuple.

    :type neighbor_id: unicode
    :param neighbor_id: **adj_neighbor** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type adj_area: adj_asi_area_name
    :param adj_area: Keyword argument tuple.

    :type adj_asi_area_name: unicode
    :param adj_asi_area_name: **adj_area** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor', u'adj_neighbor')]
    bindings_list = [('pybind.slxos.v16r_1_00b.adj_neighbor_entries_state.adj_neighbor.adj_area', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'neighbor_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'adj_area', 'keyval': 'adj_asi_area_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, adj_neighbor=adj_neighbor, adj_area=adj_area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def alias_config_alias_get(self, alias=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type alias: name
    :param alias: Keyword argument tuple.

    :type name: unicode
    :param name: **alias** tuple argument.

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.alias_config.alias', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.alias_config.alias', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.alias_config.alias', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.alias_config.alias', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'alias', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alias=alias)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def alias_config_user_get(self, user=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type user: name
    :param user: Keyword argument tuple.

    :type name: unicode
    :param name: **user** tuple argument.

        * length restriction: ::

            ['1..40']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.alias_config.user', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.alias_config.user', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.alias_config.user', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.alias_config.user', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.alias_config.user', u'alias'), ('pybind.nos.v6_0_2b.alias_config.user', u'alias'), ('pybind.slxos.v16r_1_00b.alias_config.user', u'alias'), ('pybind.nos.v7_0_1a.alias_config.user', u'alias')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'user', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, user=user)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def alias_config_user_alias_get(self, user=None, alias=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type user: name
    :param user: Keyword argument tuple.

    :type name: unicode
    :param name: **user** tuple argument.

        * length restriction: ::

            ['1..40']

    **Instance Keyword Argument Tuple**:

    :type alias: name
    :param alias: Keyword argument tuple.

    :type name: unicode
    :param name: **alias** tuple argument.

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.alias_config.user', u'user'), ('pybind.nos.v7_1_0.alias_config.user', u'user'), ('pybind.nos.v6_0_2b.alias_config.user', u'user'), ('pybind.nos.v7_0_1a.alias_config.user', u'user')]
    bindings_list = [('pybind.nos.v6_0_2b.alias_config.user.alias', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.alias_config.user.alias', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.alias_config.user.alias', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.alias_config.user.alias', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'alias', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, user=user, alias=alias)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def arp_get(self, arp_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type arp_entry: arp_ip_address, mac_address_value, interfacename, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve
    :param arp_entry: Keyword argument tuple.

    :type arp_ip_address: unicode
    :param arp_ip_address: **arp_entry** tuple argument:  A.B.C.D;; IP address of the ARP entry

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mac_address_value: unicode
    :param mac_address_value: **arp_entry** tuple argument.

    :type interfacename: unicode
    :param interfacename: **arp_entry** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type GigabitEthernet: unicode
    :param GigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type TenGigabitEthernet: unicode
    :param TenGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type FortyGigabitEthernet: unicode
    :param FortyGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type HundredGigabitEthernet: unicode
    :param HundredGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type Ve: long
    :param Ve: **arp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_arp_holder.arp_entry', 'pybind.nos.v6_0_2b.brocade_arp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_arp_holder.arp_entry', 'pybind.nos.v7_0_1a.brocade_arp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_arp_holder.arp_entry', 'pybind.nos.v7_1_0.brocade_arp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.arp_entry', 'pybind.slxos.v16r_1_00b.brocade_arp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Port_channel, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, arp_entry=arp_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def arp_access_list_get(self, access_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type access_list: acl_name
    :param access_list: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **access_list** tuple argument:  <WORD:1-62>;;Name of ARP access-list

        * length restriction: ::

            ['1..62']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,61})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.arp.access_list', 'pybind.nos.v6_0_2b.brocade_dai', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.arp.access_list', 'pybind.nos.v7_0_1a.brocade_dai', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.arp.access_list', 'pybind.nos.v7_1_0.brocade_dai', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.dai_config.arp.access_list', 'pybind.slxos.v16r_1_00b.brocade_dai', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.dai_config.arp.access_list.permit', u'permit-list'), ('pybind.nos.v7_0_1a.arp.access_list.permit', u'permit-list'), ('pybind.nos.v6_0_2b.arp.access_list.permit', u'permit-list'), ('pybind.nos.v7_1_0.arp.access_list.permit', u'permit-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_list', 'keyval': 'acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_list=access_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def arp_access_list_permit_ip_get(self, access_list=None, permit_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type access_list: acl_name
    :param access_list: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **access_list** tuple argument:  <WORD:1-62>;;Name of ARP access-list

        * length restriction: ::

            ['1..62']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,61})'

    **Instance Keyword Argument Tuple**:

    :type permit_list: ip_type, host_ip, mac_type, host_mac, log
    :param permit_list: Keyword argument tuple.

    :type ip_type: unicode
    :param ip_type: **permit_list** tuple argument.

        * enumeration restriction: ::

            ['host']

    :type host_ip: unicode
    :param host_ip: **permit_list** tuple argument:  IPv4Address;;Source IPv4 Address A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mac_type: unicode
    :param mac_type: **permit_list** tuple argument:  MAC address

        * enumeration restriction: ::

            ['host']

    :type host_mac: unicode
    :param host_mac: **permit_list** tuple argument:  MACADDRESS;;Mac address in HHHH.HHHH.HHHH format.

    :type log: YANGBool
    :param log: **permit_list** tuple argument:  Log packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.arp.access_list', u'access_list'), ('pybind.nos.v6_0_2b.arp.access_list', u'access_list'), ('pybind.nos.v7_0_1a.arp.access_list', u'access_list'), ('pybind.slxos.v16r_1_00b.dai_config.arp.access_list', u'access_list')]
    bindings_list = [('pybind.nos.v6_0_2b.arp.access_list.permit.permit_list', 'pybind.nos.v6_0_2b.brocade_dai', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.arp.access_list.permit.permit_list', 'pybind.nos.v7_0_1a.brocade_dai', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.arp.access_list.permit.permit_list', 'pybind.nos.v7_1_0.brocade_dai', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.dai_config.arp.access_list.permit.permit_list', 'pybind.slxos.v16r_1_00b.brocade_dai', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'acl_name', 'extra_keyval': ''}, {'keyval': 'acl_name', 'extra_keyval': ''}, {'keyval': 'acl_name', 'extra_keyval': ''}, {'keyval': 'acl_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'permit_list', 'keyval': 'ip_type, host_ip, mac_type, host_mac', 'extra_keyval': 'ip_type, host_ip, mac_type, host_mac, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_list=access_list, permit_list=permit_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bd_vc_peer_state_get(self, bd_vc_peer_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bd_vc_peer_state: vc_id
    :param bd_vc_peer_state: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **bd_vc_peer_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', u'bd-vc-peer-data'), ('pybind.slxos.v16r_1_00b.bd_vc_peer_state', u'bd-vc-peer-counter')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'bd_vc_peer_state', 'keyval': 'vc_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bd_vc_peer_state_bd_vc_peer_data_get(self, bd_vc_peer_state=None, bd_vc_peer_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bd_vc_peer_state: vc_id
    :param bd_vc_peer_state: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **bd_vc_peer_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type bd_vc_peer_data: vc_peer_address
    :param bd_vc_peer_data: Keyword argument tuple.

    :type vc_peer_address: unicode
    :param vc_peer_address: **bd_vc_peer_data** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'bd_vc_peer_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', u'vc-proto-tnnl'), ('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', u'vc-assigned-lsp')]
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bd_vc_peer_data', 'keyval': 'vc_peer_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state, bd_vc_peer_data=bd_vc_peer_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bd_vc_peer_state_bd_vc_peer_data_vc_assigned_lsp_get(self, bd_vc_peer_state=None, bd_vc_peer_data=None, vc_assigned_lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bd_vc_peer_state: vc_id
    :param bd_vc_peer_state: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **bd_vc_peer_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bd_vc_peer_data: vc_peer_address
    :param bd_vc_peer_data: Keyword argument tuple.

    :type vc_peer_address: unicode
    :param vc_peer_address: **bd_vc_peer_data** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type vc_assigned_lsp: vc_lsp_name
    :param vc_assigned_lsp: Keyword argument tuple.

    :type vc_lsp_name: unicode
    :param vc_lsp_name: **vc_assigned_lsp** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'bd_vc_peer_state'), ('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', u'bd_vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data.vc_assigned_lsp', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}, {'keyval': 'vc_peer_address', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_assigned_lsp', 'keyval': 'vc_lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state, bd_vc_peer_data=bd_vc_peer_data, vc_assigned_lsp=vc_assigned_lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bd_vc_peer_state_bd_vc_peer_data_vc_proto_tnnl_get(self, bd_vc_peer_state=None, bd_vc_peer_data=None, vc_proto_tnnl=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bd_vc_peer_state: vc_id
    :param bd_vc_peer_state: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **bd_vc_peer_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bd_vc_peer_data: vc_peer_address
    :param bd_vc_peer_data: Keyword argument tuple.

    :type vc_peer_address: unicode
    :param vc_peer_address: **bd_vc_peer_data** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type vc_proto_tnnl: vc_proto_name
    :param vc_proto_tnnl: Keyword argument tuple.

    :type vc_proto_name: unicode
    :param vc_proto_name: **vc_proto_tnnl** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state', 'bd_vc_peer_state'), ('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data', u'bd_vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bd_vc_peer_state.bd_vc_peer_data.vc_proto_tnnl', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}, {'keyval': 'vc_peer_address', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_proto_tnnl', 'keyval': 'vc_proto_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bd_vc_peer_state=bd_vc_peer_state, bd_vc_peer_data=bd_vc_peer_data, vc_proto_tnnl=vc_proto_tnnl)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_get(self, bridge_domain=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bridge_domain: bridge_domain_id, bridge_domain_type
    :param bridge_domain: Keyword argument tuple.

    :type bridge_domain_id: long
    :param bridge_domain_id: **bridge_domain** tuple argument:  Bridge-domain ID.

        * range restriction: ::

            ['0..4294967295']

    :type bridge_domain_type: unicode
    :param bridge_domain_type: **bridge_domain** tuple argument:  Set the Bridge Domain Type

        * enumeration restriction: ::

            ['p2mp', 'p2p']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.bridge_domain.logical_interface', u'ethernet'), ('pybind.slxos.v16r_1_00b.bridge_domain', u'peer'), ('pybind.slxos.v16r_1_00b.bridge_domain.logical_interface', u'port-channel')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'bridge_domain', 'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_logical_interface_ethernet_get(self, bridge_domain=None, ethernet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain: bridge_domain_id, bridge_domain_type
    :param bridge_domain: Keyword argument tuple.

    :type bridge_domain_id: long
    :param bridge_domain_id: **bridge_domain** tuple argument:  Bridge-domain ID.

        * range restriction: ::

            ['0..4294967295']

    :type bridge_domain_type: unicode
    :param bridge_domain_type: **bridge_domain** tuple argument:  Set the Bridge Domain Type

        * enumeration restriction: ::

            ['p2mp', 'p2p']

    **Instance Keyword Argument Tuple**:

    :type ethernet: lif_bind_id
    :param ethernet: Keyword argument tuple.

    :type lif_bind_id: unicode
    :param lif_bind_id: **ethernet** tuple argument:  Instance ID of the LIF to bind

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9])(:[1-4])?)'
            '(\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-9][0-9]'
            '[0-9][0-9]|1[0-2][0-2][0-8][0-8]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'bridge_domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain.logical_interface.ethernet', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ethernet', 'keyval': 'lif_bind_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain, ethernet=ethernet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_logical_interface_port_channel_get(self, bridge_domain=None, port_channel=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain: bridge_domain_id, bridge_domain_type
    :param bridge_domain: Keyword argument tuple.

    :type bridge_domain_id: long
    :param bridge_domain_id: **bridge_domain** tuple argument:  Bridge-domain ID.

        * range restriction: ::

            ['0..4294967295']

    :type bridge_domain_type: unicode
    :param bridge_domain_type: **bridge_domain** tuple argument:  Set the Bridge Domain Type

        * enumeration restriction: ::

            ['p2mp', 'p2p']

    **Instance Keyword Argument Tuple**:

    :type port_channel: pc_lif_bind_id
    :param port_channel: Keyword argument tuple.

    :type pc_lif_bind_id: unicode
    :param pc_lif_bind_id: **port_channel** tuple argument:  Instance ID of the port-channel LIF to bind

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-6][0-9][0-'
            '9][0-9])\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-'
            '9][0-9][0-9][0-9]|1[0-2][0-2][0-8][0-8]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'bridge_domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain.logical_interface.port_channel', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'pc_lif_bind_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain, port_channel=port_channel)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_mac_state_get(self, bridge_domain_mac_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bridge_domain_mac_state: bd_id
    :param bridge_domain_mac_state: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_mac_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_mac_state', 'pybind.slxos.v16r_1_00b.brocade_l2sys_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'bridge_domain_mac_state', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_mac_state=bridge_domain_mac_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_peer_get(self, bridge_domain=None, peer=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain: bridge_domain_id, bridge_domain_type
    :param bridge_domain: Keyword argument tuple.

    :type bridge_domain_id: long
    :param bridge_domain_id: **bridge_domain** tuple argument:  Bridge-domain ID.

        * range restriction: ::

            ['0..4294967295']

    :type bridge_domain_type: unicode
    :param bridge_domain_type: **bridge_domain** tuple argument:  Set the Bridge Domain Type

        * enumeration restriction: ::

            ['p2mp', 'p2p']

    **Instance Keyword Argument Tuple**:

    :type peer: peer_ip, load_balance, cos
    :param peer: Keyword argument tuple.

    :type peer_ip: unicode
    :param peer_ip: **peer** tuple argument:  PW Peer Ip for remote peer

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type load_balance: YANGBool
    :param load_balance: **peer** tuple argument:  load balance

    :type cos: long
    :param cos: **peer** tuple argument:  cos value

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain', 'bridge_domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain.peer', 'pybind.slxos.v16r_1_00b.brocade_bridge_domain', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bridge_domain_id, bridge_domain_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer', 'keyval': 'peer_ip', 'extra_keyval': 'peer_ip, load_balance, cos'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain=bridge_domain, peer=peer)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_get(self, bridge_domain_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bridge_domain_list: bd_id
    :param bridge_domain_list: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'outer-vlan-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bridge_domain_list', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_outer_vlan_list_get(self, bridge_domain_list=None, outer_vlan_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain_list: bd_id
    :param bridge_domain_list: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type outer_vlan_list: outer_vlan
    :param outer_vlan_list: Keyword argument tuple.

    :type outer_vlan: long
    :param outer_vlan: **outer_vlan_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'bridge_domain_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', u'tagged-ports-list'), ('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', u'untagged-ports-list')]
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'outer_vlan_list', 'keyval': 'outer_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list, outer_vlan_list=outer_vlan_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_outer_vlan_list_tagged_ports_list_get(self, bridge_domain_list=None, outer_vlan_list=None, tagged_ports_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain_list: bd_id
    :param bridge_domain_list: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type outer_vlan_list: outer_vlan
    :param outer_vlan_list: Keyword argument tuple.

    :type outer_vlan: long
    :param outer_vlan: **outer_vlan_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type tagged_ports_list: lif_name
    :param tagged_ports_list: Keyword argument tuple.

    :type lif_name: unicode
    :param lif_name: **tagged_ports_list** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'bridge_domain_list'), ('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', u'outer_vlan_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list.tagged_ports_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}, {'keyval': 'outer_vlan', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'tagged_ports_list', 'keyval': 'lif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list, outer_vlan_list=outer_vlan_list, tagged_ports_list=tagged_ports_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def bridge_domain_state_bridge_domain_list_outer_vlan_list_untagged_ports_list_get(self, bridge_domain_list=None, outer_vlan_list=None, untagged_ports_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain_list: bd_id
    :param bridge_domain_list: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type outer_vlan_list: outer_vlan
    :param outer_vlan_list: Keyword argument tuple.

    :type outer_vlan: long
    :param outer_vlan: **outer_vlan_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type untagged_ports_list: lif_name
    :param untagged_ports_list: Keyword argument tuple.

    :type lif_name: unicode
    :param lif_name: **untagged_ports_list** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list', u'bridge_domain_list'), ('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list', u'outer_vlan_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.bridge_domain_state.bridge_domain_list.outer_vlan_list.untagged_ports_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}, {'keyval': 'outer_vlan', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'untagged_ports_list', 'keyval': 'lif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_list=bridge_domain_list, outer_vlan_list=outer_vlan_list, untagged_ports_list=untagged_ports_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cee_map_get(self, cee_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cee_map: name
    :param cee_map: Keyword argument tuple.

    :type name: unicode
    :param name: **cee_map** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.cee_map', 'pybind.nos.v6_0_2b.brocade_cee_map', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.cee_map', 'pybind.nos.v7_0_1a.brocade_cee_map', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.cee_map', 'pybind.nos.v7_1_0.brocade_cee_map', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.cee_map', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cee_map', u'priority-group-table'), ('pybind.slxos.v16r_1_00b.cee_map.remap', u'lossless-priority'), ('pybind.slxos.v16r_1_00b.cee_map.remap', u'fabric-priority'), ('pybind.slxos.v16r_1_00b.cee_map', u'priority-table'), ('pybind.nos.v7_1_0.cee_map', u'priority-table'), ('pybind.nos.v7_1_0.cee_map.remap', u'fabric-priority'), ('pybind.nos.v7_1_0.cee_map', u'priority-group-table'), ('pybind.nos.v7_1_0.cee_map.remap', u'lossless-priority'), ('pybind.nos.v6_0_2b.cee_map.remap', u'fabric-priority'), ('pybind.nos.v6_0_2b.cee_map.remap', u'lossless-priority'), ('pybind.nos.v6_0_2b.cee_map', u'priority-group-table'), ('pybind.nos.v6_0_2b.cee_map', u'priority-table'), ('pybind.nos.v7_0_1a.cee_map', u'priority-table'), ('pybind.nos.v7_0_1a.cee_map', u'priority-group-table'), ('pybind.nos.v7_0_1a.cee_map.remap', u'fabric-priority'), ('pybind.nos.v7_0_1a.cee_map.remap', u'lossless-priority')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'cee_map', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cee_map=cee_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cee_map_priority_group_table_get(self, cee_map=None, priority_group_table=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cee_map: name
    :param cee_map: Keyword argument tuple.

    :type name: unicode
    :param name: **cee_map** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    **Instance Keyword Argument Tuple**:

    :type priority_group_table: PGID, weight, pfc
    :param priority_group_table: Keyword argument tuple.

    :type PGID: unicode
    :param PGID: **priority_group_table** tuple argument:  ;; Configure Priority Group (PGID 0-7,15.0-15.7)

        * pattern restriction: ::

            '[0-7]|15.[0-7]'

    :type weight: long
    :param weight: **priority_group_table** tuple argument:  Configure DWRR Priority Group (PGID 0-7) weight

        * range restriction: ::

            ['-2147483648..2147483647']

    :type pfc: unicode
    :param pfc: **priority_group_table** tuple argument:   Per-priority Flow Control

        * enumeration restriction: ::

            ['on', 'off']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.cee_map', 'cee_map'), ('pybind.nos.v7_0_1a.cee_map', 'cee_map'), ('pybind.nos.v6_0_2b.cee_map', 'cee_map'), ('pybind.slxos.v16r_1_00b.cee_map', 'cee_map')]
    bindings_list = [('pybind.nos.v6_0_2b.cee_map.priority_group_table', 'pybind.nos.v6_0_2b.brocade_cee_map', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.cee_map.priority_group_table', 'pybind.nos.v7_0_1a.brocade_cee_map', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.cee_map.priority_group_table', 'pybind.nos.v7_1_0.brocade_cee_map', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.cee_map.priority_group_table', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'priority_group_table', 'keyval': 'PGID', 'extra_keyval': 'PGID, weight, pfc'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cee_map=cee_map, priority_group_table=priority_group_table)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_get(self, domain=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'ma')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain', 'keyval': 'md_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_get(self, domain=None, ma=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'mep'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'mip')]
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ma', 'keyval': 'ma_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_mep_get(self, domain=None, ma=None, mep=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type mep: mep_id
    :param mep: Keyword argument tuple.

    :type mep_id: int
    :param mep_id: **mep** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep', u'rmep')]
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mep', 'keyval': 'mep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_mep_rmep_get(self, domain=None, ma=None, mep=None, rmep=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    :type mep: mep_id
    :param mep: Keyword argument tuple.

    :type mep_id: int
    :param mep_id: **mep** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type rmep: rmep_id
    :param rmep: Keyword argument tuple.

    :type rmep_id: int
    :param rmep_id: **rmep** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'ma'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep', u'mep')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mep.rmep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}, {'keyval': 'mep_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rmep', 'keyval': 'rmep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep, rmep=rmep)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_connectivity_domain_ma_mip_get(self, domain=None, ma=None, mip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type mip: vlan_id, port
    :param mip: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **mip** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type port: unicode
    :param port: **mip** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_connectivity.domain.ma.mip', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mip', 'keyval': 'vlan_id, port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mip=mip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_detail_domain_get(self, domain=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'ma')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain', 'keyval': 'md_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_get(self, domain=None, ma=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'mep'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'mip')]
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ma', 'keyval': 'ma_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_mep_get(self, domain=None, ma=None, mep=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type mep: mep_id
    :param mep: Keyword argument tuple.

    :type mep_id: int
    :param mep_id: **mep** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep', u'rmep')]
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mep', 'keyval': 'mep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_mep_rmep_get(self, domain=None, ma=None, mep=None, rmep=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    :type mep: mep_id
    :param mep: Keyword argument tuple.

    :type mep_id: int
    :param mep_id: **mep** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type rmep: rmep_id
    :param rmep: Keyword argument tuple.

    :type rmep_id: int
    :param rmep_id: **rmep** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'ma'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep', u'mep')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mep.rmep', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}, {'keyval': 'mep_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rmep', 'keyval': 'rmep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mep=mep, rmep=rmep)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cfm_state_cfm_detail_domain_ma_mip_get(self, domain=None, ma=None, mip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain: md_name
    :param domain: Keyword argument tuple.

    :type md_name: unicode
    :param md_name: **domain** tuple argument.

    :type ma: ma_name
    :param ma: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type mip: vlan_id, port
    :param mip: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **mip** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type port: unicode
    :param port: **mip** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain', u'domain'), ('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma', u'ma')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cfm_state.cfm_detail.domain.ma.mip', 'pybind.slxos.v16r_1_00b.brocade_dot1ag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'md_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mip', 'keyval': 'vlan_id, port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain=domain, ma=ma, mip=mip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def class_map_get(self, class_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type class_map: name
    :param class_map: Keyword argument tuple.

    :type name: unicode
    :param name: **class_map** tuple argument:  Class Map Name (Max Size - 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.class_map', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.class_map', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.class_map', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.class_map', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.class_map.match', u'access-group'), ('pybind.nos.v7_0_1a.class_map.match', u'access-group'), ('pybind.slxos.v16r_1_00b.class_map.match', u'access-group'), ('pybind.nos.v7_1_0.class_map.match', u'access-group')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'class_map', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, class_map=class_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cluster_get(self, cluster=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cluster: cluster_name, cluster_id
    :param cluster: Keyword argument tuple.

    :type cluster_name: unicode
    :param cluster_name: **cluster** tuple argument:  Name for the Cluster (MAX: 64 Characters)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,63})'

    :type cluster_id: long
    :param cluster_id: **cluster** tuple argument:  Id for the Cluster (Range: 1 - 65535

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cluster', 'pybind.slxos.v16r_1_00b.brocade_mct', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cluster', u'peer'), ('pybind.slxos.v16r_1_00b.cluster', u'member-vlan'), ('pybind.slxos.v16r_1_00b.cluster', u'client')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'cluster', 'keyval': 'cluster_name, cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cluster=cluster)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cluster_client_get(self, cluster=None, client=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cluster: cluster_name, cluster_id
    :param cluster: Keyword argument tuple.

    :type cluster_name: unicode
    :param cluster_name: **cluster** tuple argument:  Name for the Cluster (MAX: 64 Characters)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,63})'

    :type cluster_id: long
    :param cluster_id: **cluster** tuple argument:  Id for the Cluster (Range: 1 - 65535

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type client: client_name, client_id
    :param client: Keyword argument tuple.

    :type client_name: unicode
    :param client_name: **client** tuple argument:  Name for the Cluster Client (MAX: 64 Characters)

        * length restriction: ::

            ['1..64']

    :type client_id: long
    :param client_id: **client** tuple argument:  Id for the Cluster Client (Range: 1 - 512)

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cluster', 'cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cluster.client', 'pybind.slxos.v16r_1_00b.brocade_mct', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cluster.client', u'client-interface')]
    compositions_keyval_list = [{'keyval': 'cluster_name, cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'client', 'keyval': 'client_name, client_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cluster=cluster, client=client)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cluster_peer_get(self, cluster=None, peer=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cluster: cluster_name, cluster_id
    :param cluster: Keyword argument tuple.

    :type cluster_name: unicode
    :param cluster_name: **cluster** tuple argument:  Name for the Cluster (MAX: 64 Characters)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,63})'

    :type cluster_id: long
    :param cluster_id: **cluster** tuple argument:  Id for the Cluster (Range: 1 - 65535

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type peer: peer_ip
    :param peer: Keyword argument tuple.

    :type peer_ip: unicode
    :param peer_ip: **peer** tuple argument:  MCT Peer node IP Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cluster', 'cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cluster.peer', 'pybind.slxos.v16r_1_00b.brocade_mct', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cluster_name, cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer', 'keyval': 'peer_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cluster=cluster, peer=peer)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def counts_state_bad_lsp_log_get(self, bad_lsp_log=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bad_lsp_log: type_index
    :param bad_lsp_log: Keyword argument tuple.

    :type type_index: int
    :param type_index: **bad_lsp_log** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.counts_state.bad_lsp_log', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bad_lsp_log', 'keyval': 'type_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bad_lsp_log=bad_lsp_log)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_get(self, cpu_cfg_slot=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cpu_cfg_slot: slot_id
    :param cpu_cfg_slot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **cpu_cfg_slot** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu-cfg-data'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu-cfg-group')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_slot', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_data_get(self, cpu_cfg_slot=None, cpu_cfg_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cpu_cfg_slot: slot_id
    :param cpu_cfg_slot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **cpu_cfg_slot** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type cpu_cfg_data: shaper_rate
    :param cpu_cfg_data: Keyword argument tuple.

    :type shaper_rate: long
    :param shaper_rate: **cpu_cfg_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_data', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_data', 'keyval': 'shaper_rate', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_data=cpu_cfg_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_get(self, cpu_cfg_slot=None, cpu_cfg_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cpu_cfg_slot: slot_id
    :param cpu_cfg_slot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **cpu_cfg_slot** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type cpu_cfg_group: group_id
    :param cpu_cfg_group: Keyword argument tuple.

    :type group_id: int
    :param group_id: **cpu_cfg_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu-cfg-prio'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu-cfg-data')]
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_group', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_cpu_cfg_data_get(self, cpu_cfg_slot=None, cpu_cfg_group=None, cpu_cfg_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cpu_cfg_slot: slot_id
    :param cpu_cfg_slot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **cpu_cfg_slot** tuple argument.

        * range restriction: ::

            ['0..255']

    :type cpu_cfg_group: group_id
    :param cpu_cfg_group: Keyword argument tuple.

    :type group_id: int
    :param group_id: **cpu_cfg_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type cpu_cfg_data: shaper_rate
    :param cpu_cfg_data: Keyword argument tuple.

    :type shaper_rate: long
    :param shaper_rate: **cpu_cfg_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu_cfg_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_data', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_data', 'keyval': 'shaper_rate', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group, cpu_cfg_data=cpu_cfg_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_cpu_cfg_prio_get(self, cpu_cfg_slot=None, cpu_cfg_group=None, cpu_cfg_prio=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cpu_cfg_slot: slot_id
    :param cpu_cfg_slot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **cpu_cfg_slot** tuple argument.

        * range restriction: ::

            ['0..255']

    :type cpu_cfg_group: group_id
    :param cpu_cfg_group: Keyword argument tuple.

    :type group_id: int
    :param group_id: **cpu_cfg_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type cpu_cfg_prio: prio_id
    :param cpu_cfg_prio: Keyword argument tuple.

    :type prio_id: int
    :param prio_id: **cpu_cfg_prio** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu_cfg_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio', u'cpu-cfg-data')]
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_prio', 'keyval': 'prio_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group, cpu_cfg_prio=cpu_cfg_prio)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_cfg_state_cpu_cfg_slot_cpu_cfg_group_cpu_cfg_prio_cpu_cfg_data_get(self, cpu_cfg_slot=None, cpu_cfg_group=None, cpu_cfg_prio=None, cpu_cfg_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cpu_cfg_slot: slot_id
    :param cpu_cfg_slot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **cpu_cfg_slot** tuple argument.

        * range restriction: ::

            ['0..255']

    :type cpu_cfg_group: group_id
    :param cpu_cfg_group: Keyword argument tuple.

    :type group_id: int
    :param group_id: **cpu_cfg_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type cpu_cfg_prio: prio_id
    :param cpu_cfg_prio: Keyword argument tuple.

    :type prio_id: int
    :param prio_id: **cpu_cfg_prio** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type cpu_cfg_data: shaper_rate
    :param cpu_cfg_data: Keyword argument tuple.

    :type shaper_rate: long
    :param shaper_rate: **cpu_cfg_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot', u'cpu_cfg_slot'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group', u'cpu_cfg_group'), ('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio', u'cpu_cfg_prio')]
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_cfg_state.cpu_cfg_slot.cpu_cfg_group.cpu_cfg_prio.cpu_cfg_data', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'prio_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cpu_cfg_data', 'keyval': 'shaper_rate', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_cfg_slot=cpu_cfg_slot, cpu_cfg_group=cpu_cfg_group, cpu_cfg_prio=cpu_cfg_prio, cpu_cfg_data=cpu_cfg_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_info_state_cpu_info_egid_get(self, cpu_info_egid=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cpu_info_egid: group_id
    :param cpu_info_egid: Keyword argument tuple.

    :type group_id: int
    :param group_id: **cpu_info_egid** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_info_state.cpu_info_egid', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cpu_info_egid', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_info_egid=cpu_info_egid)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def cpu_interface_state_get(self, cpu_interface_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cpu_interface_state: ifname
    :param cpu_interface_state: Keyword argument tuple.

    :type ifname: unicode
    :param ifname: **cpu_interface_state** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.cpu_interface_state', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.cpu_interface_state', u'gos-stats'), ('pybind.slxos.v16r_1_00b.cpu_interface_state', u'host-stats')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'cpu_interface_state', 'keyval': 'ifname', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cpu_interface_state=cpu_interface_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def crypto_ca_get(self, ca=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ca: trustpoint
    :param ca: Keyword argument tuple.

    :type trustpoint: unicode
    :param trustpoint: **ca** tuple argument:  Trustpoint name

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.crypto_sa.crypto.ca', 'pybind.slxos.v16r_1_00b.brocade_crypto', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ca', 'keyval': 'trustpoint', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ca=ca)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def crypto_key_get(self, key=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type key: label, type, modulus
    :param key: Keyword argument tuple.

    :type label: unicode
    :param label: **key** tuple argument:  Key Label

        * length restriction: ::

            ['1..64']

    :type type: unicode
    :param type: **key** tuple argument:  Key Type

        * enumeration restriction: ::

            ['dsa', 'rsa', 'ecdsa']

    :type modulus: long
    :param modulus: **key** tuple argument:  Key Size

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.crypto_sa.crypto.key', 'pybind.slxos.v16r_1_00b.brocade_crypto', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'key', 'keyval': 'label', 'extra_keyval': 'label, type, modulus'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, key=key)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def diag_post_rbridge_id_get(self, rbridge_id=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument:  Syntax: rbridgeId [rbridgeId]

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.diag.post.rbridge_id', 'pybind.nos.v6_0_2b.brocade_diagnostics', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.diag.post.rbridge_id', 'pybind.nos.v7_0_1a.brocade_diagnostics', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.diag.post.rbridge_id', 'pybind.nos.v7_1_0.brocade_diagnostics', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.diag.post.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_diagnostics', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def dpod_get(self, port_id=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type port_id: port_id
    :param port_id: Keyword argument tuple.

    :type port_id: unicode
    :param port_id: **port_id** tuple argument:  Syntax: [rbridge-id/slot/port]

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.dpod.port_id', 'pybind.nos.v6_0_2b.brocade_license', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.dpod.port_id', 'pybind.nos.v7_0_1a.brocade_license', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.dpod.port_id', 'pybind.nos.v7_1_0.brocade_license', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.dpod.port_id', 'pybind.slxos.v16r_1_00b.brocade_license', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_id', 'keyval': 'port_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_id=port_id)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def dscp_exp_state_qos_mpls_get(self, qos_mpls=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type qos_mpls: map_name
    :param qos_mpls: Keyword argument tuple.

    :type map_name: unicode
    :param map_name: **qos_mpls** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.dscp_exp_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def event_handler_get(self, event_handler_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type event_handler_list: name
    :param event_handler_list: Keyword argument tuple.

    :type name: unicode
    :param name: **event_handler_list** tuple argument:  Event handler name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.event_handler.event_handler_list', 'pybind.nos.v6_0_2b.brocade_event_handler', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list', 'pybind.nos.v7_0_1a.brocade_event_handler', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.event_handler.event_handler_list', 'pybind.nos.v7_1_0.brocade_event_handler', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list', 'pybind.slxos.v16r_1_00b.brocade_event_handler', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.event_handler.event_handler_list', u'trigger'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list', u'action'), ('pybind.nos.v7_1_0.event_handler.event_handler_list', u'trigger'), ('pybind.nos.v7_1_0.event_handler.event_handler_list', u'action'), ('pybind.nos.v6_0_2b.event_handler.event_handler_list', u'action'), ('pybind.nos.v6_0_2b.event_handler.event_handler_list', u'trigger'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list', u'trigger'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list', u'action')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'event_handler_list', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, event_handler_list=event_handler_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def event_handler_activate_get(self, name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type name: name
    :param name: Keyword argument tuple.

    :type name: unicode
    :param name: **name** tuple argument:  Event handler name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.event_handler.activate.name', 'pybind.slxos.v16r_1_00b.brocade_event_handler', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.event_handler.activate.name', u'trigger-function-container')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'name', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, name=name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def event_handler_trigger_get(self, event_handler_list=None, trigger=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type event_handler_list: name
    :param event_handler_list: Keyword argument tuple.

    :type name: unicode
    :param name: **event_handler_list** tuple argument:  Event handler name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    **Instance Keyword Argument Tuple**:

    :type trigger: trigger_id, vcs, raslog
    :param trigger: Keyword argument tuple.

    :type trigger_id: long
    :param trigger_id: **trigger** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vcs: unicode
    :param vcs: **trigger** tuple argument:  VCS event type.

        * enumeration restriction: ::

            ['switch-bootup',
            'switch-ready-for-configuration']

    :type raslog: unicode
    :param raslog: **trigger** tuple argument:  RASlog Id.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.event_handler.event_handler_list', u'event_handler_list'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list', u'event_handler_list'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list', u'event_handler_list'), ('pybind.nos.v6_0_2b.event_handler.event_handler_list', u'event_handler_list')]
    bindings_list = [('pybind.nos.v6_0_2b.event_handler.event_handler_list.trigger', 'pybind.nos.v6_0_2b.brocade_event_handler', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.event_handler.event_handler_list.trigger', 'pybind.nos.v7_0_1a.brocade_event_handler', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.event_handler.event_handler_list.trigger', 'pybind.nos.v7_1_0.brocade_event_handler', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.event_handler.event_handler_list.trigger', 'pybind.slxos.v16r_1_00b.brocade_event_handler', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.event_handler.event_handler_list.trigger', u'raslog')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trigger', 'keyval': 'trigger_id', 'extra_keyval': 'trigger_id, vcs, raslog'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, event_handler_list=event_handler_list, trigger=trigger)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def exp_dscp_state_qos_mpls_get(self, qos_mpls=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type qos_mpls: map_name
    :param qos_mpls: Keyword argument tuple.

    :type map_name: unicode
    :param map_name: **qos_mpls** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.exp_dscp_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def exp_traffic_class_state_qos_mpls_get(self, qos_mpls=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type qos_mpls: map_name
    :param qos_mpls: Keyword argument tuple.

    :type map_name: unicode
    :param map_name: **qos_mpls** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.exp_traffic_class_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def fabric_route_mcast_rbridge_id_get(self, rbridge_id=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument:  Syntax: rbridgeId [rbridgeId]

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.fabric.route.mcast.rbridge_id', 'pybind.nos.v6_0_2b.brocade_fabric_service', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fabric.route.mcast.rbridge_id', 'pybind.nos.v7_0_1a.brocade_fabric_service', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fabric.route.mcast.rbridge_id', 'pybind.nos.v7_1_0.brocade_fabric_service', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fabric.route.mcast.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_fabric_service', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def fcoe_fabric_map_get(self, fcoe_fabric_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type fcoe_fabric_map: fcoe_fabric_map_name
    :param fcoe_fabric_map: Keyword argument tuple.

    :type fcoe_fabric_map_name: unicode
    :param fcoe_fabric_map_name: **fcoe_fabric_map** tuple argument:  FCoE Fabric-map name (Max Size - 31)

        * length restriction: ::

            ['1..31']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', 'pybind.nos.v6_0_2b.brocade_fcoe', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', 'pybind.nos.v7_0_1a.brocade_fcoe', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', 'pybind.nos.v7_1_0.brocade_fcoe', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', 'pybind.slxos.v16r_1_00b.brocade_fcoe', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', u'fcoe-fip-keep-alive'), ('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map.fcoe_fcport_group_config', u'fcport-group-rbid'), ('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', u'fcoe-fip-advertisement'), ('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', u'fcoe-fcf-map'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', u'fcoe-fip-keep-alive'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', u'fcoe-fcf-map'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', u'fcoe-fip-advertisement'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map.fcoe_fcport_group_config', u'fcport-group-rbid'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', u'fcoe-fip-keep-alive'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', u'fcoe-fcf-map'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', u'fcoe-fip-advertisement'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map.fcoe_fcport_group_config', u'fcport-group-rbid'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', u'fcoe-fip-keep-alive'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', u'fcoe-fcf-map'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map.fcoe_fcport_group_config', u'fcport-group-rbid'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', u'fcoe-fip-advertisement')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fcoe_fabric_map', 'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe_fabric_map=fcoe_fabric_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def fcoe_fabric_map_fcf_group_get(self, fcoe_fabric_map=None, fcoe_fcf_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fcoe_fabric_map: fcoe_fabric_map_name
    :param fcoe_fabric_map: Keyword argument tuple.

    :type fcoe_fabric_map_name: unicode
    :param fcoe_fabric_map_name: **fcoe_fabric_map** tuple argument:  FCoE Fabric-map name (Max Size - 31)

        * length restriction: ::

            ['1..31']

    **Instance Keyword Argument Tuple**:

    :type fcoe_fcf_map: fcf_map_name
    :param fcoe_fcf_map: Keyword argument tuple.

    :type fcf_map_name: unicode
    :param fcf_map_name: **fcoe_fcf_map** tuple argument.

        * length restriction: ::

            ['1..31']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map', u'fcoe_fabric_map'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map', u'fcoe_fabric_map'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map', u'fcoe_fabric_map'), ('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map', u'fcoe_fabric_map')]
    bindings_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.nos.v6_0_2b.brocade_fcoe', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.nos.v7_0_1a.brocade_fcoe', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.nos.v7_1_0.brocade_fcoe', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map.fcoe_fcf_map', 'pybind.slxos.v16r_1_00b.brocade_fcoe', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.fcoe.fcoe_fabric_map.fcoe_fcf_map', u'fcf-map-fif-rbid'), ('pybind.nos.v7_0_1a.fcoe.fcoe_fabric_map.fcoe_fcf_map', u'fcf-map-fif-rbid'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_fabric_map.fcoe_fcf_map', u'fcf-map-fif-rbid'), ('pybind.nos.v6_0_2b.fcoe.fcoe_fabric_map.fcoe_fcf_map', u'fcf-map-fif-rbid')]
    compositions_keyval_list = [{'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}, {'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}, {'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}, {'keyval': 'fcoe_fabric_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'fcoe_fcf_map', 'keyval': 'fcf_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe_fabric_map=fcoe_fabric_map, fcoe_fcf_map=fcoe_fcf_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def fcoe_fcoe_map_get(self, fcoe_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type fcoe_map: fcoe_map_name
    :param fcoe_map: Keyword argument tuple.

    :type fcoe_map_name: unicode
    :param fcoe_map_name: **fcoe_map** tuple argument:  FCoE Map name (Max Size - 32)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.fcoe.fcoe_map', 'pybind.nos.v6_0_2b.brocade_fcoe', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.fcoe.fcoe_map', 'pybind.nos.v7_0_1a.brocade_fcoe', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.fcoe.fcoe_map', 'pybind.nos.v7_1_0.brocade_fcoe', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_map', 'pybind.slxos.v16r_1_00b.brocade_fcoe', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.fcoe.fcoe_map', u'fcoe-map-cee-map'), ('pybind.nos.v6_0_2b.fcoe.fcoe_map', u'fcoe-map-cee-map'), ('pybind.nos.v7_0_1a.fcoe.fcoe_map', u'fcoe-map-cee-map'), ('pybind.slxos.v16r_1_00b.fcoe.fcoe_map', u'fcoe-map-cee-map')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fcoe_map', 'keyval': 'fcoe_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe_map=fcoe_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def filter_change_update_delay_get(self, filter_change_update_delay=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type filter_change_update_delay: filter_delay_value
    :param filter_change_update_delay: Keyword argument tuple.

    :type filter_delay_value: long
    :param filter_delay_value: **filter_change_update_delay** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hide_filter_change_update_delay_holder.filter_change_update_delay', 'pybind.slxos.v16r_1_00b.brocade_ip_policy', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'filter_change_update_delay', 'keyval': 'filter_delay_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, filter_change_update_delay=filter_change_update_delay)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def hardware_connector_get(self, connector=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type connector: name
    :param connector: Keyword argument tuple.

    :type name: unicode
    :param name: **connector** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.connector', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.connector', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.connector', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hardware.connector', 'pybind.slxos.v16r_1_00b.brocade_hardware', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.hardware.connector', u'breakout'), ('pybind.nos.v7_1_0.hardware.connector', u'sfp'), ('pybind.nos.v6_0_2b.hardware.connector', u'sfp'), ('pybind.nos.v7_0_1a.hardware.connector', u'sfp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'connector', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, connector=connector)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def hardware_connector_group_get(self, connector_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type connector_group: id
    :param connector_group: Keyword argument tuple.

    :type id: unicode
    :param id: **connector_group** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.connector_group', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.connector_group', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.connector_group', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'connector_group', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, connector_group=connector_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def hardware_custom_profile_kap_get(self, kap_custom_profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type kap_custom_profile: name
    :param kap_custom_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **kap_custom_profile** tuple argument.

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', 'pybind.slxos.v16r_1_00b.brocade_hardware', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'fcoe'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'udld'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'bfd-vxlan'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'rpvst'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'xstp'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'lacp'), ('pybind.nos.v7_1_0.hardware.custom_profile.kap_custom_profile', u'bfd-l3'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'bfd-l3'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'lacp'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'bfd-vxlan'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'rpvst'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'fcoe'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'xstp'), ('pybind.nos.v7_0_1a.hardware.custom_profile.kap_custom_profile', u'udld'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'bfd-l3'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'xstp'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'fcoe'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'bfd-vxlan'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'udld'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'rpvst'), ('pybind.nos.v6_0_2b.hardware.custom_profile.kap_custom_profile', u'lacp'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'lacp'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'bfd-l3'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'udld'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'rpvst'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'fcoe'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'bfd-vxlan'), ('pybind.slxos.v16r_1_00b.hardware.custom_profile.kap_custom_profile', u'xstp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'kap_custom_profile', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, kap_custom_profile=kap_custom_profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def hardware_flexport_get(self, flexport=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type flexport: id
    :param flexport: Keyword argument tuple.

    :type id: unicode
    :param id: **flexport** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.flexport', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.flexport', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.flexport', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.hardware.flexport', u'flexport_type'), ('pybind.nos.v7_1_0.hardware.flexport', u'flexport_type'), ('pybind.nos.v6_0_2b.hardware.flexport', u'flexport_type')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flexport', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flexport=flexport)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def hardware_port_group_get(self, port_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type port_group: name
    :param port_group: Keyword argument tuple.

    :type name: unicode
    :param name: **port_group** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hardware.port_group', 'pybind.nos.v6_0_2b.brocade_hardware', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hardware.port_group', 'pybind.nos.v7_0_1a.brocade_hardware', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hardware.port_group', 'pybind.nos.v7_1_0.brocade_hardware', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.hardware.port_group', 'pybind.slxos.v16r_1_00b.brocade_hardware', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.hardware.port_group', u'mode'), ('pybind.nos.v7_1_0.hardware.port_group', u'mode'), ('pybind.nos.v6_0_2b.hardware.port_group', u'mode')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_group', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_group=port_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def http_server_use_vrf_get(self, use_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type use_vrf: use_vrf_name, http_vrf_shutdown
    :param use_vrf: Keyword argument tuple.

    :type use_vrf_name: unicode
    :param use_vrf_name: **use_vrf** tuple argument.

        * length restriction: ::

            ['0..max']

    :type http_vrf_shutdown: YANGBool
    :param http_vrf_shutdown: **use_vrf** tuple argument:  Shutdown HTTP/HTTPS server on the given vrf

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_0_1a.http_sa.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_http_config', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.http_sa.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_http_config', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.http_sa.http.server.http_vrf_cont.use_vrf', 'pybind.slxos.v16r_1_00b.brocade_http_config', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, secure_and_plain, http_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, use_vrf=use_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_get(self, igmp_groups=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmp_groups: group_addr, interface_name
    :param igmp_groups: Keyword argument tuple.

    :type group_addr: unicode
    :param group_addr: **igmp_groups** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface_name: unicode
    :param interface_name: **igmp_groups** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp-groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_', u'igmpv3-sources')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_groups', 'keyval': 'group_addr, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_get(self, igmp_groups=None, igmp_groups_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_groups: group_addr, interface_name
    :param igmp_groups: Keyword argument tuple.

    :type group_addr: unicode
    :param group_addr: **igmp_groups** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface_name: unicode
    :param interface_name: **igmp_groups** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type igmp_groups_: group_addr, interface_name
    :param igmp_groups_: Keyword argument tuple.

    :type group_addr: long
    :param group_addr: **igmp_groups_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type interface_name: unicode
    :param interface_name: **igmp_groups_** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_groups_', 'keyval': 'group_addr, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmp_groups_=igmp_groups_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_expiry_time_get(self, igmp_groups=None, expiry_time=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_groups: group_addr, interface_name
    :param igmp_groups: Keyword argument tuple.

    :type group_addr: unicode
    :param group_addr: **igmp_groups** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface_name: unicode
    :param interface_name: **igmp_groups** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type expiry_time: group_addr, interface_name
    :param expiry_time: Keyword argument tuple.

    :type group_addr: long
    :param group_addr: **expiry_time** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type interface_name: unicode
    :param interface_name: **expiry_time** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'expiry_time', 'keyval': 'group_addr, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, expiry_time=expiry_time)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_igmpv3_sources_get(self, igmp_groups=None, igmpv3_sources=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_groups: group_addr, interface_name
    :param igmp_groups: Keyword argument tuple.

    :type group_addr: unicode
    :param group_addr: **igmp_groups** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface_name: unicode
    :param interface_name: **igmp_groups** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type igmpv3_sources: interface_name
    :param igmpv3_sources: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmpv3_sources** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', u'incl-src-ip'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', u'excl-src-ip')]
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmpv3_sources', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmpv3_sources=igmpv3_sources)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_igmpv3_sources_excl_src_ip_get(self, igmp_groups=None, igmpv3_sources=None, excl_src_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_groups: group_addr, interface_name
    :param igmp_groups: Keyword argument tuple.

    :type group_addr: unicode
    :param group_addr: **igmp_groups** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface_name: unicode
    :param interface_name: **igmp_groups** tuple argument.

    :type igmpv3_sources: interface_name
    :param igmpv3_sources: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmpv3_sources** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type excl_src_ip: ipv4_addr
    :param excl_src_ip: Keyword argument tuple.

    :type ipv4_addr: long
    :param ipv4_addr: **excl_src_ip** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', u'igmpv3_sources')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources.excl_src_ip', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}, {'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'excl_src_ip', 'keyval': 'ipv4_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmpv3_sources=igmpv3_sources, excl_src_ip=excl_src_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_groups_igmp_groups_igmpv3_sources_incl_src_ip_get(self, igmp_groups=None, igmpv3_sources=None, incl_src_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_groups: group_addr, interface_name
    :param igmp_groups: Keyword argument tuple.

    :type group_addr: unicode
    :param group_addr: **igmp_groups** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface_name: unicode
    :param interface_name: **igmp_groups** tuple argument.

    :type igmpv3_sources: interface_name
    :param igmpv3_sources: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmpv3_sources** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type incl_src_ip: ipv4_addr
    :param incl_src_ip: Keyword argument tuple.

    :type ipv4_addr: long
    :param ipv4_addr: **incl_src_ip** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups', u'igmp_groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources', u'igmpv3_sources')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_groups.igmp_groups_.igmpv3_sources.incl_src_ip', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_addr, interface_name', 'extra_keyval': ''}, {'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'incl_src_ip', 'keyval': 'ipv4_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_groups=igmp_groups, igmpv3_sources=igmpv3_sources, incl_src_ip=incl_src_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_l3_interfaces_get(self, igmp_l3_interfaces=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmp_l3_interfaces: interface_name
    :param igmp_l3_interfaces: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmp_l3_interfaces** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', u'igmp-l3-interfaces')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_l3_interfaces', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_l3_interfaces=igmp_l3_interfaces)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_l3_interfaces_igmp_l3_interfaces_get(self, igmp_l3_interfaces=None, igmp_l3_interfaces_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_l3_interfaces: interface_name
    :param igmp_l3_interfaces: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmp_l3_interfaces** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type igmp_l3_interfaces_: interface_name
    :param igmp_l3_interfaces_: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmp_l3_interfaces_** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', u'igmp_l3_interfaces')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces.igmp_l3_interfaces', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_l3_interfaces_', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_l3_interfaces=igmp_l3_interfaces, igmp_l3_interfaces_=igmp_l3_interfaces_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_l3_interfaces_igmp_l3_interfaces_igmp_querier_get(self, igmp_l3_interfaces=None, igmp_querier=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_l3_interfaces: interface_name
    :param igmp_l3_interfaces: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmp_l3_interfaces** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type igmp_querier: interface_name
    :param igmp_querier: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmp_querier** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces', u'igmp_l3_interfaces')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_l3_interfaces.igmp_l3_interfaces_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_querier', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_l3_interfaces=igmp_l3_interfaces, igmp_querier=igmp_querier)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_multicast_snooping_vlans_get(self, igmp_multicast_snooping_vlans=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmp_multicast_snooping_vlans: vlan_id
    :param igmp_multicast_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_multicast_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', u'igmp-multicast-snooping-vlans')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_multicast_snooping_vlans', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_multicast_snooping_vlans=igmp_multicast_snooping_vlans)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_multicast_snooping_vlans_igmp_multicast_snooping_vlans_get(self, igmp_multicast_snooping_vlans=None, igmp_multicast_snooping_vlans_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_multicast_snooping_vlans: vlan_id
    :param igmp_multicast_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_multicast_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type igmp_multicast_snooping_vlans_: vlan_id
    :param igmp_multicast_snooping_vlans_: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_multicast_snooping_vlans_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', u'igmp_multicast_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_multicast_snooping_vlans_', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_multicast_snooping_vlans=igmp_multicast_snooping_vlans, igmp_multicast_snooping_vlans_=igmp_multicast_snooping_vlans_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_multicast_snooping_vlans_igmp_multicast_snooping_vlans_igmp_sn_status_get(self, igmp_multicast_snooping_vlans=None, igmp_sn_status=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_multicast_snooping_vlans: vlan_id
    :param igmp_multicast_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_multicast_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type igmp_sn_status: vlan_id
    :param igmp_sn_status: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_sn_status** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans', u'igmp_multicast_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_sn_status', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_multicast_snooping_vlans=igmp_multicast_snooping_vlans, igmp_sn_status=igmp_sn_status)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_mrouters_get(self, igmp_snooping_mrouters=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmp_snooping_mrouters: vlan_id
    :param igmp_snooping_mrouters: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_mrouters** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', u'igmp-snooping-mrouters')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_mrouters', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_mrouters=igmp_snooping_mrouters)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_mrouters_igmp_snooping_mrouters_get(self, igmp_snooping_mrouters=None, igmp_snooping_mrouters_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_snooping_mrouters: vlan_id
    :param igmp_snooping_mrouters: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_mrouters** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type igmp_snooping_mrouters_: vlan_id
    :param igmp_snooping_mrouters_: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_mrouters_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', u'igmp_snooping_mrouters')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters.igmp_snooping_mrouters', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_mrouters_', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_mrouters=igmp_snooping_mrouters, igmp_snooping_mrouters_=igmp_snooping_mrouters_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_mrouters_igmp_snooping_mrouters_expiry_time_get(self, igmp_snooping_mrouters=None, expiry_time=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_snooping_mrouters: vlan_id
    :param igmp_snooping_mrouters: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_mrouters** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type expiry_time: vlan_id
    :param expiry_time: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **expiry_time** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters', u'igmp_snooping_mrouters')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_mrouters.igmp_snooping_mrouters_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'expiry_time', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_mrouters=igmp_snooping_mrouters, expiry_time=expiry_time)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_get(self, igmp_snooping_vlans=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmp_snooping_vlans: vlan_id
    :param igmp_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans_', u'vlan-groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp-snooping-vlans')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_vlans', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_igmp_snooping_vlans_get(self, igmp_snooping_vlans=None, igmp_snooping_vlans_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_snooping_vlans: vlan_id
    :param igmp_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type igmp_snooping_vlans_: vlan_id
    :param igmp_snooping_vlans_: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_vlans_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmp_snooping_vlans_', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans, igmp_snooping_vlans_=igmp_snooping_vlans_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_igmp_snooping_vlans_fast_leave_get(self, igmp_snooping_vlans=None, fast_leave=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_snooping_vlans: vlan_id
    :param igmp_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type fast_leave: vlan_id
    :param fast_leave: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **fast_leave** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'fast_leave', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans, fast_leave=fast_leave)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_snooping_vlans_igmp_snooping_vlans_vlan_groups_get(self, igmp_snooping_vlans=None, vlan_groups=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type igmp_snooping_vlans: vlan_id
    :param igmp_snooping_vlans: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **igmp_snooping_vlans** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vlan_groups: grp_ip_addr
    :param vlan_groups: Keyword argument tuple.

    :type grp_ip_addr: long
    :param grp_ip_addr: **vlan_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans', u'igmp_snooping_vlans')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_snooping_vlans.igmp_snooping_vlans_.vlan_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan_groups', 'keyval': 'grp_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_snooping_vlans=igmp_snooping_vlans, vlan_groups=vlan_groups)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_statistics_igmp_statistics_get(self, igmp_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmp_statistics: interface_name
    :param igmp_statistics: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **igmp_statistics** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_statistics.igmp_statistics', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmp_statistics', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmp_statistics=igmp_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_igmp_statistics_igmp_statistics_error_bad_checksum_get(self, error_bad_checksum=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type error_bad_checksum: interface_name
    :param error_bad_checksum: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **error_bad_checksum** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.igmp_statistics.igmp_statistics_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'error_bad_checksum', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, error_bad_checksum=error_bad_checksum)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_multicast_ssm_mapping_ssm_maps_get(self, ssm_maps=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ssm_maps: prefix_list_name
    :param ssm_maps: Keyword argument tuple.

    :type prefix_list_name: unicode
    :param prefix_list_name: **ssm_maps** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.multicast_ssm_mapping.ssm_maps', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ssm_maps', 'keyval': 'prefix_list_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ssm_maps=ssm_maps)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_get(self, pim_snp_groups=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type pim_snp_groups: vlan_id
    :param pim_snp_groups: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_', u'pim-snp-wg-member-ports'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim-snp-groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_', u'pim-snp-sources')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'pim_snp_groups', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_get(self, pim_snp_groups=None, pim_snp_groups_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_snp_groups: vlan_id
    :param pim_snp_groups: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type pim_snp_groups_: group_addr, vlan_id
    :param pim_snp_groups_: Keyword argument tuple.

    :type group_addr: long
    :param group_addr: **pim_snp_groups_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_groups_', 'keyval': 'group_addr, vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_groups_=pim_snp_groups_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_expiry_time_get(self, pim_snp_groups=None, expiry_time=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_snp_groups: vlan_id
    :param pim_snp_groups: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type expiry_time: group_addr, vlan_id
    :param expiry_time: Keyword argument tuple.

    :type group_addr: long
    :param group_addr: **expiry_time** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan_id: long
    :param vlan_id: **expiry_time** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'expiry_time', 'keyval': 'group_addr, vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, expiry_time=expiry_time)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_pim_snp_sources_get(self, pim_snp_groups=None, pim_snp_sources=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_snp_groups: vlan_id
    :param pim_snp_groups: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type pim_snp_sources: src_addr
    :param pim_snp_sources: Keyword argument tuple.

    :type src_addr: long
    :param src_addr: **pim_snp_sources** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources', u'pim-snp-sg-member-ports')]
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_sources', 'keyval': 'src_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_sources=pim_snp_sources)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_pim_snp_sources_pim_snp_sg_member_ports_get(self, pim_snp_groups=None, pim_snp_sources=None, pim_snp_sg_member_ports=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_snp_groups: vlan_id
    :param pim_snp_groups: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type pim_snp_sources: src_addr
    :param pim_snp_sources: Keyword argument tuple.

    :type src_addr: long
    :param src_addr: **pim_snp_sources** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type pim_snp_sg_member_ports: interface_name
    :param pim_snp_sg_member_ports: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **pim_snp_sg_member_ports** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups'), ('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources', u'pim_snp_sources')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_sources.pim_snp_sg_member_ports', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}, {'keyval': 'src_addr', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_sg_member_ports', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_sources=pim_snp_sources, pim_snp_sg_member_ports=pim_snp_sg_member_ports)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def igmp_snooping_state_pim_snp_groups_pim_snp_groups_pim_snp_wg_member_ports_get(self, pim_snp_groups=None, pim_snp_wg_member_ports=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_snp_groups: vlan_id
    :param pim_snp_groups: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **pim_snp_groups** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type pim_snp_wg_member_ports: interface_name
    :param pim_snp_wg_member_ports: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **pim_snp_wg_member_ports** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups', u'pim_snp_groups')]
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping_state.pim_snp_groups.pim_snp_groups_.pim_snp_wg_member_ports', 'pybind.slxos.v16r_1_00b.brocade_mc_hms_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_snp_wg_member_ports', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_snp_groups=pim_snp_groups, pim_snp_wg_member_ports=pim_snp_wg_member_ports)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_get(self, ethernet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1.md5_authentication', u'key-table'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'dot1x'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.address', u'suppressing-address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_reverse_metric', u'rev-metric-common-attributes'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1', u'database-filter'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'ipv6'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos', u'trust'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'vrrpv3-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet.lldp', u'cee'), ('pybind.slxos.v16r_1_00b.interface.ethernet.fabric', u'fabric-dport'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-dns-server'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.auth_check', u'auth-check-level2'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.intf_ipv6_router_isis', u'int-ipv6-router-isis'), ('pybind.slxos.v16r_1_00b.interface.ethernet.mac', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'vrrp'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip_acl_interface.ip', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'switchport-basic'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.slxos.v16r_1_00b.interface.ethernet.track', u'remove'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis', u'interface-hello-multiplier'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'bfd'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'lldp'), ('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree', u'edgeport'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'fcoeport'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip', u'icmp'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1', u'bfd'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.intf_router_isis', u'int-router-isis'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis', u'interface-bfd'), ('pybind.slxos.v16r_1_00b.interface.ethernet.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue.multicast', u'queue-size'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis', u'interface-hello-interval'), ('pybind.slxos.v16r_1_00b.interface.ethernet.rmon.collection', u'ether-stats-entry'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip', u'ip-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'rpf-mode'), ('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.flowcontrol', u'pfc'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'link-fault-signaling'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security', u'sticky'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue.unicast', u'queue-size'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.storm_control', u'ingress'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1', u'md5-authentication'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport', u'access'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'vrrpv3e-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'icmpv6'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.slxos.v16r_1_00b.interface.ethernet.openflow', u'protected-vlans'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'qos'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'track'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_auth_mode', u'interface-md5'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport', u'mode'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.igmp_phy_intf_cfg.igmp', u'igmpl3-static-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree', u'instance'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'connectivity'), ('pybind.slxos.v16r_1_00b.interface.ethernet.dot1x', u'timeout'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'router-preference'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'vepa'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.delay_link_event', u'delay-link'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.ip_config', u'address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1.authentication_key', u'auth-key-table'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.slxos.v16r_1_00b.interface.ethernet.openflow', u'enableinterfacelevel'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue', u'cos-threshold'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_hello', u'interface-hello-padding'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'edge-loop-detection'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.policy', u'route-map'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk', u'default-vlan-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree', u'portfast'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue', u'multicast'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos', u'drop-monitor'), ('pybind.slxos.v16r_1_00b.interface.ethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.slxos.v16r_1_00b.interface.ethernet.track', u'interface'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis', u'interface-metric'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'lacp'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_config', u'address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'ipv6-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet.fabric', u'neighbor-discovery'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.auth_check', u'auth-check-level1'), ('pybind.slxos.v16r_1_00b.interface.ethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'udld'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'rpf'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf.ospf1.md5_authentication', u'no-encrypt-key-table'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis', u'interface-auth-key'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'vrf'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'spanning-tree'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_ipv6', u'interface-ipv6-metric'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_dhcp_conf.dhcp.relay', u'servers'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'link-error-disable'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'channel-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'service-policy'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.ethernet.fabric', u'fabric-isl'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis', u'interface-priority'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access', u'rspan-access'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.slxos.v16r_1_00b.interface.ethernet.fabric', u'fabric-trunk'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis', u'interface-isis'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_dhcp_conf.dhcp', u'relay'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.random_detect', u'traffic-class'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_ospf_conf', u'ospf1'), ('pybind.slxos.v16r_1_00b.interface.ethernet', u'sflow'), ('pybind.slxos.v16r_1_00b.interface.ethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'address'), ('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport', u'port-security'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk', u'tag'), ('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree', u'guard'), ('pybind.slxos.v16r_1_00b.interface.ethernet.rmon.collection', u'history-control-entry'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-domain-name')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ethernet', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ip_access_group_get(self, ethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip_acl_interface.ip.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ip_address_get(self, ethernet=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ip_dhcp_relay_get(self, ethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.interface_eth_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ip_igmp_static_group_get(self, ethernet=None, igmpl3_static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type igmpl3_static_group: igmpl3_sg_addr
    :param igmpl3_static_group: Keyword argument tuple.

    :type igmpl3_sg_addr: unicode
    :param igmpl3_sg_addr: **igmpl3_static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ip.igmp_phy_intf_cfg.igmp.igmpl3_static_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmpl3_static_group', 'keyval': 'igmpl3_sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, igmpl3_static_group=igmpl3_static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_access_group_get(self, ethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_address_get(self, ethernet=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_dhcp_relay_get(self, ethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_nd_address_get(self, ethernet=None, suppressing_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type suppressing_address: suppress_ipv6_address, suppress_per_address
    :param suppressing_address: Keyword argument tuple.

    :type suppress_ipv6_address: unicode
    :param suppress_ipv6_address: **suppressing_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type suppress_per_address: YANGBool
    :param suppress_per_address: **suppressing_address** tuple argument:  Suppress all IPv6 addresses in router advertisement

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.address.suppressing_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'suppressing_address', 'keyval': 'suppress_ipv6_address', 'extra_keyval': 'suppress_ipv6_address, suppress_per_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, suppressing_address=suppressing_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_nd_prefix_get(self, ethernet=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_nd_ra_dns_server_get(self, ethernet=None, ra_dns_server=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ra_dns_server: dns_server_prefix
    :param ra_dns_server: Keyword argument tuple.

    :type dns_server_prefix: unicode
    :param dns_server_prefix: **ra_dns_server** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_dns_server', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_dns_server', 'keyval': 'dns_server_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ra_dns_server=ra_dns_server)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_nd_ra_domain_name_get(self, ethernet=None, ra_domain_name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ra_domain_name: domain_name_string
    :param ra_domain_name: Keyword argument tuple.

    :type domain_name_string: unicode
    :param domain_name_string: **ra_domain_name** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_domain_name', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_domain_name', 'keyval': 'domain_name_string', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ra_domain_name=ra_domain_name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_neighbor_get(self, ethernet=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_extended_group_get(self, ethernet=None, vrrpv3e_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_extended_group_track_get(self, ethernet=None, vrrpv3e_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_extended_group_virtual_ip_get(self, ethernet=None, vrrpv3e_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_group_get(self, ethernet=None, vrrpv3_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3_group=vrrpv3_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_group_track_get(self, ethernet=None, vrrpv3_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_ipv6_vrrp_group_virtual_ip_get(self, ethernet=None, vrrpv3_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_isis_auth_key_get(self, ethernet=None, interface_auth_key=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface_auth_key: interface_auth_key_level, interface_auth_key_str
    :param interface_auth_key: Keyword argument tuple.

    :type interface_auth_key_level: unicode
    :param interface_auth_key_level: **interface_auth_key** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_auth_key_str: unicode
    :param interface_auth_key_str: **interface_auth_key** tuple argument.

        * length restriction: ::

            ['1..63']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_auth_key', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_auth_key', 'keyval': 'interface_auth_key_level', 'extra_keyval': 'interface_auth_key_level, interface_auth_key_str'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_auth_key=interface_auth_key)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_isis_hello_interval_get(self, ethernet=None, interface_hello_interval=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface_hello_interval: interface_hello_interval_level, interface_hello_interval_val
    :param interface_hello_interval: Keyword argument tuple.

    :type interface_hello_interval_level: unicode
    :param interface_hello_interval_level: **interface_hello_interval** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_hello_interval_val: long
    :param interface_hello_interval_val: **interface_hello_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_hello_interval', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_interval', 'keyval': 'interface_hello_interval_level', 'extra_keyval': 'interface_hello_interval_level, interface_hello_interval_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_hello_interval=interface_hello_interval)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_isis_hello_multiplier_get(self, ethernet=None, interface_hello_multiplier=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface_hello_multiplier: interface_hello_multiplier_level, interface_hello_multiplier_val
    :param interface_hello_multiplier: Keyword argument tuple.

    :type interface_hello_multiplier_level: unicode
    :param interface_hello_multiplier_level: **interface_hello_multiplier** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_hello_multiplier_val: long
    :param interface_hello_multiplier_val: **interface_hello_multiplier** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_hello_multiplier', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_multiplier', 'keyval': 'interface_hello_multiplier_level', 'extra_keyval': 'interface_hello_multiplier_level, interface_hello_multiplier_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_hello_multiplier=interface_hello_multiplier)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_isis_ipv6_metric_get(self, ethernet=None, interface_ipv6_metric=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface_ipv6_metric: interface_ipv6_metric_level, interface_ipv6_metric_val
    :param interface_ipv6_metric: Keyword argument tuple.

    :type interface_ipv6_metric_level: unicode
    :param interface_ipv6_metric_level: **interface_ipv6_metric** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_ipv6_metric_val: long
    :param interface_ipv6_metric_val: **interface_ipv6_metric** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_ipv6.interface_ipv6_metric', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_ipv6_metric', 'keyval': 'interface_ipv6_metric_level', 'extra_keyval': 'interface_ipv6_metric_level, interface_ipv6_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_ipv6_metric=interface_ipv6_metric)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_isis_metric_get(self, ethernet=None, interface_metric=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface_metric: interface_metric_level, interface_metric_val
    :param interface_metric: Keyword argument tuple.

    :type interface_metric_level: unicode
    :param interface_metric_level: **interface_metric** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_metric_val: long
    :param interface_metric_val: **interface_metric** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.interface_eth_isis_conf.intf_isis.interface_isis.interface_metric', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_metric', 'keyval': 'interface_metric_level', 'extra_keyval': 'interface_metric_level, interface_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface_metric=interface_metric)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_logical_interface_ethernet_get(self, ethernet=None, ethernet_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ethernet_: instance_id
    :param ethernet_: Keyword argument tuple.

    :type instance_id: unicode
    :param instance_id: **ethernet_** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9])(:[1-4])?)'
            '(\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-9][0-9]'
            '[0-9][0-9]|1[0-2][0-2][0-8][0-8]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface.ethernet', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface.ethernet.cmd_container_dummy.service_instance_vlan_cmds_dummy_container', u'tagged-outer-vlan'), ('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface.ethernet.cmd_container_dummy.service_instance_common_commands_dummy', u'name'), ('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface.ethernet.cmd_container_dummy.service_instance_common_commands_dummy', u'shutdown'), ('pybind.slxos.v16r_1_00b.interface.ethernet.logical_interface.ethernet.cmd_container_dummy.service_instance_vlan_cmds_dummy_container.get_untagged_vlan_dummy.untagged', u'untagged-vlan')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ethernet_', 'keyval': 'instance_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ethernet_=ethernet_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_mac_access_group_get(self, ethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.mac.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_port_profile_port_profile_get(self, ethernet=None, port_to_port_profile_associations=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_to_port_profile_associations: port_to_port_profile_association
    :param port_to_port_profile_associations: Keyword argument tuple.

    :type port_to_port_profile_association: unicode
    :param port_to_port_profile_association: **port_to_port_profile_associations** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_qos_flowcontrol_pfc_get(self, ethernet=None, pfc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type pfc: pfc_cos
    :param pfc: Keyword argument tuple.

    :type pfc_cos: int
    :param pfc_cos: **pfc** tuple argument:  0-7;;CoS value

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.flowcontrol.pfc', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, pfc=pfc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_qos_random_detect_traffic_class_get(self, ethernet=None, traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type traffic_class: red_tc_value
    :param traffic_class: Keyword argument tuple.

    :type red_tc_value: int
    :param red_tc_value: **traffic_class** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.random_detect.traffic_class', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, traffic_class=traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_qos_rx_queue_multicast_get(self, ethernet=None, queue_size=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type queue_size: traffic_class, min_queue_size, max_queue_size
    :param queue_size: Keyword argument tuple.

    :type traffic_class: int
    :param traffic_class: **queue_size** tuple argument:  Traffic class to configure multicast queue size

        * range restriction: ::

            ['0..255']

    :type min_queue_size: long
    :param min_queue_size: **queue_size** tuple argument:  Configure minimum queue size

        * range restriction: ::

            ['0..4294967295']

    :type max_queue_size: long
    :param max_queue_size: **queue_size** tuple argument:  Configure maximum queue size

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue.multicast.queue_size', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue_size', 'keyval': 'traffic_class', 'extra_keyval': 'traffic_class, min_queue_size, max_queue_size'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, queue_size=queue_size)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_qos_rx_queue_unicast_get(self, ethernet=None, queue_size=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type queue_size: traffic_class, min_queue_size, max_queue_size
    :param queue_size: Keyword argument tuple.

    :type traffic_class: int
    :param traffic_class: **queue_size** tuple argument:  Traffic class to configure unicast queue size

        * range restriction: ::

            ['0..255']

    :type min_queue_size: long
    :param min_queue_size: **queue_size** tuple argument:  Configure minimum queue size

        * range restriction: ::

            ['0..4294967295']

    :type max_queue_size: long
    :param max_queue_size: **queue_size** tuple argument:  Configure maximum queue size

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.qos.rx_queue.unicast.queue_size', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue_size', 'keyval': 'traffic_class', 'extra_keyval': 'traffic_class, min_queue_size, max_queue_size'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, queue_size=queue_size)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_rmon_collection_history_get(self, ethernet=None, history_control_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type history_control_entry: history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner
    :param history_control_entry: Keyword argument tuple.

    :type history_control_index: long
    :param history_control_index: **history_control_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_buckets_requested: long
    :param history_control_buckets_requested: **history_control_entry** tuple argument:  Buckets (default 50)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_interval: long
    :param history_control_interval: **history_control_entry** tuple argument:  Polling Interval (default 1800)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_owner: unicode
    :param history_control_owner: **history_control_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.rmon.collection.history_control_entry', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, history_control_entry=history_control_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_rmon_collection_stats_get(self, ethernet=None, ether_stats_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ether_stats_entry: ether_stats_index, ether_stats_owner
    :param ether_stats_entry: Keyword argument tuple.

    :type ether_stats_index: long
    :param ether_stats_index: **ether_stats_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type ether_stats_owner: unicode
    :param ether_stats_owner: **ether_stats_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.rmon.collection.ether_stats_entry', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ether_stats_entry=ether_stats_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_spanning_tree_instance_get(self, ethernet=None, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree.instance', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_spanning_tree_vlan_get(self, ethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.spanning_tree.vlan', u'guard')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_storm_control_ingress_get(self, ethernet=None, ingress=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ingress: protocol_type, rate_format, rate_bps, rate_percent, bum_action
    :param ingress: Keyword argument tuple.

    :type protocol_type: unicode
    :param protocol_type: **ingress** tuple argument.

        * enumeration restriction: ::

            ['broadcast', 'unknown-unicast', 'multicast']

    :type rate_format: unicode
    :param rate_format: **ingress** tuple argument.

        * enumeration restriction: ::

            ['limit-bps', 'limit-percent']

    :type rate_bps: long
    :param rate_bps: **ingress** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type rate_percent: long
    :param rate_percent: **ingress** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bum_action: unicode
    :param bum_action: **ingress** tuple argument.

        * enumeration restriction: ::

            ['monitor', 'shutdown']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.storm_control.ingress', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, ingress=ingress)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_group_rspan_vlan_classification_access_rspan_vlan_get(self, ethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_group_vlan_classification_access_vlan_get(self, ethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_rspan_vlan_classification_access_rspan_vlan_get(self, ethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_address
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_address: unicode
    :param access_mac_address: **vlan** tuple argument:  Associate the Mac address with a vlan

        * pattern restriction: ::

            '[0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_access_mac_vlan_classification_access_vlan_get(self, ethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_address
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_address: unicode
    :param access_mac_address: **vlan** tuple argument:  Associate the Mac address with a vlan

        * pattern restriction: ::

            '[0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_port_security_get(self, ethernet=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

        * pattern restriction: ::

            '[0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}'

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_port_security_sticky_get(self, ethernet=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

        * pattern restriction: ::

            '[0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}'

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_get(self, ethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_get(self, ethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_get(self, ethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_get(self, ethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_track_interface_get(self, ethernet=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface: track_interface_type, track_interface_name
    :param interface: Keyword argument tuple.

    :type track_interface_type: unicode
    :param track_interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type track_interface_name: unicode
    :param track_interface_name: **interface** tuple argument:  Interface name

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(('
            '[0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]'
            ')(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5'
            '][0-9]{3}|6[0-1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_vrrp_group_get(self, ethernet=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp.track', u'interface'), ('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp.arp', u'unicast-request')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_vrrp_group_track_get(self, ethernet=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ethernet_vrrp_group_virtual_ip_get(self, ethernet=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ethernet: name
    :param ethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **ethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address in dotted decimal

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.ethernet', u'ethernet'), ('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.ethernet.vrrp.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ethernet=ethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fcoe_get(self, fcoe=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type fcoe: fcoe_interface_name
    :param fcoe: Keyword argument tuple.

    :type fcoe_interface_name: unicode
    :param fcoe_interface_name: **fcoe** tuple argument.

        * length restriction: ::

            ['3..32']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.fcoe', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fcoe', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fcoe', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.fcoe', u'fcoe-interface-bind'), ('pybind.nos.v6_0_2b.interface.fcoe', u'fcoe-interface-bind'), ('pybind.nos.v7_0_1a.interface.fcoe', u'fcoe-interface-bind')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fcoe', 'keyval': 'fcoe_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fcoe=fcoe)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fibrechannel_get(self, fc_port=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type fc_port: name
    :param fc_port: Keyword argument tuple.

    :type name: unicode
    :param name: **fc_port** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.fc_port', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fc_port', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fc_port', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fc_port', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fc_port=fc_port)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_get(self, fortygigabitethernet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport', u'access'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'lldp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.track', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'service-policy'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'tunnel'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.lldp', u'cee'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'dot1x'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'vrrp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'sflow'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos', u'trust'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'udld'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip', u'icmp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'connectivity'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'switchport-basic'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'bfd'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fcoeport'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.mac', u'access-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'ipv6'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'track'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'qos'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport', u'mode'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'vrf'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'spanning-tree'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.track', u'remove'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'channel-group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.bfd', u'interval'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.snmp', u'trap'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'lacp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport', u'mode'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'service-policy'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos', u'trust'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'vrf'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'connectivity'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'qos'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'switchport-basic'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.mac', u'access-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport', u'access'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.snmp', u'trap'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.bfd', u'interval'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'vrrp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'ipv6'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'lacp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fcoeport'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.track', u'interface'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'track'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'bfd'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'udld'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'tunnel'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'channel-group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'dot1x'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.track', u'remove'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'sflow'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'spanning-tree'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'lldp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.lldp', u'cee'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'service-policy'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fcoeport'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.bfd', u'interval'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.lldp', u'cee'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.track', u'interface'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'lacp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'bpdu-drop'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'tunnel'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'qos'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.dot1x', u'timeout'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'track'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'channel-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.snmp', u'trap'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'bfd'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'edge-loop-detection'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos', u'trust'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip', u'ip-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'vrf'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'dot1x'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'connectivity'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'vrrp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.track', u'remove'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport', u'access'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.storm_control', u'ingress'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'udld'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'ipv6'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'sflow'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'switchport-basic'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport', u'port-security'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip', u'icmp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'lldp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport', u'mode'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'spanning-tree')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'fortygigabitethernet', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ip_access_group_get(self, fortygigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ip_address_get(self, fortygigabitethernet=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ip_dhcp_relay_get(self, fortygigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.interface_fo_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ip_igmp_static_group_get(self, fortygigabitethernet=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type static_group: sg_addr
    :param static_group: Keyword argument tuple.

    :type sg_addr: unicode
    :param sg_addr: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_access_group_get(self, fortygigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_address_get(self, fortygigabitethernet=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_dhcp_relay_get(self, fortygigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_nd_prefix_get(self, fortygigabitethernet=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_neighbor_get(self, fortygigabitethernet=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_extended_group_get(self, fortygigabitethernet=None, vrrpv3e_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_extended_group_track_get(self, fortygigabitethernet=None, vrrpv3e_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_extended_group_virtual_ip_get(self, fortygigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_group_get(self, fortygigabitethernet=None, vrrpv3_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_group_track_get(self, fortygigabitethernet=None, vrrpv3_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_ipv6_vrrp_group_virtual_ip_get(self, fortygigabitethernet=None, vrrpv3_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_mac_access_group_get(self, fortygigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_port_profile_port_profile_get(self, fortygigabitethernet=None, port_to_port_profile_associations=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_to_port_profile_associations: port_to_port_profile_association
    :param port_to_port_profile_associations: Keyword argument tuple.

    :type port_to_port_profile_association: unicode
    :param port_to_port_profile_association: **port_to_port_profile_associations** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_qos_flowcontrol_pfc_get(self, fortygigabitethernet=None, pfc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type pfc: pfc_cos
    :param pfc: Keyword argument tuple.

    :type pfc_cos: long
    :param pfc_cos: **pfc** tuple argument:  0-7;;CoS value

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, pfc=pfc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_qos_random_detect_traffic_class_get(self, fortygigabitethernet=None, traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type traffic_class: red_tc_value
    :param traffic_class: Keyword argument tuple.

    :type red_tc_value: long
    :param red_tc_value: **traffic_class** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, traffic_class=traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_rmon_collection_history_get(self, fortygigabitethernet=None, history_control_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type history_control_entry: history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner
    :param history_control_entry: Keyword argument tuple.

    :type history_control_index: long
    :param history_control_index: **history_control_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_buckets_requested: long
    :param history_control_buckets_requested: **history_control_entry** tuple argument:  Buckets (default 50)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_interval: long
    :param history_control_interval: **history_control_entry** tuple argument:  Polling Interval (default 1800)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_owner: unicode
    :param history_control_owner: **history_control_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, history_control_entry=history_control_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_rmon_collection_stats_get(self, fortygigabitethernet=None, ether_stats_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ether_stats_entry: ether_stats_index, ether_stats_owner
    :param ether_stats_entry: Keyword argument tuple.

    :type ether_stats_index: long
    :param ether_stats_index: **ether_stats_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type ether_stats_owner: unicode
    :param ether_stats_owner: **ether_stats_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_spanning_tree_instance_get(self, fortygigabitethernet=None, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_spanning_tree_vlan_get(self, fortygigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.spanning_tree.vlan', u'guard')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_storm_control_ingress_get(self, fortygigabitethernet=None, ingress=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ingress: protocol_type, rate_format, rate_bps, rate_percent, bum_action
    :param ingress: Keyword argument tuple.

    :type protocol_type: unicode
    :param protocol_type: **ingress** tuple argument.

        * enumeration restriction: ::

            ['broadcast', 'unknown-unicast', 'multicast']

    :type rate_format: unicode
    :param rate_format: **ingress** tuple argument.

        * enumeration restriction: ::

            ['limit-bps', 'limit-percent']

    :type rate_bps: long
    :param rate_bps: **ingress** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type rate_percent: long
    :param rate_percent: **ingress** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bum_action: unicode
    :param bum_action: **ingress** tuple argument.

        * enumeration restriction: ::

            ['monitor', 'shutdown']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, ingress=ingress)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_access_rspan_vlan_get(self, fortygigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_access_vlan_get(self, fortygigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_port_security_get(self, fortygigabitethernet=None, allowed_ouis=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type allowed_ouis: oui
    :param allowed_ouis: Keyword argument tuple.

    :type oui: unicode
    :param oui: **allowed_ouis** tuple argument:  <OUI> OUI in HHHH.HH00.0000 format

        * pattern restriction: ::

            '[0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_port_security_sticky_get(self, fortygigabitethernet=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_association_trunk_get(self, fortygigabitethernet=None, trunk=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type trunk: trunk_pri_pvlan, trunk_sec_pvlan
    :param trunk: Keyword argument tuple.

    :type trunk_pri_pvlan: long
    :param trunk_pri_pvlan: **trunk** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type trunk_sec_pvlan: long
    :param trunk_sec_pvlan: **trunk** tuple argument:  Secondary vlan id 

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, trunk=trunk)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_mapping_get(self, fortygigabitethernet=None, mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type mapping: promis_pri_pvlan, oper, promis_sec_pvlan_range
    :param mapping: Keyword argument tuple.

    :type promis_pri_pvlan: long
    :param promis_pri_pvlan: **mapping** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type oper: unicode
    :param oper: **mapping** tuple argument.

        * enumeration restriction: ::

            ['add', 'delete']

    :type promis_sec_pvlan_range: unicode
    :param promis_sec_pvlan_range: **mapping** tuple argument:  Secondary vlan range

        * length restriction: ::

            ['1..253']

        * pattern restriction: ::

            '(([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|'
            '(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{'
            '1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9]'
            ')|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-'
            '7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]'
            '))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|('
            '80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, mapping=mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_get(self, fortygigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_get(self, fortygigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_add_get(self, fortygigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_get(self, fortygigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_add_get(self, fortygigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_remove_get(self, fortygigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_track_interface_get(self, fortygigabitethernet=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface: track_interface_type, track_interface_name
    :param interface: Keyword argument tuple.

    :type track_interface_type: unicode
    :param track_interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type track_interface_name: unicode
    :param track_interface_name: **interface** tuple argument:  Interface name

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(('
            '[0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]'
            ')(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5'
            '][0-9]{3}|6[0-1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_vlan_classifier_activate_group_get(self, fortygigabitethernet=None, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type group: groupid, vlan
    :param group: Keyword argument tuple.

    :type groupid: long
    :param groupid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan: long
    :param vlan: **group** tuple argument:  1-8191;;Vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_vrrp_group_get(self, fortygigabitethernet=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_vrrp_group_track_get(self, fortygigabitethernet=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_fortygigabitethernet_vrrp_group_virtual_ip_get(self, fortygigabitethernet=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type fortygigabitethernet: name
    :param fortygigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **fortygigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address in dotted decimal

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet', u'fortygigabitethernet'), ('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.fortygigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.fortygigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.fortygigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, fortygigabitethernet=fortygigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_get(self, gigabitethernet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.gigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'track'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'channel-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'lacp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'dot1x'), ('pybind.nos.v7_1_0.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos', u'trust'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.interface.gigabitethernet.bfd', u'interval'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'tunnel'), ('pybind.nos.v7_1_0.interface.gigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_1_0.interface.gigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'ipv6'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'qos'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'switchport-basic'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'sflow'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_1_0.interface.gigabitethernet.track', u'interface'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'vrrp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.snmp', u'trap'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'service-policy'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos.rcv_queue', u'cos-threshold'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport', u'access'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_1_0.interface.gigabitethernet.mac', u'access-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'connectivity'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_1_0.interface.gigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport', u'mode'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_1_0.interface.gigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'vrf'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'udld'), ('pybind.nos.v7_1_0.interface.gigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet.lldp', u'cee'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'lldp'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'spanning-tree'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.interface.gigabitethernet.track', u'remove'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.gigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_1_0.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'bfd'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'spanning-tree'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'track'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport', u'mode'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport', u'access'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'qos'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.snmp', u'trap'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.dot1x', u'timeout'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.lldp', u'cee'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'lldp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'udld'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'channel-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.storm_control', u'ingress'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'tunnel'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'vrf'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'service-policy'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport', u'port-security'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'connectivity'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'dot1x'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'ipv6'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'switchport-basic'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip', u'icmp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.qos.rcv_queue', u'cos-threshold'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'edge-loop-detection'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.track', u'interface'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'bpdu-drop'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'vrrp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'sflow'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip', u'ip-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.qos', u'trust'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'bfd'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'lacp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.track', u'remove'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.bfd', u'interval'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.track', u'remove'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.bfd', u'interval'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport', u'access'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.mac', u'access-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.snmp', u'trap'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos', u'trust'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'service-policy'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'channel-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport', u'mode'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'sflow'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'switchport-basic'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'spanning-tree'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'tunnel'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'qos'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'udld'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'lldp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'vrrp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'connectivity'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'lacp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'bfd'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'track'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'vrf'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.lldp', u'cee'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.track', u'interface'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'dot1x'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'ipv6'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip', u'icmp'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos.rcv_queue', u'cos-threshold'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.ip_config', u'unnumbered')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'gigabitethernet', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ip_access_group_get(self, gigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ip_address_get(self, gigabitethernet=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ip_dhcp_relay_get(self, gigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.interface_gi_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ip_igmp_static_group_get(self, gigabitethernet=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type static_group: sg_addr
    :param static_group: Keyword argument tuple.

    :type sg_addr: unicode
    :param sg_addr: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_access_group_get(self, gigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_address_get(self, gigabitethernet=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_dhcp_relay_get(self, gigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_nd_prefix_get(self, gigabitethernet=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_neighbor_get(self, gigabitethernet=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_extended_group_get(self, gigabitethernet=None, vrrpv3e_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_extended_group_track_get(self, gigabitethernet=None, vrrpv3e_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_extended_group_virtual_ip_get(self, gigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_group_get(self, gigabitethernet=None, vrrpv3_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_group_track_get(self, gigabitethernet=None, vrrpv3_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_ipv6_vrrp_group_virtual_ip_get(self, gigabitethernet=None, vrrpv3_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_mac_access_group_get(self, gigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_port_profile_port_profile_get(self, gigabitethernet=None, port_to_port_profile_associations=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_to_port_profile_associations: port_to_port_profile_association
    :param port_to_port_profile_associations: Keyword argument tuple.

    :type port_to_port_profile_association: unicode
    :param port_to_port_profile_association: **port_to_port_profile_associations** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_qos_random_detect_traffic_class_get(self, gigabitethernet=None, traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type traffic_class: red_tc_value
    :param traffic_class: Keyword argument tuple.

    :type red_tc_value: long
    :param red_tc_value: **traffic_class** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, traffic_class=traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_rmon_collection_history_get(self, gigabitethernet=None, history_control_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type history_control_entry: history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner
    :param history_control_entry: Keyword argument tuple.

    :type history_control_index: long
    :param history_control_index: **history_control_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_buckets_requested: long
    :param history_control_buckets_requested: **history_control_entry** tuple argument:  Buckets (default 50)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_interval: long
    :param history_control_interval: **history_control_entry** tuple argument:  Polling Interval (default 1800)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_owner: unicode
    :param history_control_owner: **history_control_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, history_control_entry=history_control_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_rmon_collection_stats_get(self, gigabitethernet=None, ether_stats_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ether_stats_entry: ether_stats_index, ether_stats_owner
    :param ether_stats_entry: Keyword argument tuple.

    :type ether_stats_index: long
    :param ether_stats_index: **ether_stats_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type ether_stats_owner: unicode
    :param ether_stats_owner: **ether_stats_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_spanning_tree_instance_get(self, gigabitethernet=None, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_spanning_tree_vlan_get(self, gigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v7_1_0.interface.gigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.spanning_tree.vlan', u'guard')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_storm_control_ingress_get(self, gigabitethernet=None, ingress=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ingress: protocol_type, rate_format, rate_bps, rate_percent, bum_action
    :param ingress: Keyword argument tuple.

    :type protocol_type: unicode
    :param protocol_type: **ingress** tuple argument.

        * enumeration restriction: ::

            ['broadcast', 'unknown-unicast', 'multicast']

    :type rate_format: unicode
    :param rate_format: **ingress** tuple argument.

        * enumeration restriction: ::

            ['limit-bps', 'limit-percent']

    :type rate_bps: long
    :param rate_bps: **ingress** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type rate_percent: long
    :param rate_percent: **ingress** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bum_action: unicode
    :param bum_action: **ingress** tuple argument.

        * enumeration restriction: ::

            ['monitor', 'shutdown']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, ingress=ingress)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_access_rspan_vlan_get(self, gigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_access_vlan_get(self, gigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_port_security_get(self, gigabitethernet=None, allowed_ouis=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type allowed_ouis: oui
    :param allowed_ouis: Keyword argument tuple.

    :type oui: unicode
    :param oui: **allowed_ouis** tuple argument:  <OUI> OUI in HHHH.HH00.0000 format

        * pattern restriction: ::

            '[0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'allowed_ouis', 'keyval': 'oui', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_port_security_sticky_get(self, gigabitethernet=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_association_trunk_get(self, gigabitethernet=None, trunk=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type trunk: trunk_pri_pvlan, trunk_sec_pvlan
    :param trunk: Keyword argument tuple.

    :type trunk_pri_pvlan: long
    :param trunk_pri_pvlan: **trunk** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type trunk_sec_pvlan: long
    :param trunk_sec_pvlan: **trunk** tuple argument:  Secondary vlan id 

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, trunk=trunk)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_mapping_get(self, gigabitethernet=None, mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type mapping: promis_pri_pvlan, oper, promis_sec_pvlan_range
    :param mapping: Keyword argument tuple.

    :type promis_pri_pvlan: long
    :param promis_pri_pvlan: **mapping** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type oper: unicode
    :param oper: **mapping** tuple argument.

        * enumeration restriction: ::

            ['add', 'delete']

    :type promis_sec_pvlan_range: unicode
    :param promis_sec_pvlan_range: **mapping** tuple argument:  Secondary vlan range

        * length restriction: ::

            ['1..253']

        * pattern restriction: ::

            '(([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|'
            '(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{'
            '1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9]'
            ')|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-'
            '7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]'
            '))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|('
            '80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, mapping=mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_get(self, gigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_get(self, gigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_add_get(self, gigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_get(self, gigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_vlan_add_get(self, gigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_switchport_trunk_allowed_vlan_remove_get(self, gigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_track_interface_get(self, gigabitethernet=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface: track_interface_type, track_interface_name
    :param interface: Keyword argument tuple.

    :type track_interface_type: unicode
    :param track_interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type track_interface_name: unicode
    :param track_interface_name: **interface** tuple argument:  Interface name

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(('
            '[0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]'
            ')(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5'
            '][0-9]{3}|6[0-1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_vlan_classifier_activate_group_get(self, gigabitethernet=None, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type group: groupid, vlan
    :param group: Keyword argument tuple.

    :type groupid: long
    :param groupid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan: long
    :param vlan: **group** tuple argument:  1-8191;;Vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_vrrp_group_get(self, gigabitethernet=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_vrrp_group_track_get(self, gigabitethernet=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_gigabitethernet_vrrp_group_virtual_ip_get(self, gigabitethernet=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type gigabitethernet: name
    :param gigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **gigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address in dotted decimal

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.gigabitethernet', u'gigabitethernet'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.gigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.gigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.gigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, gigabitethernet=gigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_get(self, hundredgigabitethernet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'lacp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'vrrp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'track'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'fcoeport'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'fec'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'connectivity'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'channel-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.mac', u'access-group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'qos'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'lldp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'bfd'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.track', u'interface'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.track', u'remove'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.lldp', u'cee'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'switchport-basic'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'spanning-tree'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport', u'access'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'service-policy'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'sflow'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.snmp', u'trap'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'vrf'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.bfd', u'interval'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos', u'trust'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'dot1x'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'udld'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport', u'mode'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'ipv6'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'dot1x'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip', u'ip-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'switchport-basic'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.lldp', u'cee'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport', u'port-security'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.dot1x', u'timeout'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport', u'access'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'qos'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.snmp', u'trap'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'lacp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'connectivity'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.bfd', u'interval'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'service-policy'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'bfd'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'ipv6'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.track', u'interface'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'vrrp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'channel-group'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'track'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.storm_control', u'ingress'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'bpdu-drop'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'spanning-tree'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'udld'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.track', u'remove'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'edge-loop-detection'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'sflow'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos', u'trust'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'vrf'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip', u'icmp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport', u'mode'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'lldp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'fcoeport'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'sflow'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.track', u'remove'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'vrrp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'service-policy'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'switchport-basic'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'udld'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.mac', u'access-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'channel-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport', u'access'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'dot1x'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.track', u'interface'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport', u'mode'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'connectivity'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'bfd'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos', u'trust'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'vrf'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip', u'icmp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.lldp', u'cee'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.snmp', u'trap'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'fec'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'lldp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'spanning-tree'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'ipv6'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.bfd', u'interval'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'fcoeport'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'lacp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_fo_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'track'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'qos'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_config', u'address')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'hundredgigabitethernet', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_access_group_get(self, hundredgigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_address_get(self, hundredgigabitethernet=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_dhcp_relay_get(self, hundredgigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.interface_hu_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ip_igmp_static_group_get(self, hundredgigabitethernet=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type static_group: sg_addr
    :param static_group: Keyword argument tuple.

    :type sg_addr: unicode
    :param sg_addr: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_access_group_get(self, hundredgigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_address_get(self, hundredgigabitethernet=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_dhcp_relay_get(self, hundredgigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_nd_prefix_get(self, hundredgigabitethernet=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_neighbor_get(self, hundredgigabitethernet=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_extended_group_get(self, hundredgigabitethernet=None, vrrpv3e_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_extended_group_track_get(self, hundredgigabitethernet=None, vrrpv3e_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_extended_group_virtual_ip_get(self, hundredgigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_group_get(self, hundredgigabitethernet=None, vrrpv3_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_group_track_get(self, hundredgigabitethernet=None, vrrpv3_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_ipv6_vrrp_group_virtual_ip_get(self, hundredgigabitethernet=None, vrrpv3_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_mac_access_group_get(self, hundredgigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_port_profile_port_profile_get(self, hundredgigabitethernet=None, port_to_port_profile_associations=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_to_port_profile_associations: port_to_port_profile_association
    :param port_to_port_profile_associations: Keyword argument tuple.

    :type port_to_port_profile_association: unicode
    :param port_to_port_profile_association: **port_to_port_profile_associations** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_qos_flowcontrol_pfc_get(self, hundredgigabitethernet=None, pfc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type pfc: pfc_cos
    :param pfc: Keyword argument tuple.

    :type pfc_cos: long
    :param pfc_cos: **pfc** tuple argument:  0-7;;CoS value

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, pfc=pfc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_qos_random_detect_traffic_class_get(self, hundredgigabitethernet=None, traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type traffic_class: red_tc_value
    :param traffic_class: Keyword argument tuple.

    :type red_tc_value: long
    :param red_tc_value: **traffic_class** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, traffic_class=traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_rmon_collection_history_get(self, hundredgigabitethernet=None, history_control_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type history_control_entry: history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner
    :param history_control_entry: Keyword argument tuple.

    :type history_control_index: long
    :param history_control_index: **history_control_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_buckets_requested: long
    :param history_control_buckets_requested: **history_control_entry** tuple argument:  Buckets (default 50)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_interval: long
    :param history_control_interval: **history_control_entry** tuple argument:  Polling Interval (default 1800)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_owner: unicode
    :param history_control_owner: **history_control_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, history_control_entry=history_control_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_rmon_collection_stats_get(self, hundredgigabitethernet=None, ether_stats_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ether_stats_entry: ether_stats_index, ether_stats_owner
    :param ether_stats_entry: Keyword argument tuple.

    :type ether_stats_index: long
    :param ether_stats_index: **ether_stats_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type ether_stats_owner: unicode
    :param ether_stats_owner: **ether_stats_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_spanning_tree_instance_get(self, hundredgigabitethernet=None, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_spanning_tree_vlan_get(self, hundredgigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.spanning_tree.vlan', u'guard')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_storm_control_ingress_get(self, hundredgigabitethernet=None, ingress=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ingress: protocol_type, rate_format, rate_bps, rate_percent, bum_action
    :param ingress: Keyword argument tuple.

    :type protocol_type: unicode
    :param protocol_type: **ingress** tuple argument.

        * enumeration restriction: ::

            ['broadcast', 'unknown-unicast', 'multicast']

    :type rate_format: unicode
    :param rate_format: **ingress** tuple argument.

        * enumeration restriction: ::

            ['limit-bps', 'limit-percent']

    :type rate_bps: long
    :param rate_bps: **ingress** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type rate_percent: long
    :param rate_percent: **ingress** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bum_action: unicode
    :param bum_action: **ingress** tuple argument.

        * enumeration restriction: ::

            ['monitor', 'shutdown']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, ingress=ingress)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_access_rspan_vlan_get(self, hundredgigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_access_vlan_get(self, hundredgigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_port_security_get(self, hundredgigabitethernet=None, allowed_ouis=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type allowed_ouis: oui
    :param allowed_ouis: Keyword argument tuple.

    :type oui: unicode
    :param oui: **allowed_ouis** tuple argument:  <OUI> OUI in HHHH.HH00.0000 format

        * pattern restriction: ::

            '[0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_port_security_sticky_get(self, hundredgigabitethernet=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_association_trunk_get(self, hundredgigabitethernet=None, trunk=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type trunk: trunk_pri_pvlan, trunk_sec_pvlan
    :param trunk: Keyword argument tuple.

    :type trunk_pri_pvlan: long
    :param trunk_pri_pvlan: **trunk** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type trunk_sec_pvlan: long
    :param trunk_sec_pvlan: **trunk** tuple argument:  Secondary vlan id 

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, trunk=trunk)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_mapping_get(self, hundredgigabitethernet=None, mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type mapping: promis_pri_pvlan, oper, promis_sec_pvlan_range
    :param mapping: Keyword argument tuple.

    :type promis_pri_pvlan: long
    :param promis_pri_pvlan: **mapping** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type oper: unicode
    :param oper: **mapping** tuple argument.

        * enumeration restriction: ::

            ['add', 'delete']

    :type promis_sec_pvlan_range: unicode
    :param promis_sec_pvlan_range: **mapping** tuple argument:  Secondary vlan range

        * length restriction: ::

            ['1..253']

        * pattern restriction: ::

            '(([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|'
            '(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{'
            '1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9]'
            ')|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-'
            '7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]'
            '))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|('
            '80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, mapping=mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_get(self, hundredgigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_get(self, hundredgigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_add_get(self, hundredgigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_get(self, hundredgigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_add_get(self, hundredgigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_remove_get(self, hundredgigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_track_interface_get(self, hundredgigabitethernet=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface: track_interface_type, track_interface_name
    :param interface: Keyword argument tuple.

    :type track_interface_type: unicode
    :param track_interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type track_interface_name: unicode
    :param track_interface_name: **interface** tuple argument:  Interface name

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(('
            '[0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]'
            ')(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5'
            '][0-9]{3}|6[0-1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_vlan_classifier_activate_group_get(self, hundredgigabitethernet=None, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type group: groupid, vlan
    :param group: Keyword argument tuple.

    :type groupid: long
    :param groupid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan: long
    :param vlan: **group** tuple argument:  1-8191;;Vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_vrrp_group_get(self, hundredgigabitethernet=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_vrrp_group_track_get(self, hundredgigabitethernet=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_hundredgigabitethernet_vrrp_group_virtual_ip_get(self, hundredgigabitethernet=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type hundredgigabitethernet: name
    :param hundredgigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **hundredgigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address in dotted decimal

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet', u'hundredgigabitethernet'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.hundredgigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.hundredgigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.hundredgigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hundredgigabitethernet=hundredgigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_get(self, loopback=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', 'pybind.nos.v6_0_2b.brocade_intf_loopback', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', 'pybind.nos.v7_0_1a.brocade_intf_loopback', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', 'pybind.nos.v7_1_0.brocade_intf_loopback', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', u'intf-loopback'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', u'vrf'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1.md5_authentication', u'key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis', u'interface-hello-interval'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf', u'ospf1'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis', u'interface-bfd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'vrf'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.ip_config', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6', u'interface-ospfv3-conf'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.intf_router_isis', u'int-router-isis'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1', u'database-filter'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.pim_intf_loopback_cont.pim_int_cmd', u'pim'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_ipv6', u'interface-ipv6-metric'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis', u'interface-isis'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.auth_check', u'auth-check-level1'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_hello', u'interface-hello-padding'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1.authentication_key', u'auth-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1', u'md5-authentication'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis', u'interface-priority'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.auth_check', u'auth-check-level2'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_reverse_metric', u'rev-metric-common-attributes'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_auth_mode', u'interface-md5'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis', u'interface-metric'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1.md5_authentication', u'no-encrypt-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.intf_ipv6_router_isis', u'int-ipv6-router-isis'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis', u'interface-hello-multiplier'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.pim_intf_loopback_cont', u'pim-int-cmd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis', u'interface-auth-key'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.interface_loopback_ospf_conf.ospf1', u'bfd'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', u'vrf'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', u'intf-loopback'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', u'intf-loopback'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', u'vrf')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'loopback', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_ip_address_get(self, loopback=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type address: address
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/32'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_intf_loopback', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_intf_loopback', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_intf_loopback', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ip.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_ipv6_address_get(self, loopback=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, eui64, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type eui64: YANGBool
    :param eui64: **ipv6_address** tuple argument:  Configure ipv6 address with an automatically computed EUI-64 interface Id

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback', u'loopback'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_intf_loopback', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_intf_loopback', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_intf_loopback_holder.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_intf_loopback', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, eui64, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_isis_auth_key_get(self, loopback=None, interface_auth_key=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_auth_key: interface_auth_key_level, interface_auth_key_str
    :param interface_auth_key: Keyword argument tuple.

    :type interface_auth_key_level: unicode
    :param interface_auth_key_level: **interface_auth_key** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_auth_key_str: unicode
    :param interface_auth_key_str: **interface_auth_key** tuple argument.

        * length restriction: ::

            ['1..63']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_auth_key', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_auth_key', 'keyval': 'interface_auth_key_level', 'extra_keyval': 'interface_auth_key_level, interface_auth_key_str'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_auth_key=interface_auth_key)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_isis_hello_interval_get(self, loopback=None, interface_hello_interval=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_hello_interval: interface_hello_interval_level, interface_hello_interval_val
    :param interface_hello_interval: Keyword argument tuple.

    :type interface_hello_interval_level: unicode
    :param interface_hello_interval_level: **interface_hello_interval** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_hello_interval_val: long
    :param interface_hello_interval_val: **interface_hello_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_hello_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_interval', 'keyval': 'interface_hello_interval_level', 'extra_keyval': 'interface_hello_interval_level, interface_hello_interval_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_hello_interval=interface_hello_interval)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_isis_hello_multiplier_get(self, loopback=None, interface_hello_multiplier=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_hello_multiplier: interface_hello_multiplier_level, interface_hello_multiplier_val
    :param interface_hello_multiplier: Keyword argument tuple.

    :type interface_hello_multiplier_level: unicode
    :param interface_hello_multiplier_level: **interface_hello_multiplier** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_hello_multiplier_val: long
    :param interface_hello_multiplier_val: **interface_hello_multiplier** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_hello_multiplier', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_multiplier', 'keyval': 'interface_hello_multiplier_level', 'extra_keyval': 'interface_hello_multiplier_level, interface_hello_multiplier_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_hello_multiplier=interface_hello_multiplier)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_isis_ipv6_metric_get(self, loopback=None, interface_ipv6_metric=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_ipv6_metric: interface_ipv6_metric_level, interface_ipv6_metric_val
    :param interface_ipv6_metric: Keyword argument tuple.

    :type interface_ipv6_metric_level: unicode
    :param interface_ipv6_metric_level: **interface_ipv6_metric** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_ipv6_metric_val: long
    :param interface_ipv6_metric_val: **interface_ipv6_metric** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_ipv6.interface_ipv6_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_ipv6_metric', 'keyval': 'interface_ipv6_metric_level', 'extra_keyval': 'interface_ipv6_metric_level, interface_ipv6_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_ipv6_metric=interface_ipv6_metric)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_loopback_isis_metric_get(self, loopback=None, interface_metric=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_metric: interface_metric_level, interface_metric_val
    :param interface_metric: Keyword argument tuple.

    :type interface_metric_level: unicode
    :param interface_metric_level: **interface_metric** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_metric_val: long
    :param interface_metric_val: **interface_metric** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback', u'loopback')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.loopback.intf_isis.interface_isis.interface_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_metric', 'keyval': 'interface_metric_level', 'extra_keyval': 'interface_metric_level, interface_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, loopback=loopback, interface_metric=interface_metric)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_management_get(self, management=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type management: name
    :param management: Keyword argument tuple.

    :type name: unicode
    :param name: **management** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/([0-9'
            ']|[1-9][0-9])'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.management', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.management', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.management', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.management', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.management.ip', u'gateway'), ('pybind.nos.v7_0_1a.interface.management.ip', u'oper-address'), ('pybind.nos.v7_0_1a.interface.management', u'vrf'), ('pybind.nos.v7_0_1a.interface.management.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.interface.management.ip', u'access-group'), ('pybind.nos.v7_0_1a.interface.management.ipv6', u'ipv6-address-cont'), ('pybind.nos.v7_0_1a.interface.management.ip', u'oper-gateway-con'), ('pybind.nos.v7_0_1a.interface.management', u'line-speed'), ('pybind.nos.v7_0_1a.interface.management.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.interface.management.ipv6.ipv6_address_cont', u'ipv6-global-cont'), ('pybind.nos.v7_0_1a.interface.management', u'tcp'), ('pybind.nos.v7_0_1a.interface.management.ip', u'address'), ('pybind.nos.v7_0_1a.interface.management.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.management.ip', u'address'), ('pybind.nos.v7_1_0.interface.management.ip', u'access-group'), ('pybind.nos.v7_1_0.interface.management', u'vrf'), ('pybind.nos.v7_1_0.interface.management', u'line-speed'), ('pybind.nos.v7_1_0.interface.management', u'tcp'), ('pybind.nos.v7_1_0.interface.management.ipv6', u'access-group'), ('pybind.nos.v7_1_0.interface.management.ipv6.ipv6_address_cont', u'ipv6-global-cont'), ('pybind.nos.v7_1_0.interface.management.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.management.ip', u'oper-address'), ('pybind.nos.v7_1_0.interface.management.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.interface.management.ipv6', u'ipv6-address-cont'), ('pybind.nos.v7_1_0.interface.management.ip', u'gateway'), ('pybind.nos.v7_1_0.interface.management.ip', u'oper-gateway-con'), ('pybind.nos.v6_0_2b.interface.management.ipv6.ipv6_address_cont', u'ipv6-global-cont'), ('pybind.nos.v6_0_2b.interface.management', u'line-speed'), ('pybind.nos.v6_0_2b.interface.management.ipv6', u'icmpv6'), ('pybind.nos.v6_0_2b.interface.management.ip', u'icmp'), ('pybind.nos.v6_0_2b.interface.management.ipv6', u'ipv6-address-cont'), ('pybind.nos.v6_0_2b.interface.management.ip', u'oper-address'), ('pybind.nos.v6_0_2b.interface.management.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.interface.management', u'tcp'), ('pybind.nos.v6_0_2b.interface.management', u'vrf'), ('pybind.nos.v6_0_2b.interface.management.ip', u'access-group'), ('pybind.nos.v6_0_2b.interface.management.ip', u'address'), ('pybind.nos.v6_0_2b.interface.management.ip', u'oper-gateway-con'), ('pybind.nos.v6_0_2b.interface.management.ip', u'gateway'), ('pybind.slxos.v16r_1_00b.interface.management', u'tcp'), ('pybind.slxos.v16r_1_00b.interface.management.ip', u'gateway'), ('pybind.slxos.v16r_1_00b.interface.management.ipv6', u'icmpv6'), ('pybind.slxos.v16r_1_00b.interface.management.ipv6.ipv6_address_cont', u'ipv6-global-cont'), ('pybind.slxos.v16r_1_00b.interface.management', u'line-speed'), ('pybind.slxos.v16r_1_00b.interface.management.ip', u'address'), ('pybind.slxos.v16r_1_00b.interface.management.ipv6', u'ipv6-address-cont'), ('pybind.slxos.v16r_1_00b.interface.management.ipv6', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.management', u'vrf'), ('pybind.slxos.v16r_1_00b.interface.management.ip', u'icmp'), ('pybind.slxos.v16r_1_00b.interface.management.ip', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.management.ip', u'oper-gateway-con'), ('pybind.slxos.v16r_1_00b.interface.management.ip', u'oper-address')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'management', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, management=management)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_get(self, port_channel=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree', u'instance'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip.hide_ip_holder.ip_config', u'address'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk', u'tag'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.slxos.v16r_1_00b.interface.port_channel.track', u'interface'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos', u'trust'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.allowed', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.random_detect', u'traffic-class'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk', u'default-vlan-config'), ('pybind.slxos.v16r_1_00b.interface.port_channel.track', u'remove'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport', u'mode'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder', u'vrrpv3'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'ipv6'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'track'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree', u'guard'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'edge-loop-detection'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'service-policy'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk', u'native-vlan-classification'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder', u'vrrpv3e'), ('pybind.slxos.v16r_1_00b.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security', u'sticky'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport', u'access'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'qos'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.flowcontrol', u'pfc'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'vlag'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'fcoeport'), ('pybind.slxos.v16r_1_00b.interface.port_channel.mac', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree', u'portfast'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'spanning-tree'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip_acl_interface.ip', u'access-group'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree', u'edgeport'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport', u'port-security'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer', u'vrrp'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip.arp', u'inspection'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'switchport-basic'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface', u'port-channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip.hide_ip_holder', u'ip-config'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos', u'drop-monitor'), ('pybind.slxos.v16r_1_00b.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security', u'sticky'), ('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree', u'portfast'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer', u'vrrp'), ('pybind.nos.v6_0_2b.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v6_0_2b.interface.port_channel.qos.random_detect', u'traffic-class'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel', u'service-policy'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v6_0_2b.interface.port_channel', u'edge-loop-detection'), ('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree', u'edgeport'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder', u'vrrpv3e'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel', u'vlag'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport', u'port-security'), ('pybind.nos.v6_0_2b.interface.port_channel', u'qos'), ('pybind.nos.v6_0_2b.interface.port_channel', u'track'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v6_0_2b.interface.port_channel.snmp', u'trap'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.port_channel.qos', u'trust'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder', u'vrrpv3'), ('pybind.nos.v6_0_2b.interface.port_channel.qos', u'drop-monitor'), ('pybind.nos.v6_0_2b.interface.port_channel', u'fcoeport'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel.ip.hide_ip_holder', u'ip-config'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan', u'host-association'), ('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree', u'guard'), ('pybind.nos.v6_0_2b.interface.port_channel.ip.arp', u'inspection'), ('pybind.nos.v6_0_2b.interface.port_channel', u'tunnel'), ('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree', u'instance'), ('pybind.nos.v6_0_2b.interface.port_channel.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v6_0_2b.interface.port_channel.track', u'remove'), ('pybind.nos.v6_0_2b.interface.port_channel.track', u'interface'), ('pybind.nos.v6_0_2b.interface.port_channel.qos.flowcontrol', u'pfc'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan', u'mapping'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.mode', u'private-vlan'), ('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel', u'bpdu-drop'), ('pybind.nos.v6_0_2b.interface.port_channel', u'spanning-tree'), ('pybind.nos.v6_0_2b.interface.port_channel', u'ipv6'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport', u'access'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v6_0_2b.interface.port_channel.vlan.classifier.activate', u'group'), ('pybind.nos.v6_0_2b.interface.port_channel', u'switchport-basic'), ('pybind.nos.v6_0_2b.interface.port_channel.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk', u'tag'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.port_channel.ip.hide_ip_holder.ip_config', u'address'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport', u'mode'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v6_0_2b.interface.port_channel.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_1_0.interface.port_channel.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.interface.port_channel.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_1_0.interface.port_channel.ip.pim_intf_po_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.interface.port_channel', u'ipv6'), ('pybind.nos.v7_1_0.interface.port_channel.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_1_0.interface.port_channel.ip', u'ip-config'), ('pybind.nos.v7_1_0.interface.port_channel', u'bpdu-drop'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.interface.port_channel.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6', u'access-group'), ('pybind.nos.v7_1_0.interface.port_channel', u'fcoeport'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.port_channel.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_1_0.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_po_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_1_0.interface.port_channel.track', u'remove'), ('pybind.nos.v7_1_0.interface.port_channel.switchport', u'access'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk', u'tag'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_1_0.interface.port_channel.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_1_0.interface.port_channel', u'track'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.vlan.classifier.activate', u'group'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.interface.port_channel', u'vlag'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.ip.arp', u'inspection'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.mode', u'private-vlan'), ('pybind.nos.v7_1_0.interface.port_channel', u'vrf'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_1_0.interface.port_channel', u'switchport-basic'), ('pybind.nos.v7_1_0.interface.port_channel.switchport', u'mode'), ('pybind.nos.v7_1_0.interface.port_channel.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.interface.port_channel', u'vrrp'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_1_0.interface.port_channel.ip.pim_intf_po_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security', u'sticky'), ('pybind.nos.v7_1_0.interface.port_channel', u'qos'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder', u'vrrpv3'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_1_0.interface.port_channel.track', u'interface'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree', u'edgeport'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6', u'ipv6-config'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.port_channel.bfd', u'interval'), ('pybind.nos.v7_1_0.interface.port_channel', u'spanning-tree'), ('pybind.nos.v7_1_0.interface.port_channel.mac', u'access-group'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.interface.port_channel', u'esi'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_PO_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.port_channel', u'service-policy'), ('pybind.nos.v7_1_0.interface.port_channel', u'tunnel'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree', u'portfast'), ('pybind.nos.v7_1_0.interface.port_channel.ip.igmp_po_intf_cfg', u'igmp'), ('pybind.nos.v7_1_0.interface.port_channel', u'edge-loop-detection'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_1_0.interface.port_channel.qos', u'drop-monitor'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_1_0.interface.port_channel.qos', u'trust'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_1_0.interface.port_channel.ip.igmp_po_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_1_0.interface.port_channel', u'bfd'), ('pybind.nos.v7_1_0.interface.port_channel.ip.ip_config', u'arp'), ('pybind.nos.v7_1_0.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree', u'guard'), ('pybind.nos.v7_1_0.interface.port_channel.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_1_0.interface.port_channel.switchport', u'port-security'), ('pybind.nos.v7_1_0.interface.port_channel.snmp', u'trap'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.interface.port_channel.ip.pim_intf_po_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_po_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree', u'instance'), ('pybind.nos.v7_0_1a.interface.port_channel.snmp', u'trap'), ('pybind.nos.v7_0_1a.interface.port_channel', u'track'), ('pybind.nos.v7_0_1a.interface.port_channel.ip', u'icmp'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_po_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport', u'access'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.interface.port_channel', u'tunnel'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6', u'ipv6-config'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.pim_intf_po_cont', u'pim-int-cmd'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.interface.port_channel', u'vrrp'), ('pybind.nos.v7_0_1a.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_0_1a.interface.port_channel', u'spanning-tree'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel.ip', u'ip-config'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.ip_config', u'arp'), ('pybind.nos.v7_0_1a.interface.port_channel', u'esi'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree', u'portfast'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.igmp_po_intf_cfg', u'igmp'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport', u'mode'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_0_1a.interface.port_channel', u'switchport-basic'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder', u'vrrpv3'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_0_1a.interface.port_channel', u'vrf'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk', u'tag'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport', u'port-security'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.pim_intf_po_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security', u'sticky'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.mode', u'private-vlan'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel', u'qos'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel', u'fcoeport'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree', u'instance'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree', u'guard'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.interface.port_channel', u'bpdu-drop'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.port_channel', u'ipv6'), ('pybind.nos.v7_0_1a.interface.port_channel.vlan.classifier.activate', u'group'), ('pybind.nos.v7_0_1a.interface.port_channel', u'vlag'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_po_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.interface.port_channel', u'edge-loop-detection'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.igmp_po_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.interface.port_channel.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.interface.port_channel', u'service-policy'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree', u'edgeport'), ('pybind.nos.v7_0_1a.interface.port_channel.track', u'remove'), ('pybind.nos.v7_0_1a.interface.port_channel.track', u'interface'), ('pybind.nos.v7_0_1a.interface.port_channel.mac', u'access-group'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_0_1a.interface.port_channel.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.arp', u'inspection'), ('pybind.nos.v7_0_1a.interface.port_channel.qos', u'trust'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_PO_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.interface.port_channel.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.port_channel.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_0_1a.interface.port_channel.qos', u'drop-monitor')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ip_access_group_get(self, port_channel=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip_acl_interface.ip.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ip_address_get(self, port_channel=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ip.hide_ip_holder.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ip.hide_ip_holder.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ip_dhcp_relay_get(self, port_channel=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ip.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ip_igmp_static_group_get(self, port_channel=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_group: sg_addr
    :param static_group: Keyword argument tuple.

    :type sg_addr: unicode
    :param sg_addr: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ip.igmp_po_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ip.igmp_po_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_access_group_get(self, port_channel=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_address_get(self, port_channel=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_dhcp_relay_get(self, port_channel=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.interface_po_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_nd_prefix_get(self, port_channel=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_neighbor_get(self, port_channel=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v7_0_1a.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_extended_group_get(self, port_channel=None, vrrpv3e=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'short-path-forwarding'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.track', u'interface'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.track', u'interface'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'short-path-forwarding')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3e=vrrpv3e)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_extended_group_track_get(self, port_channel=None, vrrpv3e=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3e=vrrpv3e, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_extended_group_virtual_ip_get(self, port_channel=None, vrrpv3e=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3e.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3e=vrrpv3e, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_group_get(self, port_channel=None, vrrpv3=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track', u'interface'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track', u'interface'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track', u'interface'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3=vrrpv3)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_group_track_get(self, port_channel=None, vrrpv3=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3=vrrpv3, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_ipv6_vrrp_group_virtual_ip_get(self, port_channel=None, vrrpv3=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.ipv6.hide_vrrpv3_holder.vrrpv3.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrpv3=vrrpv3, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_logical_interface_port_channel_get(self, port_channel=None, port_channel_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type port_channel_: pc_instance_id
    :param port_channel_: Keyword argument tuple.

    :type pc_instance_id: unicode
    :param pc_instance_id: **port_channel_** tuple argument.

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-6][0-9][0-'
            '9][0-9])\.([1-9]|[1-9][0-9]||[1-9][0-9][0-9]|[1-'
            '9][0-9][0-9][0-9]|1[0-2][0-2][0-8][0-8]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface.port_channel', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface.port_channel.pc_cmd_container_dummy.service_instance_common_commands_dummy', u'name'), ('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface.port_channel.pc_cmd_container_dummy.service_instance_common_commands_dummy', u'shutdown'), ('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface.port_channel.pc_cmd_container_dummy.service_instance_vlan_cmds_dummy_container', u'tagged-outer-vlan'), ('pybind.slxos.v16r_1_00b.interface.port_channel.logical_interface.port_channel.pc_cmd_container_dummy.service_instance_vlan_cmds_dummy_container.get_untagged_vlan_dummy.untagged', u'untagged-vlan')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel_', 'keyval': 'pc_instance_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, port_channel_=port_channel_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_mac_access_group_get(self, port_channel=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.mac.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_port_profile_port_profile_get(self, port_channel=None, port_to_port_profile_associations=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type port_to_port_profile_associations: port_to_port_profile_association
    :param port_to_port_profile_associations: Keyword argument tuple.

    :type port_to_port_profile_association: unicode
    :param port_to_port_profile_association: **port_to_port_profile_associations** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_qos_flowcontrol_pfc_get(self, port_channel=None, pfc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type pfc: pfc_cos
    :param pfc: Keyword argument tuple.

    :type pfc_cos: long
    :param pfc_cos: **pfc** tuple argument:  0-7;;CoS value

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.flowcontrol.pfc', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, pfc=pfc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_qos_random_detect_traffic_class_get(self, port_channel=None, traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type traffic_class: red_tc_value
    :param traffic_class: Keyword argument tuple.

    :type red_tc_value: long
    :param red_tc_value: **traffic_class** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.qos.random_detect.traffic_class', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, traffic_class=traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_spanning_tree_instance_get(self, port_channel=None, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree.instance', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_spanning_tree_vlan_get(self, port_channel=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.port_channel.spanning_tree.vlan', u'guard'), ('pybind.nos.v7_1_0.interface.port_channel.spanning_tree.vlan', u'guard'), ('pybind.nos.v6_0_2b.interface.port_channel.spanning_tree.vlan', u'guard'), ('pybind.slxos.v16r_1_00b.interface.port_channel.spanning_tree.vlan', u'guard')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_access_mac_group_vlan_classification_access_vlan_get(self, port_channel=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_access_mac_vlan_classification_access_vlan_get(self, port_channel=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_address
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_address: unicode
    :param access_mac_address: **vlan** tuple argument:  Associate the Mac address with a vlan

        * pattern restriction: ::

            '[0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_access_vlan_get(self, port_channel=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_group', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_port_security_get(self, port_channel=None, allowed_ouis=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type allowed_ouis: oui
    :param allowed_ouis: Keyword argument tuple.

    :type oui: unicode
    :param oui: **allowed_ouis** tuple argument:  <OUI> OUI in HHHH.HH00.0000 format

        * pattern restriction: ::

            '[0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, allowed_ouis=allowed_ouis)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_port_security_sticky_get(self, port_channel=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_association_trunk_get(self, port_channel=None, trunk=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type trunk: trunk_pri_pvlan, trunk_sec_pvlan
    :param trunk: Keyword argument tuple.

    :type trunk_pri_pvlan: long
    :param trunk_pri_pvlan: **trunk** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type trunk_sec_pvlan: long
    :param trunk_sec_pvlan: **trunk** tuple argument:  Secondary vlan id 

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, trunk=trunk)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_mapping_get(self, port_channel=None, mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type mapping: promis_pri_pvlan, oper, promis_sec_pvlan_range
    :param mapping: Keyword argument tuple.

    :type promis_pri_pvlan: long
    :param promis_pri_pvlan: **mapping** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type oper: unicode
    :param oper: **mapping** tuple argument.

        * enumeration restriction: ::

            ['add', 'delete']

    :type promis_sec_pvlan_range: unicode
    :param promis_sec_pvlan_range: **mapping** tuple argument:  Secondary vlan range

        * length restriction: ::

            ['1..253']

        * pattern restriction: ::

            '(([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|'
            '(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{'
            '1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9]'
            ')|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-'
            '7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]'
            '))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|('
            '80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, mapping=mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_add_get(self, port_channel=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_remove_get(self, port_channel=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_trunk_allowed_vlan_add_get(self, port_channel=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_trunk_allowed_vlan_remove_get(self, port_channel=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_get(self, port_channel=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_get(self, port_channel=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.port_channel.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_track_interface_get(self, port_channel=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface: track_interface_type, track_interface_name
    :param interface: Keyword argument tuple.

    :type track_interface_type: unicode
    :param track_interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type track_interface_name: unicode
    :param track_interface_name: **interface** tuple argument:  Interface name

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(('
            '[0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]'
            ')(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5'
            '][0-9]{3}|6[0-1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_vlan_classifier_activate_group_get(self, port_channel=None, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type group: groupid, vlan
    :param group: Keyword argument tuple.

    :type groupid: long
    :param groupid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan: long
    :param vlan: **group** tuple argument:  1-8191;;Vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_vrrp_group_get(self, port_channel=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.port_channel.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp.track', u'interface'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp.arp', u'unicast-request'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp.track', u'interface'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp.arp', u'unicast-request'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_vrrp_group_track_get(self, port_channel=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', u'vrrp'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp.track.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_port_channel_vrrp_group_virtual_ip_get(self, port_channel=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel: name
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.port_channel', u'port_channel'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.port_channel', u'port_channel'), ('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.slxos.v16r_1_00b.interface.port_channel', u'port_channel'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.port_channel', u'port_channel'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.port_channel.hide_vrrp_holer.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.port_channel.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.port_channel.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface.port_channel.hide_vrrp_holer.vrrp.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel=port_channel, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_get(self, tengigabitethernet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.rcv_queue', u'cos-threshold'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'ipv6'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'switchport-basic'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.bfd', u'interval'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'channel-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'track'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'vrrp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'lldp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.track', u'remove'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport', u'mode'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'spanning-tree'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'bfd'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'fcoeport'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'vrf'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.lldp', u'cee'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.mac', u'access-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'lacp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'dot1x'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'service-policy'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tunnel'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'vepa'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'qos'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos', u'trust'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.snmp', u'trap'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport', u'access'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'sflow'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip', u'icmp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'udld'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'connectivity'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'lacp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'vepa'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'bpdu-drop'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'switchport-basic'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'lldp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.track', u'remove'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'channel-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'service-policy'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'qos'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport', u'mode'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'sflow'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.track', u'interface'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.lldp', u'cee'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport', u'access'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.snmp', u'trap'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tunnel'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'spanning-tree'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'edge-loop-detection'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'vrrp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'udld'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport', u'port-security'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'ipv6'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos', u'trust'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'bfd'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip', u'ip-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip', u'icmp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.bfd', u'interval'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.storm_control', u'ingress'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'vrf'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.rcv_queue', u'cos-threshold'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.dot1x', u'timeout'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'connectivity'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'track'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'fcoeport'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'dot1x'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.arp_node_config.arp', u'inspection'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'connectivity'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'vrrpv3e-group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.track', u'remove'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan', u'host-association'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'add'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'qos'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'lldp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree', u'portfast'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.snmp', u'trap'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tunnel'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree', u'edgeport'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'ipv6-phy-intf-cmds'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.fabric', u'neighbor-discovery'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree', u'guard'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.association', u'trunk'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.storm_control', u'ingress'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp', u'static-group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.tunable_optics', u'sfpp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.bfd', u'interval'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vlan.classifier.activate', u'group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.pim_intf_phy_cont', u'pim-int-cmd'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'udld'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.pim_intf_phy_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk', u'native-vlan-classification'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'ipv6-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos', u'trust'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'edge-loop-detection'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.fabric', u'fabric-dport'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'bfd'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.flowcontrol', u'link-level-flowcontrol'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'switchport-basic'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.mac_learning.mac_learn_disable', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'lacp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed', u'rspan-vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.lldp', u'cee'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'vrf'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.trunk', u'native'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'channel-group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.mode', u'private-vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.openflow_interface_cfg', u'openflow-enable'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.random_detect', u'traffic-class'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.mode.private_vlan', u'private-vlan-trunk'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.trunk', u'pvlan-tag'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.ip_config', u'unnumbered'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.igmp_phy_intf_cfg', u'igmp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-domain-association'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk', u'default-vlan-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan', u'add'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.rcv_queue', u'cos-threshold'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access', u'rspan-access'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'vrrpv3-group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk', u'tag'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport', u'access'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.flowcontrol', u'pfc'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.rmon.collection', u'history-control-entry'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan', u'mapping'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'bpdu-drop'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'openflow-interface-cfg'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan', u'remove'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'vrrp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'ipv6'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'track'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip', u'icmp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip', u'ip-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'sflow'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security', u'sticky'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'fcoeport'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport', u'port-security'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk', u'native-vlan-untagged-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree', u'instance'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.rmon.collection', u'ether-stats-entry'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.track', u'interface'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'service-policy'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.fabric', u'fabric-isl'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'vepa'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport', u'mode'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos', u'drop-monitor'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk', u'native-vlan-xtagged-config'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.ip_config', u'arp'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security', u'allowed-ouis'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.sticky', u'port-secutiry-mac-address'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'dot1x'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.dot1x', u'timeout'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port', u'port-to-port-profile-associations'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.vlanoper', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.fabric', u'fabric-trunk'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access', u'vlan'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'spanning-tree'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.mac', u'access-group')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tengigabitethernet', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ip_access_group_get(self, tengigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ip_address_get(self, tengigabitethernet=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ip_dhcp_relay_get(self, tengigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.interface_te_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ip_igmp_static_group_get(self, tengigabitethernet=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type static_group: sg_addr
    :param static_group: Keyword argument tuple.

    :type sg_addr: unicode
    :param sg_addr: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ip.igmp_phy_intf_cfg.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_access_group_get(self, tengigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_address_get(self, tengigabitethernet=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_dhcp_relay_get(self, tengigabitethernet=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.interface_phy_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_nd_prefix_get(self, tengigabitethernet=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_neighbor_get(self, tengigabitethernet=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_extended_group_get(self, tengigabitethernet=None, vrrpv3e_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'short-path-forwarding'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3e_group=vrrpv3e_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_extended_group_track_get(self, tengigabitethernet=None, vrrpv3e_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3e_group=vrrpv3e_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_extended_group_virtual_ip_get(self, tengigabitethernet=None, vrrpv3e_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3e_group: vrid
    :param vrrpv3e_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group', u'vrrpv3e_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3e_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3e_group=vrrpv3e_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_group_get(self, tengigabitethernet=None, vrrpv3_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3_group', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3_group=vrrpv3_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_group_track_get(self, tengigabitethernet=None, vrrpv3_group=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3_group=vrrpv3_group, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_ipv6_vrrp_group_virtual_ip_get(self, tengigabitethernet=None, vrrpv3_group=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrpv3_group: vrid
    :param vrrpv3_group: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3_group** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group', u'vrrpv3_group')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.ipv6.vrrpv3_group.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrpv3_group=vrrpv3_group, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_mac_access_group_get(self, tengigabitethernet=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_port_profile_port_profile_get(self, tengigabitethernet=None, port_to_port_profile_associations=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_to_port_profile_associations: port_to_port_profile_association
    :param port_to_port_profile_associations: Keyword argument tuple.

    :type port_to_port_profile_association: unicode
    :param port_to_port_profile_association: **port_to_port_profile_associations** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.port_profile_to_interface_associations.port_profile_port.port_to_port_profile_associations', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_to_port_profile_associations', 'keyval': 'port_to_port_profile_association', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, port_to_port_profile_associations=port_to_port_profile_associations)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_qos_flowcontrol_pfc_get(self, tengigabitethernet=None, pfc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type pfc: pfc_cos
    :param pfc: Keyword argument tuple.

    :type pfc_cos: long
    :param pfc_cos: **pfc** tuple argument:  0-7;;CoS value

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, pfc=pfc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_qos_random_detect_traffic_class_get(self, tengigabitethernet=None, traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type traffic_class: red_tc_value
    :param traffic_class: Keyword argument tuple.

    :type red_tc_value: long
    :param red_tc_value: **traffic_class** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.qos.random_detect.traffic_class', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'traffic_class', 'keyval': 'red_tc_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, traffic_class=traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_rmon_collection_history_get(self, tengigabitethernet=None, history_control_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type history_control_entry: history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner
    :param history_control_entry: Keyword argument tuple.

    :type history_control_index: long
    :param history_control_index: **history_control_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_buckets_requested: long
    :param history_control_buckets_requested: **history_control_entry** tuple argument:  Buckets (default 50)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_interval: long
    :param history_control_interval: **history_control_entry** tuple argument:  Polling Interval (default 1800)

        * range restriction: ::

            ['-2147483648..2147483647']

    :type history_control_owner: unicode
    :param history_control_owner: **history_control_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.rmon.collection.history_control_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'history_control_entry', 'keyval': 'history_control_index', 'extra_keyval': 'history_control_index, history_control_buckets_requested, history_control_interval, history_control_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, history_control_entry=history_control_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_rmon_collection_stats_get(self, tengigabitethernet=None, ether_stats_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ether_stats_entry: ether_stats_index, ether_stats_owner
    :param ether_stats_entry: Keyword argument tuple.

    :type ether_stats_index: long
    :param ether_stats_index: **ether_stats_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type ether_stats_owner: unicode
    :param ether_stats_owner: **ether_stats_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.rmon.collection.ether_stats_entry', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ether_stats_entry', 'keyval': 'ether_stats_index', 'extra_keyval': 'ether_stats_index, ether_stats_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, ether_stats_entry=ether_stats_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_spanning_tree_instance_get(self, tengigabitethernet=None, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_spanning_tree_vlan_get(self, tengigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.spanning_tree.vlan', u'guard'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.spanning_tree.vlan', u'guard')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_storm_control_ingress_get(self, tengigabitethernet=None, ingress=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type ingress: protocol_type, rate_format, rate_bps, rate_percent, bum_action
    :param ingress: Keyword argument tuple.

    :type protocol_type: unicode
    :param protocol_type: **ingress** tuple argument.

        * enumeration restriction: ::

            ['broadcast', 'unknown-unicast', 'multicast']

    :type rate_format: unicode
    :param rate_format: **ingress** tuple argument.

        * enumeration restriction: ::

            ['limit-bps', 'limit-percent']

    :type rate_bps: long
    :param rate_bps: **ingress** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type rate_percent: long
    :param rate_percent: **ingress** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type bum_action: unicode
    :param bum_action: **ingress** tuple argument.

        * enumeration restriction: ::

            ['monitor', 'shutdown']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.storm_control.ingress', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.storm_control.ingress', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.storm_control.ingress', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ingress', 'keyval': 'protocol_type', 'extra_keyval': 'protocol_type, rate_format, rate_bps, rate_percent, bum_action'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, ingress=ingress)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_access_rspan_vlan_get(self, tengigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_group_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_rspan_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_access_vlan_get(self, tengigabitethernet=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_port_security_get(self, tengigabitethernet=None, allowed_ouis=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type allowed_ouis: oui
    :param allowed_ouis: Keyword argument tuple.

    :type oui: unicode
    :param oui: **allowed_ouis** tuple argument:  <OUI> OUI in HHHH.HH00.0000 format

        * pattern restriction: ::

            '[0-9a-fA-F]{4}\.[0-9a-fA-F]{2}00\.0000'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.allowed_ouis', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, allowed_ouis=allowed_ouis)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_port_security_sticky_get(self, tengigabitethernet=None, port_secutiry_mac_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type port_secutiry_mac_address: mac_address, port_sec_vlan
    :param port_secutiry_mac_address: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **port_secutiry_mac_address** tuple argument:  Mac Address

    :type port_sec_vlan: long
    :param port_sec_vlan: **port_secutiry_mac_address** tuple argument:  Forwarding vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.port_security.sticky.port_secutiry_mac_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_secutiry_mac_address', 'keyval': 'mac_address, port_sec_vlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, port_secutiry_mac_address=port_secutiry_mac_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_association_trunk_get(self, tengigabitethernet=None, trunk=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type trunk: trunk_pri_pvlan, trunk_sec_pvlan
    :param trunk: Keyword argument tuple.

    :type trunk_pri_pvlan: long
    :param trunk_pri_pvlan: **trunk** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type trunk_sec_pvlan: long
    :param trunk_sec_pvlan: **trunk** tuple argument:  Secondary vlan id 

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.association.trunk', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'trunk', 'keyval': 'trunk_pri_pvlan, trunk_sec_pvlan', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, trunk=trunk)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_mapping_get(self, tengigabitethernet=None, mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type mapping: promis_pri_pvlan, oper, promis_sec_pvlan_range
    :param mapping: Keyword argument tuple.

    :type promis_pri_pvlan: long
    :param promis_pri_pvlan: **mapping** tuple argument:  Primary vlan id

        * range restriction: ::

            ['0..4294967295']

    :type oper: unicode
    :param oper: **mapping** tuple argument.

        * enumeration restriction: ::

            ['add', 'delete']

    :type promis_sec_pvlan_range: unicode
    :param promis_sec_pvlan_range: **mapping** tuple argument:  Secondary vlan range

        * length restriction: ::

            ['1..253']

        * pattern restriction: ::

            '(([1-9][0-9]{0,2})|([1-7][0-9]{3})|(80[0-9]{2})|'
            '(81[0-8][0-9])|(819[01]))(-(([2-9])|([1-9][0-9]{'
            '1,2})|([1-7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9]'
            ')|(819[01])))?((,(([2-9])|([1-9][0-9]{1,2})|([1-'
            '7][0-9]{3})|(80[0-9]{2})|(81[0-8][0-9])|(819[01]'
            '))(-(([3-9])|([1-9][0-9]{1,2})|([1-7][0-9]{3})|('
            '80[0-9]{2})|(81[0-8][0-9])|(819[01])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.private_vlan.mapping', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mapping', 'keyval': 'promis_pri_pvlan', 'extra_keyval': 'promis_pri_pvlan, oper, promis_sec_pvlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, mapping=mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_add_get(self, tengigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_remove_get(self, tengigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk_private_vlan_classification.private_vlan.trunk.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_add_get(self, tengigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_get(self, tengigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.allowed.trunk_rspan_vlan_classification.rspan_vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_vlan_add_get(self, tengigabitethernet=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_switchport_trunk_allowed_vlan_remove_get(self, tengigabitethernet=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_track_interface_get(self, tengigabitethernet=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type interface: track_interface_type, track_interface_name
    :param interface: Keyword argument tuple.

    :type track_interface_type: unicode
    :param track_interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type track_interface_name: unicode
    :param track_interface_name: **interface** tuple argument:  Interface name

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-3][0-9])/)?(('
            '[0-9]|1[0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]'
            ')(:[1-4])?)|([1-9]|[1-9][0-9]|[1-9][0-9]{2}|[1-5'
            '][0-9]{3}|6[0-1][0-4]{2}))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'track_interface_type, track_interface_name', 'extra_keyval': 'track_interface_type, track_interface_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_vlan_classifier_activate_group_get(self, tengigabitethernet=None, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type group: groupid, vlan
    :param group: Keyword argument tuple.

    :type groupid: long
    :param groupid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vlan: long
    :param vlan: **group** tuple argument:  1-8191;;Vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vlan.classifier.activate.group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid', 'extra_keyval': 'groupid, vlan'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_vrrp_group_get(self, tengigabitethernet=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp.arp', u'unicast-request'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp.track', u'interface'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp.arp', u'unicast-request')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_vrrp_group_track_get(self, tengigabitethernet=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tengigabitethernet_vrrp_group_virtual_ip_get(self, tengigabitethernet=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type tengigabitethernet: name
    :param tengigabitethernet: Keyword argument tuple.

    :type name: unicode
    :param name: **tengigabitethernet** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address in dotted decimal

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v7_1_0.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet', u'tengigabitethernet'), ('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.interface.tengigabitethernet.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface.tengigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface.tengigabitethernet.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tengigabitethernet=tengigabitethernet, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_tunnel_get(self, tunnel=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tunnel: identifier
    :param tunnel: Keyword argument tuple.

    :type identifier: long
    :param identifier: **tunnel** tuple argument:  Identifier value range 1 to 1024

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.interface.tunnel', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.interface.tunnel', u'keepalive'), ('pybind.slxos.v16r_1_00b.interface.tunnel', u'tunnel-map'), ('pybind.slxos.v16r_1_00b.interface.tunnel', u'mode'), ('pybind.slxos.v16r_1_00b.interface.tunnel', u'gre-source'), ('pybind.slxos.v16r_1_00b.interface.tunnel.mode', u'gre'), ('pybind.slxos.v16r_1_00b.interface.tunnel', u'tunnel-router-interface')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tunnel', 'keyval': 'identifier', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tunnel=tunnel)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_get(self, ve=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ve: gve_name
    :param ve: Keyword argument tuple.

    :type gve_name: long
    :param gve_name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6', u'ipv6-anycast-gateway'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ip', u'ip-anycast-gateway'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.attach', u'rbridge-id'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6', u'ipv6-anycast-gateway'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.attach', u'rbridge-id'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ip', u'ip-anycast-gateway'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf', u'ospf1'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1.md5_authentication', u'no-encrypt-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u'rpf-mode'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_ipv6', u'interface-ipv6-metric'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis', u'interface-priority'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1.md5_authentication', u'key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u'vrrpe'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip', u'icmp-plus'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.policy', u'route-map'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.pim_intf_vlan_cont.pim_int_cmd', u'pim'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip', u'ip-local-anycast-gateway'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_auth_mode', u'interface-md5'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u'qos'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis', u'interface-hello-multiplier'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_reverse_metric', u'rev-metric-common-attributes'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'ipv6-local-anycast-gateway'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-domain-name'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip', u'icmp'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis', u'interface-hello-interval'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip', u'ip-config'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'ipv6-config'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'vrrpv3e'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis', u'interface-bfd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.intf_router_isis', u'int-router-isis'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'access-group'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u'vrrp'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_config', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1', u'md5-authentication'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_ve_dhcp_conf.dhcp', u'relay'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip_acl_interface.ip', u'access-group'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.auth_check', u'auth-check-level2'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.pim_intf_vlan_cont', u'pim-int-cmd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.auth_check', u'auth-check-level1'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'vrrpv3'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'icmpv6'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'ipv6-ve-intf-cmds'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1.authentication_key', u'auth-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'router-preference'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-dns-server'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_vrrp_extended.auth_type', u'md5-auth'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.address', u'suppressing-address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1', u'database-filter'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_hello', u'interface-hello-padding'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis', u'interface-metric'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6', u'interface-ospfv3-conf'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip', u'igmp'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_config', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_vlan_ospf_conf.ospf1.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.igmp', u've_igmpl3-static-group'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.intf_ipv6_router_isis', u'int-ipv6-router-isis'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis', u'interface-auth-key'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_vrrp_extended.auth_type', u'md5-auth'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u'vrf'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis', u'interface-isis'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ip', u'ip-anycast-gateway'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.attach', u'rbridge-id'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6', u'ipv6-anycast-gateway')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u've', 'keyval': 'gve_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_access_group_get(self, ve=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip_acl_interface.ip.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_address_get(self, ve=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_config.address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_dhcp_relay_get(self, ve=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_get(self, ve=None, ip_anycast_gateway=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: gve_name
    :param ve: Keyword argument tuple.

    :type gve_name: long
    :param gve_name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ip_anycast_gateway: ip_gw_id
    :param ip_anycast_gateway: Keyword argument tuple.

    :type ip_gw_id: long
    :param ip_gw_id: **ip_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.ve', u've'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ip.ip_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ip.ip_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ip.ip_anycast_gateway', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ip.ip_anycast_gateway', u'gratuitous-arp'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ip.ip_anycast_gateway', u'gratuitous-arp'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'load-balancing'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track', u'next-hop'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track', u'interface'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track', u'network'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ip.ip_anycast_gateway', u'gratuitous-arp')]
    compositions_keyval_list = [{'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_anycast_gateway', 'keyval': 'ip_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_anycast_gateway=ip_anycast_gateway)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_track_interface_get(self, ve=None, ip_local_anycast_gateway=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_track_network_get(self, ve=None, ip_local_anycast_gateway=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type network: network_address
    :param network: Keyword argument tuple.

    :type network_address: unicode
    :param network_address: **network** tuple argument.

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_fabric_virtual_gateway_track_next_hop_get(self, ve=None, ip_local_anycast_gateway=None, next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type next_hop: next_hop_address
    :param next_hop: Keyword argument tuple.

    :type next_hop_address: unicode
    :param next_hop_address: **next_hop** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, next_hop=next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ip_igmp_static_group_get(self, ve=None, ve_igmpl3_static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ve_igmpl3_static_group: igmpl3_sg_addr
    :param ve_igmpl3_static_group: Keyword argument tuple.

    :type igmpl3_sg_addr: unicode
    :param igmpl3_sg_addr: **ve_igmpl3_static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ip.igmp.ve_igmpl3_static_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u've_igmpl3_static_group', 'keyval': 'igmpl3_sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ve_igmpl3_static_group=ve_igmpl3_static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_access_group_get(self, ve=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_address_get(self, ve=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_dhcp_relay_get(self, ve=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_get(self, ve=None, ipv6_anycast_gateway=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: gve_name
    :param ve: Keyword argument tuple.

    :type gve_name: long
    :param gve_name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_anycast_gateway: ipv6_gw_id
    :param ipv6_anycast_gateway: Keyword argument tuple.

    :type ipv6_gw_id: long
    :param ipv6_gw_id: **ipv6_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve', u've'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve', u've'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'load-balancing'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-interface'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-network'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-next-hop'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6-gateway-address'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'gratuitous-arp'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6-gateway-address'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'gratuitous-arp'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6-gateway-address'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'gratuitous-arp')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_anycast_gateway', 'keyval': 'ipv6_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_anycast_gateway=ipv6_anycast_gateway)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_gateway_address_get(self, ve=None, ipv6_anycast_gateway=None, ipv6_gateway_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: gve_name
    :param ve: Keyword argument tuple.

    :type gve_name: long
    :param gve_name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_anycast_gateway: ipv6_gw_id
    :param ipv6_anycast_gateway: Keyword argument tuple.

    :type ipv6_gw_id: long
    :param ipv6_gw_id: **ipv6_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_gateway_address: ipv6_gw_addr
    :param ipv6_gateway_address: Keyword argument tuple.

    :type ipv6_gw_addr: unicode
    :param ipv6_gw_addr: **ipv6_gateway_address** tuple argument:  IPv6 Address/Prefix

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.interface_vlan.interface.ve', u've'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6_anycast_gateway'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve', u've'), ('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6_anycast_gateway'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve', u've'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway', u'ipv6_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway.ipv6_gateway_address', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway.ipv6_gateway_address', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.ve.ipv6.ipv6_anycast_gateway.ipv6_gateway_address', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'gve_name', 'extra_keyval': ''}, {'keyval': 'ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_gateway_address', 'keyval': 'ipv6_gw_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_anycast_gateway=ipv6_anycast_gateway, ipv6_gateway_address=ipv6_gateway_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_track_interface_get(self, ve=None, ipv6_local_anycast_gateway=None, ipv6_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_interface: ipv6_interface_type, ipv6_interface_name
    :param ipv6_interface: Keyword argument tuple.

    :type ipv6_interface_type: unicode
    :param ipv6_interface_type: **ipv6_interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type ipv6_interface_name: unicode
    :param ipv6_interface_name: **ipv6_interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_interface', 'keyval': 'ipv6_interface_type, ipv6_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_interface=ipv6_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_track_network_get(self, ve=None, ipv6_local_anycast_gateway=None, ipv6_network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_network: ipv6_network_address
    :param ipv6_network: Keyword argument tuple.

    :type ipv6_network_address: unicode
    :param ipv6_network_address: **ipv6_network** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_network', 'keyval': 'ipv6_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_network=ipv6_network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_fabric_virtual_gateway_track_next_hop_get(self, ve=None, ipv6_local_anycast_gateway=None, ipv6_next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_next_hop: ipv6_next_hop_address
    :param ipv6_next_hop: Keyword argument tuple.

    :type ipv6_next_hop_address: unicode
    :param ipv6_next_hop_address: **ipv6_next_hop** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_next_hop', 'keyval': 'ipv6_next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_next_hop=ipv6_next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_nd_address_get(self, ve=None, suppressing_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type suppressing_address: suppress_ipv6_address, suppress_per_address
    :param suppressing_address: Keyword argument tuple.

    :type suppress_ipv6_address: unicode
    :param suppress_ipv6_address: **suppressing_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type suppress_per_address: YANGBool
    :param suppress_per_address: **suppressing_address** tuple argument:  Suppress all IPv6 addresses in router advertisement

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.address.suppressing_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'suppressing_address', 'keyval': 'suppress_ipv6_address', 'extra_keyval': 'suppress_ipv6_address, suppress_per_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, suppressing_address=suppressing_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_nd_prefix_get(self, ve=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_nd_ra_dns_server_get(self, ve=None, ra_dns_server=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ra_dns_server: dns_server_prefix
    :param ra_dns_server: Keyword argument tuple.

    :type dns_server_prefix: unicode
    :param dns_server_prefix: **ra_dns_server** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_dns_server', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_dns_server', 'keyval': 'dns_server_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ra_dns_server=ra_dns_server)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_nd_ra_domain_name_get(self, ve=None, ra_domain_name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ra_domain_name: domain_name_string
    :param ra_domain_name: Keyword argument tuple.

    :type domain_name_string: unicode
    :param domain_name_string: **ra_domain_name** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.ra_domain_name', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ra_domain_name', 'keyval': 'domain_name_string', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, ra_domain_name=ra_domain_name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_neighbor_get(self, ve=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_get(self, ve=None, vrrpv3e=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'virtual-mac'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.track', u'interface'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'short-path-forwarding'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.track', u'network')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_track_get(self, ve=None, vrrpv3e=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_track_network_get(self, ve=None, vrrpv3e=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_address
    :param network: Keyword argument tuple.

    :type network_address: unicode
    :param network_address: **network** tuple argument:  XXXX::YYYY/L;;IPv6 global address prefix in ipv6-address/Prefix length format

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_extended_group_virtual_ip_get(self, ve=None, vrrpv3e=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3e=vrrpv3e, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_group_get(self, ve=None, vrrpv3=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3=vrrpv3)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_group_track_get(self, ve=None, vrrpv3=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3=vrrpv3, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_ipv6_vrrp_group_virtual_ip_get(self, ve=None, vrrpv3=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpv3=vrrpv3, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_isis_auth_key_get(self, ve=None, interface_auth_key=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_auth_key: interface_auth_key_level, interface_auth_key_str
    :param interface_auth_key: Keyword argument tuple.

    :type interface_auth_key_level: unicode
    :param interface_auth_key_level: **interface_auth_key** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_auth_key_str: unicode
    :param interface_auth_key_str: **interface_auth_key** tuple argument.

        * length restriction: ::

            ['1..63']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_auth_key', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_auth_key', 'keyval': 'interface_auth_key_level', 'extra_keyval': 'interface_auth_key_level, interface_auth_key_str'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_auth_key=interface_auth_key)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_isis_hello_interval_get(self, ve=None, interface_hello_interval=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_hello_interval: interface_hello_interval_level, interface_hello_interval_val
    :param interface_hello_interval: Keyword argument tuple.

    :type interface_hello_interval_level: unicode
    :param interface_hello_interval_level: **interface_hello_interval** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_hello_interval_val: long
    :param interface_hello_interval_val: **interface_hello_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_hello_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_interval', 'keyval': 'interface_hello_interval_level', 'extra_keyval': 'interface_hello_interval_level, interface_hello_interval_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_hello_interval=interface_hello_interval)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_isis_hello_multiplier_get(self, ve=None, interface_hello_multiplier=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_hello_multiplier: interface_hello_multiplier_level, interface_hello_multiplier_val
    :param interface_hello_multiplier: Keyword argument tuple.

    :type interface_hello_multiplier_level: unicode
    :param interface_hello_multiplier_level: **interface_hello_multiplier** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_hello_multiplier_val: long
    :param interface_hello_multiplier_val: **interface_hello_multiplier** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_hello_multiplier', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_hello_multiplier', 'keyval': 'interface_hello_multiplier_level', 'extra_keyval': 'interface_hello_multiplier_level, interface_hello_multiplier_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_hello_multiplier=interface_hello_multiplier)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_isis_ipv6_metric_get(self, ve=None, interface_ipv6_metric=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_ipv6_metric: interface_ipv6_metric_level, interface_ipv6_metric_val
    :param interface_ipv6_metric: Keyword argument tuple.

    :type interface_ipv6_metric_level: unicode
    :param interface_ipv6_metric_level: **interface_ipv6_metric** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_ipv6_metric_val: long
    :param interface_ipv6_metric_val: **interface_ipv6_metric** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_ipv6.interface_ipv6_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_ipv6_metric', 'keyval': 'interface_ipv6_metric_level', 'extra_keyval': 'interface_ipv6_metric_level, interface_ipv6_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_ipv6_metric=interface_ipv6_metric)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_isis_metric_get(self, ve=None, interface_metric=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface_metric: interface_metric_level, interface_metric_val
    :param interface_metric: Keyword argument tuple.

    :type interface_metric_level: unicode
    :param interface_metric_level: **interface_metric** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type interface_metric_val: long
    :param interface_metric_val: **interface_metric** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.intf_isis.interface_isis.interface_metric', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface_metric', 'keyval': 'interface_metric_level', 'extra_keyval': 'interface_metric_level, interface_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, interface_metric=interface_metric)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_extended_group_get(self, ve=None, vrrpe=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.track', u'network'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.track', u'interface'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.arp', u'unicast-request'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'short-path-forwarding')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpe', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_extended_group_track_get(self, ve=None, vrrpe=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_extended_group_track_network_get(self, ve=None, vrrpe=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_address
    :param network: Keyword argument tuple.

    :type network_address: unicode
    :param network_address: **network** tuple argument:  IPv4 global address

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-2])'
            ')'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.track.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_extended_group_virtual_ip_get(self, ve=None, vrrpe=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrpe.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrpe=vrrpe, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_group_get(self, ve=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', u'virtual-ip'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp.track', u'interface'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp.arp', u'unicast-request')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_group_track_get(self, ve=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp.track.interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_ve_vrrp_group_virtual_ip_get(self, ve=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve', u've'), ('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.interface.ve.vrrp.virtual_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ve=ve, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_vlan_ip_igmp_snooping_mrouter_interface_get(self, vlan=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface: if_type, value
    :param interface: Keyword argument tuple.

    :type if_type: unicode
    :param if_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['FortyGigabitEthernet',
            'GigabitEthernet',
            'Port-channel',
            'TenGigabitEthernet',
            'HundredGigabitEthernet']

    :type value: unicode
    :param value: **interface** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_vlan_ip_igmp_static_group_get(self, vlan=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_group: mcast_address, interface, if_type, value
    :param static_group: Keyword argument tuple.

    :type mcast_address: unicode
    :param mcast_address: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type interface: unicode
    :param interface: **static_group** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type if_type: unicode
    :param if_type: **static_group** tuple argument.

        * enumeration restriction: ::

            ['FortyGigabitEthernet',
            'GigabitEthernet',
            'Port-channel',
            'TenGigabitEthernet',
            'HundredGigabitEthernet']

    :type value: unicode
    :param value: **static_group** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'mcast_address, interface, if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_vlan_ipv6_mld_snooping_mrouter_interface_get(self, vlan=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface: if_type, value
    :param interface: Keyword argument tuple.

    :type if_type: unicode
    :param if_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['FortyGigabitEthernet',
            'GigabitEthernet',
            'Port-channel',
            'TenGigabitEthernet',
            'HundredGigabitEthernet']

    :type value: unicode
    :param value: **interface** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_vlan_ipv6_mld_static_group_get(self, vlan=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_group: mcast_address, interface, if_type, value
    :param static_group: Keyword argument tuple.

    :type mcast_address: unicode
    :param mcast_address: **static_group** tuple argument:  Multicast Address to be Joined in format xxxx:xxxx/ml, xxxx:xxxx::/ml

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type interface: unicode
    :param interface: **static_group** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type if_type: unicode
    :param if_type: **static_group** tuple argument.

        * enumeration restriction: ::

            ['FortyGigabitEthernet',
            'GigabitEthernet',
            'Port-channel',
            'TenGigabitEthernet',
            'HundredGigabitEthernet']

    :type value: unicode
    :param value: **static_group** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan.static_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan.static_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan.static_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'mcast_address, interface, if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def interface_vlan_mac_access_group_get(self, vlan=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'vlan')]
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.mac.access_group', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.mac.access_group', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.mac.access_group', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_access_list_extended_get(self, extended=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended: name
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended.hide_ip_acl_ext', u'seq'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended.hide_ip_acl_ext', u'seq'), ('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended.hide_ip_acl_ext', u'seq'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended.hide_ip_acl_ext', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_access_list_extended_seq_get(self, extended=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type extended: name
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log
    :param seq: Keyword argument tuple.

    :type seq_id: long
    :param seq_id: **seq** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type action: unicode
    :param action: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'hard-drop', 'permit']

    :type protocol_type: unicode
    :param protocol_type: **seq** tuple argument.

        * enumeration restriction: ::

            ['ip', 'udp', 'icmp', 'tcp']

    :type src_host_any_sip: unicode
    :param src_host_any_sip: **seq** tuple argument.

        * enumeration restriction: ::

            ['host', 'any']

    :type src_host_ip: unicode
    :param src_host_ip: **seq** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_mask: unicode
    :param src_mask: **seq** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type sport: unicode
    :param sport: **seq** tuple argument.

        * enumeration restriction: ::

            ['lt', 'gt', 'eq', 'range', 'neq']

    :type sport_number_eq_neq_tcp: unicode
    :param sport_number_eq_neq_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_lt_tcp: unicode
    :param sport_number_lt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_gt_tcp: unicode
    :param sport_number_gt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_eq_neq_udp: unicode
    :param sport_number_eq_neq_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_lt_udp: unicode
    :param sport_number_lt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_gt_udp: unicode
    :param sport_number_gt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_range_lower_tcp: unicode
    :param sport_number_range_lower_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_range_lower_udp: unicode
    :param sport_number_range_lower_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_range_higher_tcp: unicode
    :param sport_number_range_higher_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_range_higher_udp: unicode
    :param sport_number_range_higher_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dst_host_any_dip: unicode
    :param dst_host_any_dip: **seq** tuple argument.

        * enumeration restriction: ::

            ['host', 'any']

    :type dst_host_ip: unicode
    :param dst_host_ip: **seq** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type dst_mask: unicode
    :param dst_mask: **seq** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type dport: unicode
    :param dport: **seq** tuple argument.

        * enumeration restriction: ::

            ['lt', 'gt', 'eq', 'range', 'neq']

    :type dport_number_eq_neq_tcp: unicode
    :param dport_number_eq_neq_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_lt_tcp: unicode
    :param dport_number_lt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_gt_tcp: unicode
    :param dport_number_gt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_eq_neq_udp: unicode
    :param dport_number_eq_neq_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_lt_udp: unicode
    :param dport_number_lt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_gt_udp: unicode
    :param dport_number_gt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_range_lower_tcp: unicode
    :param dport_number_range_lower_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_range_lower_udp: unicode
    :param dport_number_range_lower_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_range_higher_tcp: unicode
    :param dport_number_range_higher_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_range_higher_udp: unicode
    :param dport_number_range_higher_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dscp: unicode
    :param dscp: **seq** tuple argument:  Differentiated Service Code Point

        * enumeration restriction: ::

            ['af23',
            'af22',
            'af21',
            'af33',
            'af41',
            'af43',
            'af31',
            'default',
            'af42',
            'af12',
            'af32',
            'af13',
            'cs6',
            'cs2',
            'cs5',
            'cs4',
            'cs7',
            'af11',
            'cs1',
            'cs3',
            'ef']

    :type urg: YANGBool
    :param urg: **seq** tuple argument:  Urgent

    :type ack: YANGBool
    :param ack: **seq** tuple argument:  Acknowledgement

    :type push: YANGBool
    :param push: **seq** tuple argument:  Push

    :type fin: YANGBool
    :param fin: **seq** tuple argument:  No more data

    :type rst: YANGBool
    :param rst: **seq** tuple argument:  Reset connection

    :type sync: YANGBool
    :param sync: **seq** tuple argument:  Synchronize

    :type vlan: long
    :param vlan: **seq** tuple argument:  Vlan

        * range restriction: ::

            ['0..4294967295']

    :type count: YANGBool
    :param count: **seq** tuple argument:  Packet Count

    :type log: YANGBool
    :param log: **seq** tuple argument:  Log Packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended', u'extended'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended', u'extended'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended', u'extended'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended', u'extended')]
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.extended.hide_ip_acl_ext.seq', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_access_list_standard_get(self, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type standard: name
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard.hide_ip_acl_std', u'seq'), ('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard.hide_ip_acl_std', u'seq'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard.hide_ip_acl_std', u'seq'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard.hide_ip_acl_std', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_access_list_standard_seq_get(self, standard=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type standard: name
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log
    :param seq: Keyword argument tuple.

    :type seq_id: long
    :param seq_id: **seq** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type action: unicode
    :param action: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'hard-drop', 'permit']

    :type src_host_any_sip: unicode
    :param src_host_any_sip: **seq** tuple argument.

        * enumeration restriction: ::

            ['host', 'any']

    :type src_host_ip: unicode
    :param src_host_ip: **seq** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_mask: unicode
    :param src_mask: **seq** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type count: YANGBool
    :param count: **seq** tuple argument:  Packet count

    :type log: YANGBool
    :param log: **seq** tuple argument:  Log Packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard', u'standard'), ('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard', u'standard'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard', u'standard'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard', u'standard')]
    bindings_list = [('pybind.nos.v6_0_2b.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.nos.v6_0_2b.brocade_ip_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.nos.v7_0_1a.brocade_ip_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.nos.v7_1_0.brocade_ip_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip_acl.ip.access_list.standard.hide_ip_acl_std.seq', 'pybind.slxos.v16r_1_00b.brocade_ip_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log, copy_sflow'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_as_path_access_list_get(self, access_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type access_list: name, seq_keyword, instance, ip_action, ip_reg_expr
    :param access_list: Keyword argument tuple.

    :type name: unicode
    :param name: **access_list** tuple argument.

        * length restriction: ::

            ['1..32']

    :type seq_keyword: unicode
    :param seq_keyword: **access_list** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **access_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ip_action: unicode
    :param ip_action: **access_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ip_reg_expr: unicode
    :param ip_reg_expr: **access_list** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_as_path_holder.as_path.access_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_as_path_holder.as_path.access_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_as_path_holder.as_path.access_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_as_path_holder.as_path.access_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_list=access_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_community_list_extended_get(self, extended=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended: name, seq_keyword, instance, ip_action, ip_community_reg_expr
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument.

    :type seq_keyword: unicode
    :param seq_keyword: **extended** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **extended** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ip_action: unicode
    :param ip_action: **extended** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ip_community_reg_expr: unicode
    :param ip_community_reg_expr: **extended** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_community_list_holder.community_list.extended', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_community_list_holder.community_list.extended', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_community_list_holder.community_list.extended', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_community_list_holder.community_list.extended', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_community_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_community_list_standard_get(self, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type standard: name, seq_keyword, instance, ip_action, std_community_expr
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument.

    :type seq_keyword: unicode
    :param seq_keyword: **standard** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **standard** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ip_action: unicode
    :param ip_action: **standard** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type std_community_expr: unicode
    :param std_community_expr: **standard** tuple argument.

        * pattern restriction: ::

            '(\s*)|(\s*((local\-as)|(internet)|(no\-export)|('
            'no\-advertise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4'
            '})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2]['
            '0-9])|(6553[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9'
            ']{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-'
            '2][0-9])|(6553[0-5])))|([1-9][0-9]{0,8})|([1-3]['
            '0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429'
            '[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0'
            '-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]'
            '{2})|(42949672[0-8][0-9])|(429496729[0-5])))((\s'
            '+((local\-as)|(internet)|(no\-export)|(no\-adver'
            'tise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4'
            '][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(65'
            '53[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9]{4})|(6['
            '0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|'
            '(6553[0-5])))|([1-9][0-9]{0,8})|([1-3][0-9]{9})|'
            '(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9'
            ']{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|('
            '429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(429'
            '49672[0-8][0-9])|(429496729[0-5])))*)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_community_list_holder.community_list.standard', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_community_list_holder.community_list.standard', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_community_list_holder.community_list.standard', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_community_list_holder.community_list.standard', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, std_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_dns_name_server_get(self, name_server=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type name_server: name_server_ip
    :param name_server: Keyword argument tuple.

    :type name_server_ip: unicode
    :param name_server_ip: **name_server** tuple argument:  IPv4ADDRESS/IPv6ADDRESS;;The IPv4 or Ipv6 Address for Name Server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.dns.name_server', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.dns.name_server', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.dns.name_server', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.dns.name_server', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'name_server', 'keyval': 'name_server_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, name_server=name_server)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_extcommunity_list_get(self, extcommunity_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type extcommunity_list: extcommunity_list_num, ext_community_action, ext_community_expr
    :param extcommunity_list: Keyword argument tuple.

    :type extcommunity_list_num: int
    :param extcommunity_list_num: **extcommunity_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ext_community_action: unicode
    :param ext_community_action: **extcommunity_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ext_community_expr: unicode
    :param ext_community_expr: **extcommunity_list** tuple argument:  Ext-community-list

        * pattern restriction: ::

            '(\s*)|(\s*((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3]'
            '[0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(42'
            '9[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5]['
            '0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9'
            ']{2})|(42949672[0-8][0-9])|(429496729[0-5])):((['
            '1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})'
            '|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8]'
            '[0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]'
            '{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])'
            '|(429496729[0-5])))|((([0-9]|[1-9][0-9]|1[0-9]{2'
            '}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1['
            '0-9]{2}|2[0-4][0-9]|25[0-5]):(([1-9][0-9]{0,8})|'
            '([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7'
            '})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949'
            '[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-'
            '1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5]'
            ')))))((\s+((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3]'
            '[0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(42'
            '9[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5]['
            '0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9'
            ']{2})|(42949672[0-8][0-9])|(429496729[0-5])):((['
            '1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})'
            '|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8]'
            '[0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]'
            '{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])'
            '|(429496729[0-5])))|(((([0-9]|[1-9][0-9]|1[0-9]{'
            '2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1'
            '[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,8}'
            ')|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]'
            '{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(429'
            '49[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967['
            '0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-'
            '5])))))*)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_ext_community_list_holder.extcommunity_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_ext_community_list_holder.extcommunity_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_ext_community_list_holder.extcommunity_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extcommunity_list', 'keyval': 'extcommunity_list_num', 'extra_keyval': 'extcommunity_list_num, ext_community_action, ext_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extcommunity_list=extcommunity_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_extcommunity_list_standard_get(self, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type standard: extcommunity_list_name, ext_community_action, ext_community_expr
    :param standard: Keyword argument tuple.

    :type extcommunity_list_name: unicode
    :param extcommunity_list_name: **standard** tuple argument.

    :type ext_community_action: unicode
    :param ext_community_action: **standard** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ext_community_expr: unicode
    :param ext_community_expr: **standard** tuple argument:  Ext-community-list

        * pattern restriction: ::

            '(\s*)|(\s*((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3]'
            '[0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(42'
            '9[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5]['
            '0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9'
            ']{2})|(42949672[0-8][0-9])|(429496729[0-5])):((['
            '1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})'
            '|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8]'
            '[0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]'
            '{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])'
            '|(429496729[0-5])))|((([0-9]|[1-9][0-9]|1[0-9]{2'
            '}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1['
            '0-9]{2}|2[0-4][0-9]|25[0-5]):(([1-9][0-9]{0,8})|'
            '([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7'
            '})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949'
            '[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-'
            '1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5]'
            ')))))((\s+((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3]'
            '[0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(42'
            '9[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5]['
            '0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9'
            ']{2})|(42949672[0-8][0-9])|(429496729[0-5])):((['
            '1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})'
            '|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8]'
            '[0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]'
            '{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])'
            '|(429496729[0-5])))|(((([0-9]|[1-9][0-9]|1[0-9]{'
            '2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1'
            '[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,8}'
            ')|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]'
            '{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(429'
            '49[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967['
            '0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-'
            '5])))))*)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ip.hide_ext_community_list_holder.extcommunity_list.standard', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'extcommunity_list_name', 'extra_keyval': 'extcommunity_list_name, ext_community_action, ext_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_igmp_ssm_map_get(self, igmps_prefix_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type igmps_prefix_list: igmps_prefix_list_name, igmps_prefix_src_addr
    :param igmps_prefix_list: Keyword argument tuple.

    :type igmps_prefix_list_name: unicode
    :param igmps_prefix_list_name: **igmps_prefix_list** tuple argument:  ASCII string    Access-list name or number

    :type igmps_prefix_src_addr: unicode
    :param igmps_prefix_src_addr: **igmps_prefix_list** tuple argument:  A.B.C.D     Source address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.igmp_snooping.ip.igmp.ssm_map.igmps_prefix_list', 'pybind.slxos.v16r_1_00b.brocade_igmp_snooping', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'igmps_prefix_list', 'keyval': 'igmps_prefix_list_name, igmps_prefix_src_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, igmps_prefix_list=igmps_prefix_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_import_routes_get(self, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ip.rtm_config.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_prefix_list_get(self, prefix_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type prefix_list: name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp
    :param prefix_list: Keyword argument tuple.

    :type name: unicode
    :param name: **prefix_list** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type seq_keyword: unicode
    :param seq_keyword: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **prefix_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type action_ipp: unicode
    :param action_ipp: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type prefix_ipp: unicode
    :param prefix_ipp: **prefix_list** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type ge_ipp: long
    :param ge_ipp: **prefix_list** tuple argument:  Minimum IP prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type le_ipp: long
    :param le_ipp: **prefix_list** tuple argument:  Maximum IP prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.hide_prefix_holder.prefix_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.hide_prefix_holder.prefix_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.hide_prefix_holder.prefix_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.hide_prefix_holder.prefix_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_list=prefix_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_receive_access_group_get(self, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type access_group: acl_name
    :param access_group: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ip.receive.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_route_get(self, static_route_nh_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type static_route_nh_vrf: static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop
    :param static_route_nh_vrf: Keyword argument tuple.

    :type static_route_next_vrf_dest: unicode
    :param static_route_next_vrf_dest: **static_route_nh_vrf** tuple argument:  A.B.C.D/L ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type next_hop_vrf: unicode
    :param next_hop_vrf: **static_route_nh_vrf** tuple argument:  Next Hop Vrf Name

    :type static_route_next_hop: unicode
    :param static_route_next_hop: **static_route_nh_vrf** tuple argument:  A.B.C.D ;; Next hop IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static_route_oif_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ip_route_static_bfd_get(self, bfd_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bfd_static_route: bfd_static_route_dest, bfd_static_route_src
    :param bfd_static_route: Keyword argument tuple.

    :type bfd_static_route_dest: unicode
    :param bfd_static_route_dest: **bfd_static_route** tuple argument:  A.B.C.D ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type bfd_static_route_src: unicode
    :param bfd_static_route_src: **bfd_static_route** tuple argument:  A.B.C.D ;; Source IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v7_0_1a.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v7_1_0.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v6_0_2b.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bfd_static_route=bfd_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_access_list_extended_get(self, extended=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended: name
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended', u'seq'), ('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended', u'seq'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended', u'seq'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_access_list_extended_seq_get(self, extended=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type extended: name
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log
    :param seq: Keyword argument tuple.

    :type seq_id: long
    :param seq_id: **seq** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type action: unicode
    :param action: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'hard-drop', 'permit']

    :type protocol_type: unicode
    :param protocol_type: **seq** tuple argument.

        * enumeration restriction: ::

            ['udp', 'ipv6-icmp', 'tcp', 'ipv6']

    :type src_host_any_sip: unicode
    :param src_host_any_sip: **seq** tuple argument.

        * enumeration restriction: ::

            ['host', 'any']

    :type src_host_ip: unicode
    :param src_host_ip: **seq** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type src_mask: unicode
    :param src_mask: **seq** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type sport: unicode
    :param sport: **seq** tuple argument.

        * enumeration restriction: ::

            ['lt', 'gt', 'eq', 'range', 'neq']

    :type sport_number_eq_neq_tcp: unicode
    :param sport_number_eq_neq_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_lt_tcp: unicode
    :param sport_number_lt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_gt_tcp: unicode
    :param sport_number_gt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_eq_neq_udp: unicode
    :param sport_number_eq_neq_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_lt_udp: unicode
    :param sport_number_lt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_gt_udp: unicode
    :param sport_number_gt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_range_lower_tcp: unicode
    :param sport_number_range_lower_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_range_lower_udp: unicode
    :param sport_number_range_lower_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type sport_number_range_higher_tcp: unicode
    :param sport_number_range_higher_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type sport_number_range_higher_udp: unicode
    :param sport_number_range_higher_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dst_host_any_dip: unicode
    :param dst_host_any_dip: **seq** tuple argument.

        * enumeration restriction: ::

            ['host', 'any']

    :type dst_host_ip: unicode
    :param dst_host_ip: **seq** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type dst_mask: unicode
    :param dst_mask: **seq** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type dport: unicode
    :param dport: **seq** tuple argument.

        * enumeration restriction: ::

            ['lt', 'gt', 'eq', 'range', 'neq']

    :type dport_number_eq_neq_tcp: unicode
    :param dport_number_eq_neq_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_lt_tcp: unicode
    :param dport_number_lt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_gt_tcp: unicode
    :param dport_number_gt_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_eq_neq_udp: unicode
    :param dport_number_eq_neq_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_lt_udp: unicode
    :param dport_number_lt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_gt_udp: unicode
    :param dport_number_gt_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_range_lower_tcp: unicode
    :param dport_number_range_lower_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_range_lower_udp: unicode
    :param dport_number_range_lower_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dport_number_range_higher_tcp: unicode
    :param dport_number_range_higher_tcp: **seq** tuple argument.

        * enumeration restriction: ::

            ['ftp',
            'domain',
            'tacacs',
            'hostname',
            'smtp',
            'www',
            'telnet',
            'echo',
            'bgp',
            'syslog',
            'ftp-data',
            'daytime',
            'time',
            'pim-auto-rp',
            'login',
            'talk']

    :type dport_number_range_higher_udp: unicode
    :param dport_number_range_higher_udp: **seq** tuple argument.

        * enumeration restriction: ::

            ['domain',
            'ntp',
            'rip',
            'echo',
            'syslog',
            'pim-auto-rp',
            'tacacs',
            'snmp',
            'bootps',
            'tftp',
            'bootpc']

    :type dscp: unicode
    :param dscp: **seq** tuple argument:  Differentiated Service Code Point

        * enumeration restriction: ::

            ['af23',
            'af22',
            'af21',
            'af33',
            'af41',
            'af43',
            'af31',
            'default',
            'af42',
            'af12',
            'af32',
            'af13',
            'cs6',
            'cs2',
            'cs5',
            'cs4',
            'cs7',
            'af11',
            'cs1',
            'cs3',
            'ef']

    :type urg: YANGBool
    :param urg: **seq** tuple argument:  Urgent

    :type ack: YANGBool
    :param ack: **seq** tuple argument:  Acknowledgement

    :type push: YANGBool
    :param push: **seq** tuple argument:  Push

    :type fin: YANGBool
    :param fin: **seq** tuple argument:  No more data

    :type rst: YANGBool
    :param rst: **seq** tuple argument:  Reset connection

    :type sync: YANGBool
    :param sync: **seq** tuple argument:  Synchronize

    :type vlan: long
    :param vlan: **seq** tuple argument:  Vlan

        * range restriction: ::

            ['0..4294967295']

    :type count: YANGBool
    :param count: **seq** tuple argument:  Packet Count

    :type log: YANGBool
    :param log: **seq** tuple argument:  Log Packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended', u'extended'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended', u'extended'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended', u'extended'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended', u'extended')]
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.extended.seq', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, protocol_type, src_host_any_sip, src_host_ip, src_mask, sport, sport_number_eq_neq_tcp, sport_number_lt_tcp, sport_number_gt_tcp, sport_number_eq_neq_udp, sport_number_lt_udp, sport_number_gt_udp, sport_number_range_lower_tcp, sport_number_range_lower_udp, sport_number_range_higher_tcp, sport_number_range_higher_udp, dst_host_any_dip, dst_host_ip, dst_mask, dport, dport_number_eq_neq_tcp, dport_number_lt_tcp, dport_number_gt_tcp, dport_number_eq_neq_udp, dport_number_lt_udp, dport_number_gt_udp, dport_number_range_lower_tcp, dport_number_range_lower_udp, dport_number_range_higher_tcp, dport_number_range_higher_udp, dscp, urg, ack, push, fin, rst, sync, vlan, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_access_list_standard_get(self, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type standard: name
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard', u'seq'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard', u'seq'), ('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard', u'seq'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_access_list_standard_seq_get(self, standard=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type standard: name
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument.

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log
    :param seq: Keyword argument tuple.

    :type seq_id: long
    :param seq_id: **seq** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type action: unicode
    :param action: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'hard-drop', 'permit']

    :type src_host_any_sip: unicode
    :param src_host_any_sip: **seq** tuple argument.

        * enumeration restriction: ::

            ['host', 'any']

    :type src_host_ip: unicode
    :param src_host_ip: **seq** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type src_mask: unicode
    :param src_mask: **seq** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type count: YANGBool
    :param count: **seq** tuple argument:  Packet count

    :type log: YANGBool
    :param log: **seq** tuple argument:  Log Packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard', u'standard'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard', u'standard'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard', u'standard'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard', u'standard')]
    bindings_list = [('pybind.nos.v6_0_2b.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.nos.v6_0_2b.brocade_ipv6_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.nos.v7_0_1a.brocade_ipv6_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.nos.v7_1_0.brocade_ipv6_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6_acl.ipv6.access_list.standard.seq', 'pybind.slxos.v16r_1_00b.brocade_ipv6_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, src_host_any_sip, src_host_ip, src_mask, count, log, copy_sflow'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_import_routes_get(self, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_nd_ra_dns_server_get(self, dns_server_global=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type dns_server_global: dns_server_prefix_global
    :param dns_server_global: Keyword argument tuple.

    :type dns_server_prefix_global: unicode
    :param dns_server_prefix_global: **dns_server_global** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.ipv6_global_cmds.nd_global.dns_server_global', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dns_server_global', 'keyval': 'dns_server_prefix_global', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dns_server_global=dns_server_global)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_nd_ra_domain_name_get(self, domain_name_global=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type domain_name_global: domain_name_string_global
    :param domain_name_global: Keyword argument tuple.

    :type domain_name_string_global: unicode
    :param domain_name_string_global: **domain_name_global** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.ipv6_global_cmds.nd_global.domain_name_global', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain_name_global', 'keyval': 'domain_name_string_global', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name_global=domain_name_global)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_prefix_list_get(self, prefix_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type prefix_list: name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp
    :param prefix_list: Keyword argument tuple.

    :type name: unicode
    :param name: **prefix_list** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type seq_keyword: unicode
    :param seq_keyword: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **prefix_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type action_ipp: unicode
    :param action_ipp: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ipv6_prefix_ipp: unicode
    :param ipv6_prefix_ipp: **prefix_list** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type ge_ipp: long
    :param ge_ipp: **prefix_list** tuple argument:  Minimum IPv6 prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type le_ipp: long
    :param le_ipp: **prefix_list** tuple argument:  Maximum IPv6 prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6.hide_prefix_holder.prefix_list', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6.hide_prefix_holder.prefix_list', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6.hide_prefix_holder.prefix_list', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.prefix_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_list=prefix_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_receive_access_group_get(self, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type access_group: acl_name
    :param access_group: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.receive.access_group', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_route_get(self, route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type route: dest
    :param route: Keyword argument tuple.

    :type dest: unicode
    :param dest: **route** tuple argument:  IPv6Address/prefix.;; Destination IPv6 address-prefix

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ipv6.ipv6route.route', 'pybind.nos.v6_0_2b.brocade_common_def', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ipv6.ipv6route.route', 'pybind.nos.v7_0_1a.brocade_common_def', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ipv6.ipv6route.route', 'pybind.nos.v7_1_0.brocade_common_def', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ipv6.ipv6route.route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.link_local_static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.static_route_oif', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ipv6.route.static_route_oif', u'route-attributes')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static_route_oif', 'keyval': 'static_route_dest, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_route_static_bfd_get(self, bfd_ipv6_link_local_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bfd_ipv6_link_local_static_route: bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name
    :param bfd_ipv6_link_local_static_route: Keyword argument tuple.

    :type bfd_ipv6_link_local_dest: unicode
    :param bfd_ipv6_link_local_dest: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Destination IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_ipv6_link_local_src: unicode
    :param bfd_ipv6_link_local_src: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Source IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_interface_type: unicode
    :param bfd_interface_type: **bfd_ipv6_link_local_static_route** tuple argument:  Outgoing interface type

        * enumeration restriction: ::

            ['ethernet', 'null', 've']

    :type bfd_interface_name: unicode
    :param bfd_interface_name: **bfd_ipv6_link_local_static_route** tuple argument.

        * length restriction: ::

            ['1..16']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.slxos.v16r_1_00b.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_static_route', 'keyval': 'bfd_ipv6_static_route_dest, bfd_ipv6_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_router_ospf_get(self, ospf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.log', u'log-adjacency'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.timers', u'spf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.distribute_list', u'prefix-list'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.graceful_restart', u'helper'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.redistribute', u'redistribute-isis'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'global-default-information-originate'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.log', u'log-bad-packet'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.redistribute', u'redistribute-connected'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'distance'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'area'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.redistribute', u'redistribute-bgp'), ('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.af_common_attributes.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.max_metric.router_lsa', u'external-lsa'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.redistribute', u'redistribute-static'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.max_metric', u'router-lsa'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'auto-cost'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'log'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.distribute_list', u'route-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.af_common_attributes.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'summary-address'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_router_ospf_area_get(self, ospf=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'stub'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'virtual-link'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.authentication', u'ipsec-auth-key-config'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.nssa', u'area-default-information-originate'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.nssa', u'metric'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'area-range'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'nssa')]
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_router_ospf_area_range_get(self, ospf=None, area=None, area_range=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type area_range: range_address, range_effect, range_cost
    :param area_range: Keyword argument tuple.

    :type range_address: unicode
    :param range_address: **area_range** tuple argument:  A:B::C:D/LEN;; IPv6 address to match

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type range_effect: unicode
    :param range_effect: **area_range** tuple argument:  Advertise/Do not advertise this type-3 summarization

        * enumeration restriction: ::

            ['advertise', 'not-advertise']

    :type range_cost: long
    :param range_cost: **area_range** tuple argument:  Configure area range cost

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.area_range', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area_range', 'keyval': 'range_address', 'extra_keyval': 'range_address, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, area_range=area_range)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_router_ospf_area_virtual_link_get(self, ospf=None, area=None, virtual_link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type virtual_link: virtual_link_neighbor
    :param virtual_link: Keyword argument tuple.

    :type virtual_link_neighbor: unicode
    :param virtual_link_neighbor: **virtual_link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.virtual_link', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.virtual_link.link_properties.authentication', u'ipsec-auth-key-config'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.area.virtual_link.link_properties', u'link-interval-properties')]
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virtual_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_router_ospf_distance_get(self, ospf=None, distance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type distance: route_type
    :param distance: Keyword argument tuple.

    :type route_type: unicode
    :param route_type: **distance** tuple argument:  The type of route propagation

        * enumeration restriction: ::

            ['intra-area', 'external', 'inter-area']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.distance', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, distance=distance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ipv6_router_ospf_summary_address_get(self, ospf=None, summary_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type summary_address: summary_address_value
    :param summary_address: Keyword argument tuple.

    :type summary_address_value: unicode
    :param summary_address_value: **summary_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.ipv6.router.ospf.summary_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'summary_address_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, summary_address=summary_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_database_get(self, database=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type database: level
    :param database: Keyword argument tuple.

    :type level: long
    :param level: **database** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'lsp-entry')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'database', 'keyval': 'level', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_database_lsp_entry_get(self, database=None, lsp_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type database: level
    :param database: Keyword argument tuple.

    :type level: long
    :param level: **database** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type lsp_entry: lsp_level, lsp_id
    :param lsp_entry: Keyword argument tuple.

    :type lsp_level: long
    :param lsp_level: **lsp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: unicode
    :param lsp_id: **lsp_entry** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'database')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', u'lsp-tlv-entry')]
    compositions_keyval_list = [{'keyval': 'level', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp_entry', 'keyval': 'lsp_level, lsp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database, lsp_entry=lsp_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_database_lsp_entry_lsp_tlv_entry_get(self, database=None, lsp_entry=None, lsp_tlv_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type database: level
    :param database: Keyword argument tuple.

    :type level: long
    :param level: **database** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_entry: lsp_level, lsp_id
    :param lsp_entry: Keyword argument tuple.

    :type lsp_level: long
    :param lsp_level: **lsp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: unicode
    :param lsp_id: **lsp_entry** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type lsp_tlv_entry: type
    :param lsp_tlv_entry: Keyword argument tuple.

    :type type: long
    :param type: **lsp_tlv_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'database'), ('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', u'lsp_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry', u'sub-tlv-entry')]
    compositions_keyval_list = [{'keyval': 'level', 'extra_keyval': ''}, {'keyval': 'lsp_level, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp_tlv_entry', 'keyval': 'type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database, lsp_entry=lsp_entry, lsp_tlv_entry=lsp_tlv_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_database_lsp_entry_lsp_tlv_entry_sub_tlv_entry_get(self, database=None, lsp_entry=None, lsp_tlv_entry=None, sub_tlv_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type database: level
    :param database: Keyword argument tuple.

    :type level: long
    :param level: **database** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_entry: lsp_level, lsp_id
    :param lsp_entry: Keyword argument tuple.

    :type lsp_level: long
    :param lsp_level: **lsp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: unicode
    :param lsp_id: **lsp_entry** tuple argument.

    :type lsp_tlv_entry: type
    :param lsp_tlv_entry: Keyword argument tuple.

    :type type: long
    :param type: **lsp_tlv_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type sub_tlv_entry: type
    :param sub_tlv_entry: Keyword argument tuple.

    :type type: long
    :param type: **sub_tlv_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.database', u'database'), ('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry', u'lsp_entry'), ('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry', u'lsp_tlv_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.database.lsp_entry.lsp_tlv_entry.sub_tlv_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'level', 'extra_keyval': ''}, {'keyval': 'lsp_level, lsp_id', 'extra_keyval': ''}, {'keyval': 'type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'sub_tlv_entry', 'keyval': 'type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, database=database, lsp_entry=lsp_entry, lsp_tlv_entry=lsp_tlv_entry, sub_tlv_entry=sub_tlv_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_host_table_isis_router_entry_get(self, isis_router_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type isis_router_entry: system_id
    :param isis_router_entry: Keyword argument tuple.

    :type system_id: unicode
    :param system_id: **isis_router_entry** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.host_table.isis_router_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isis_router_entry', 'keyval': 'system_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_router_entry=isis_router_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_interface_brief_isis_intf_brief_get(self, isis_intf_brief=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type isis_intf_brief: intf_name
    :param isis_intf_brief: Keyword argument tuple.

    :type intf_name: unicode
    :param intf_name: **isis_intf_brief** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_brief.isis_intf_brief', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isis_intf_brief', 'keyval': 'intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf_brief=isis_intf_brief)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_interface_detail_isis_intf_get(self, isis_intf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type isis_intf: intf_name
    :param isis_intf: Keyword argument tuple.

    :type intf_name: unicode
    :param intf_name: **isis_intf** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'circ-chstats'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'ip6-info'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'ip-info'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'l1-circ-metrics'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'l2-circ-metrics'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'reverse-metric-info'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'ldp-sync-info'), ('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'mpls-info')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isis_intf', 'keyval': 'intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf=isis_intf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_interface_detail_isis_intf_ip6_info_get(self, isis_intf=None, ip6_info=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type isis_intf: intf_name
    :param isis_intf: Keyword argument tuple.

    :type intf_name: unicode
    :param intf_name: **isis_intf** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type ip6_info: ip6_add
    :param ip6_info: Keyword argument tuple.

    :type ip6_add: unicode
    :param ip6_add: **ip6_info** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'isis_intf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf.ip6_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'intf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip6_info', 'keyval': 'ip6_add', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf=isis_intf, ip6_info=ip6_info)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_interface_detail_isis_intf_ip_info_get(self, isis_intf=None, ip_info=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type isis_intf: intf_name
    :param isis_intf: Keyword argument tuple.

    :type intf_name: unicode
    :param intf_name: **isis_intf** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type ip_info: ip_add
    :param ip_info: Keyword argument tuple.

    :type ip_add: unicode
    :param ip_add: **ip_info** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf', u'isis_intf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.interface_detail.isis_intf.ip_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'intf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_info', 'keyval': 'ip_add', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isis_intf=isis_intf, ip_info=ip_info)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_ipv4_routes_ipv4_route_entry_get(self, ipv4_route_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ipv4_route_entry: ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len
    :param ipv4_route_entry: Keyword argument tuple.

    :type ipv4_dest_addr: unicode
    :param ipv4_dest_addr: **ipv4_route_entry** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ipv4_subnet_mask: unicode
    :param ipv4_subnet_mask: **ipv4_route_entry** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ipv4_prefix_len: int
    :param ipv4_prefix_len: **ipv4_route_entry** tuple argument.

        * range restriction: ::

            ['-128..127']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', u'nh-info')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ipv4_route_entry', 'keyval': 'ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv4_route_entry=ipv4_route_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_ipv4_routes_ipv4_route_entry_nh_info_get(self, ipv4_route_entry=None, nh_info=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ipv4_route_entry: ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len
    :param ipv4_route_entry: Keyword argument tuple.

    :type ipv4_dest_addr: unicode
    :param ipv4_dest_addr: **ipv4_route_entry** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ipv4_subnet_mask: unicode
    :param ipv4_subnet_mask: **ipv4_route_entry** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ipv4_prefix_len: int
    :param ipv4_prefix_len: **ipv4_route_entry** tuple argument.

        * range restriction: ::

            ['-128..127']

    **Instance Keyword Argument Tuple**:

    :type nh_info: outgoing_intf_name
    :param nh_info: Keyword argument tuple.

    :type outgoing_intf_name: unicode
    :param outgoing_intf_name: **nh_info** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', u'ipv4_route_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info', u'lsp-info')]
    compositions_keyval_list = [{'keyval': 'ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nh_info', 'keyval': 'outgoing_intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv4_route_entry=ipv4_route_entry, nh_info=nh_info)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_ipv4_routes_ipv4_route_entry_nh_info_lsp_info_get(self, ipv4_route_entry=None, nh_info=None, lsp_info=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ipv4_route_entry: ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len
    :param ipv4_route_entry: Keyword argument tuple.

    :type ipv4_dest_addr: unicode
    :param ipv4_dest_addr: **ipv4_route_entry** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ipv4_subnet_mask: unicode
    :param ipv4_subnet_mask: **ipv4_route_entry** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ipv4_prefix_len: int
    :param ipv4_prefix_len: **ipv4_route_entry** tuple argument.

        * range restriction: ::

            ['-128..127']

    :type nh_info: outgoing_intf_name
    :param nh_info: Keyword argument tuple.

    :type outgoing_intf_name: unicode
    :param outgoing_intf_name: **nh_info** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type lsp_info: lsp_name
    :param lsp_info: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp_info** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry', u'ipv4_route_entry'), ('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info', u'nh_info')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv4_routes.ipv4_route_entry.nh_info.lsp_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ipv4_dest_addr, ipv4_subnet_mask, ipv4_prefix_len', 'extra_keyval': ''}, {'keyval': 'outgoing_intf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp_info', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv4_route_entry=ipv4_route_entry, nh_info=nh_info, lsp_info=lsp_info)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_ipv6_routes_ipv6_route_entry_get(self, ipv6_route_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ipv6_route_entry: ipv6_dest_addr, ipv6_prefix_len
    :param ipv6_route_entry: Keyword argument tuple.

    :type ipv6_dest_addr: unicode
    :param ipv6_dest_addr: **ipv6_route_entry** tuple argument.

    :type ipv6_prefix_len: int
    :param ipv6_prefix_len: **ipv6_route_entry** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry', u'nh-info')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ipv6_route_entry', 'keyval': 'ipv6_dest_addr, ipv6_prefix_len', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv6_route_entry=ipv6_route_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_ipv6_routes_ipv6_route_entry_nh_info_get(self, ipv6_route_entry=None, nh_info=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ipv6_route_entry: ipv6_dest_addr, ipv6_prefix_len
    :param ipv6_route_entry: Keyword argument tuple.

    :type ipv6_dest_addr: unicode
    :param ipv6_dest_addr: **ipv6_route_entry** tuple argument.

    :type ipv6_prefix_len: int
    :param ipv6_prefix_len: **ipv6_route_entry** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type nh_info: outgoing_intf_name
    :param nh_info: Keyword argument tuple.

    :type outgoing_intf_name: unicode
    :param outgoing_intf_name: **nh_info** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry', u'ipv6_route_entry')]
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.ipv6_routes.ipv6_route_entry.nh_info', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ipv6_dest_addr, ipv6_prefix_len', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nh_info', 'keyval': 'outgoing_intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ipv6_route_entry=ipv6_route_entry, nh_info=nh_info)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_router_isis_config_is_address_family_v4_summary_address_v4_get(self, summary_address_v4=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type summary_address_v4: address
    :param summary_address_v4: Keyword argument tuple.

    :type address: unicode
    :param address: **summary_address_v4** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.router_isis_config.is_address_family_v4.summary_address_v4', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_address_v4', 'keyval': 'address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_address_v4=summary_address_v4)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_router_isis_config_is_address_family_v6_summary_prefix_v6_get(self, summary_prefix_v6=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type summary_prefix_v6: address
    :param summary_prefix_v6: Keyword argument tuple.

    :type address: unicode
    :param address: **summary_prefix_v6** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.router_isis_config.is_address_family_v6.summary_prefix_v6', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_prefix_v6', 'keyval': 'address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_prefix_v6=summary_prefix_v6)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isis_state_router_isis_config_isis_system_info_nsap_get(self, nsap=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type nsap: net_addr
    :param nsap: Keyword argument tuple.

    :type net_addr: unicode
    :param net_addr: **nsap** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.isis_state.router_isis_config.isis_system_info.nsap', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'nsap', 'keyval': 'net_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, nsap=nsap)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isns_vrf_forwarding_get(self, isns_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type isns_vrf: isns_vrf_instance
    :param isns_vrf: Keyword argument tuple.

    :type isns_vrf_instance: long
    :param isns_vrf_instance: **isns_vrf** tuple argument:  iSNS VRF forwarding value 1

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_1_0.isns.isns_vrf', 'pybind.nos.v7_1_0.brocade_isns', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.isns.isns_vrf', u'isns-discovery-domain-set'), ('pybind.nos.v7_1_0.isns.isns_vrf', u'isns-discovery-domain')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'isns_vrf', 'keyval': 'isns_vrf_instance', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isns_vrf=isns_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isns_vrf_forwarding_discovery_domain_get(self, isns_vrf=None, isns_discovery_domain=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type isns_vrf: isns_vrf_instance
    :param isns_vrf: Keyword argument tuple.

    :type isns_vrf_instance: long
    :param isns_vrf_instance: **isns_vrf** tuple argument:  iSNS VRF forwarding value 1

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type isns_discovery_domain: isns_discovery_domain_name
    :param isns_discovery_domain: Keyword argument tuple.

    :type isns_discovery_domain_name: unicode
    :param isns_discovery_domain_name: **isns_discovery_domain** tuple argument:  iSNS Discovery Domain Name (Max Size - 256)

        * length restriction: ::

            ['1..255']

        * pattern restriction: ::

            '[-_0-9a-zA-Z]{1,255}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.isns.isns_vrf', u'isns_vrf')]
    bindings_list = [('pybind.nos.v7_1_0.isns.isns_vrf.isns_discovery_domain', 'pybind.nos.v7_1_0.brocade_isns', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'isns_vrf_instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'isns_discovery_domain', 'keyval': 'isns_discovery_domain_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isns_vrf=isns_vrf, isns_discovery_domain=isns_discovery_domain)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def isns_vrf_forwarding_discovery_domain_set_get(self, isns_vrf=None, isns_discovery_domain_set=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type isns_vrf: isns_vrf_instance
    :param isns_vrf: Keyword argument tuple.

    :type isns_vrf_instance: long
    :param isns_vrf_instance: **isns_vrf** tuple argument:  iSNS VRF forwarding value 1

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type isns_discovery_domain_set: isns_discovery_domain_set_name
    :param isns_discovery_domain_set: Keyword argument tuple.

    :type isns_discovery_domain_set_name: unicode
    :param isns_discovery_domain_set_name: **isns_discovery_domain_set** tuple argument:  iSNS Discovery Domain Set Name (Max Size - 256)

        * length restriction: ::

            ['1..255']

        * pattern restriction: ::

            '[-_0-9a-zA-Z]{1,255}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.isns.isns_vrf', u'isns_vrf')]
    bindings_list = [('pybind.nos.v7_1_0.isns.isns_vrf.isns_discovery_domain_set', 'pybind.nos.v7_1_0.brocade_isns', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'isns_vrf_instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'isns_discovery_domain_set', 'keyval': 'isns_discovery_domain_set_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, isns_vrf=isns_vrf, isns_discovery_domain_set=isns_discovery_domain_set)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ldap_server_host_get(self, host=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type host: hostname
    :param host: Keyword argument tuple.

    :type hostname: unicode
    :param hostname: **host** tuple argument:  INETADDRESS   Domain name or IP Address of this LDAP server

        * length restriction: ::

            ['1..max']

        * pattern restriction: ::

            '\p{IsBasicLatin}{0,255}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ldap_server.host', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ldap_server.host', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ldap_server.host', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ldap_server.host', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ldap_server.host', u'ldap-server-options')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'hostname, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ldap_server_maprole_group_get(self, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type group: ad_group, switch_role
    :param group: Keyword argument tuple.

    :type ad_group: unicode
    :param ad_group: **group** tuple argument:  AD group belongs to user on the AD Server

        * length restriction: ::

            ['1..max']

    :type switch_role: unicode
    :param switch_role: **group** tuple argument:  AD group belongs to user on the AD Server

        * length restriction: ::

            ['4 .. 32']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ldap_server.maprole.group', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ldap_server.maprole.group', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ldap_server.maprole.group', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ldap_server.maprole.group', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'ad_group', 'extra_keyval': 'ad_group, switch_role'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def line_get(self, line=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type line: sessionid
    :param line: Keyword argument tuple.

    :type sessionid: unicode
    :param sessionid: **line** tuple argument:  Terminal type

        * enumeration restriction: ::

            ['vty']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.terminal_cfg.line', 'pybind.nos.v6_0_2b.brocade_terminal', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.terminal_cfg.line', 'pybind.nos.v7_0_1a.brocade_terminal', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.terminal_cfg.line', 'pybind.nos.v7_1_0.brocade_terminal', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.terminal_cfg.line', 'pybind.slxos.v16r_1_00b.brocade_terminal', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'line', 'keyval': 'sessionid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, line=line)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def linecard_get(self, linecards=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type linecards: linecardName, linecardType
    :param linecards: Keyword argument tuple.

    :type linecardName: unicode
    :param linecardName: **linecards** tuple argument.

        * pattern restriction: ::

            '([1-9]|[1][0-6])'

    :type linecardType: unicode
    :param linecardType: **linecards** tuple argument.

        * enumeration restriction: ::

            ['LC36X100G', 'LC72X10G']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.global_lc_holder.linecard.linecards', 'pybind.slxos.v16r_1_00b.brocade_linecard_management', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'linecards', 'keyval': 'linecardName', 'extra_keyval': 'linecardName, linecardType'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, linecards=linecards)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def logging_auditlog_class_get(self, class_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type class_: class_
    :param class_: Keyword argument tuple.

    :type class_: unicode
    :param class_: **class_** tuple argument.

        * enumeration restriction: ::

            ['CONFIGURATION', 'SECURITY', 'FIRMWARE']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.auditlog.class_', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.auditlog.class_', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.auditlog.class_', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.auditlog.class_', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'class_', 'keyval': 'class_', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, class_=class_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def logging_raslog_message_get(self, msgid=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type msgid: msgId
    :param msgid: Keyword argument tuple.

    :type msgId: unicode
    :param msgId: **msgid** tuple argument:  Specify the Msg ID

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.raslog.message.msgId', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.raslog.message.msgId', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.raslog.message.msgId', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.raslog.message.msgId', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'msgid', 'keyval': 'msgId', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, msgid=msgid)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def logging_raslog_module_get(self, modid=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type modid: modId
    :param modid: Keyword argument tuple.

    :type modId: unicode
    :param modId: **modid** tuple argument:  Specify the Module ID

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.raslog.module.modId', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.raslog.module.modId', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.raslog.module.modId', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.raslog.module.modId', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'modid', 'keyval': 'modId', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, modid=modid)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def logging_syslog_server_get(self, syslog_server=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type syslog_server: syslogip, use_vrf, secure, port
    :param syslog_server: Keyword argument tuple.

    :type syslogip: unicode
    :param syslogip: **syslog_server** tuple argument:  IPADDRESS		The IPv4 or IPv6 Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type use_vrf: unicode
    :param use_vrf: **syslog_server** tuple argument:  vrf to use for sending notification to the receiver. (Default=management).

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type secure: YANGBool
    :param secure: **syslog_server** tuple argument:  Indicates if transport is secure

    :type port: int
    :param port: **syslog_server** tuple argument:  Port number on which the syslog server is listening

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.logging.syslog_server', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.logging.syslog_server', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.logging.syslog_server', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.logging.syslog_server', 'pybind.slxos.v16r_1_00b.brocade_ras', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.logging.syslog_server', u'syslog-secure')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'syslog_server', 'keyval': 'syslogip, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, syslog_server=syslog_server)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def logical_interface_state_main_interface_physical_get(self, main_interface_physical=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type main_interface_physical: intf_name
    :param main_interface_physical: Keyword argument tuple.

    :type intf_name: unicode
    :param intf_name: **main_interface_physical** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.logical_interface_state.main_interface_physical', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.logical_interface_state.main_interface_physical', u'counters'), ('pybind.slxos.v16r_1_00b.logical_interface_state.main_interface_physical', u'logical-interface-physical')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'main_interface_physical', 'keyval': 'intf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, main_interface_physical=main_interface_physical)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_access_list_extended_get(self, extended=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended: name
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.extended', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.extended', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.extended', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.extended', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mac.access_list.extended.hide_mac_acl_ext', u'seq'), ('pybind.nos.v7_1_0.mac.access_list.extended.hide_mac_acl_ext', u'seq'), ('pybind.nos.v7_0_1a.mac.access_list.extended.hide_mac_acl_ext', u'seq'), ('pybind.nos.v6_0_2b.mac.access_list.extended.hide_mac_acl_ext', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_access_list_extended_seq_get(self, extended=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type extended: name
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_id, action, source, srchost, src_mac_addr_mask, dst, dsthost, dst_mac_addr_mask, ethertype, vlan, count, log
    :param seq: Keyword argument tuple.

    :type seq_id: long
    :param seq_id: **seq** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type action: unicode
    :param action: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'hard-drop', 'permit']

    :type source: unicode
    :param source: **seq** tuple argument.

    :type srchost: unicode
    :param srchost: **seq** tuple argument:  source mac address HHHH.HHHH.HHHH

    :type src_mac_addr_mask: unicode
    :param src_mac_addr_mask: **seq** tuple argument.

    :type dst: unicode
    :param dst: **seq** tuple argument.

    :type dsthost: unicode
    :param dsthost: **seq** tuple argument:  Destination mac address HHHH.HHHH.HHHH

    :type dst_mac_addr_mask: unicode
    :param dst_mac_addr_mask: **seq** tuple argument.

    :type ethertype: unicode
    :param ethertype: **seq** tuple argument.

        * enumeration restriction: ::

            ['arp', 'fcoe', 'ipv4']

    :type vlan: long
    :param vlan: **seq** tuple argument:  Vlan

        * range restriction: ::

            ['0..4294967295']

    :type count: YANGBool
    :param count: **seq** tuple argument:  Packet count

    :type log: YANGBool
    :param log: **seq** tuple argument:  Log Packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mac.access_list.extended', u'extended'), ('pybind.nos.v6_0_2b.mac.access_list.extended', u'extended'), ('pybind.nos.v7_0_1a.mac.access_list.extended', u'extended'), ('pybind.nos.v7_1_0.mac.access_list.extended', u'extended')]
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.extended.hide_mac_acl_ext.seq', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, source, srchost, src_mac_addr_mask, dst, dsthost, dst_mac_addr_mask, ethertype, vlan, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_access_list_standard_get(self, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type standard: name
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.standard', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.standard', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.standard', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.mac.access_list.standard.hide_mac_acl_std', u'seq'), ('pybind.nos.v6_0_2b.mac.access_list.standard.hide_mac_acl_std', u'seq'), ('pybind.nos.v7_0_1a.mac.access_list.standard.hide_mac_acl_std', u'seq'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard.hide_mac_acl_std', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_access_list_standard_seq_get(self, standard=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type standard: name
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_id, action, source, srchost, src_mac_addr_mask, count, log
    :param seq: Keyword argument tuple.

    :type seq_id: long
    :param seq_id: **seq** tuple argument.

        * range restriction: ::

            ['0..18446744073709551615']

    :type action: unicode
    :param action: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'hard-drop', 'permit']

    :type source: unicode
    :param source: **seq** tuple argument.

    :type srchost: unicode
    :param srchost: **seq** tuple argument.

    :type src_mac_addr_mask: unicode
    :param src_mac_addr_mask: **seq** tuple argument.

    :type count: YANGBool
    :param count: **seq** tuple argument:  Packet count

    :type log: YANGBool
    :param log: **seq** tuple argument:  Log Packet

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.mac.access_list.standard', u'standard'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard', u'standard'), ('pybind.nos.v6_0_2b.mac.access_list.standard', u'standard'), ('pybind.nos.v7_0_1a.mac.access_list.standard', u'standard')]
    bindings_list = [('pybind.nos.v6_0_2b.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.nos.v6_0_2b.brocade_mac_access_list', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.nos.v7_0_1a.brocade_mac_access_list', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.nos.v7_1_0.brocade_mac_access_list', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac.access_list.standard.hide_mac_acl_std.seq', 'pybind.slxos.v16r_1_00b.brocade_mac_access_list', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_id', 'extra_keyval': 'seq_id, action, source, srchost, src_mac_addr_mask, count, log'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_address_table_static_get(self, static=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type static: mac_address, forward, interface_type, interface_name, vlan, vlanid
    :param static: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **static** tuple argument.

    :type forward: unicode
    :param forward: **static** tuple argument:  Forward

        * enumeration restriction: ::

            ['forward']

    :type interface_type: unicode
    :param interface_type: **static** tuple argument:  Interface

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **static** tuple argument:  Interface identifier

    :type vlan: unicode
    :param vlan: **static** tuple argument:  vlan

        * enumeration restriction: ::

            ['vlan']

    :type vlanid: long
    :param vlanid: **static** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac_address_table.static', 'pybind.nos.v6_0_2b.brocade_mac_address_table', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac_address_table.static', 'pybind.nos.v7_0_1a.brocade_mac_address_table', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac_address_table.static', 'pybind.nos.v7_1_0.brocade_mac_address_table', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac_address_table.static.static_ac_lif', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.mac_address_table.static.static_mac', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static', 'keyval': 'mac_address, forward, interface_type, interface_name, vlan, vlanid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, static=static)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_group_get(self, mac_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type mac_group: mac_group_id
    :param mac_group: Keyword argument tuple.

    :type mac_group_id: long
    :param mac_group_id: **mac_group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.mac_group', 'pybind.nos.v6_0_2b.brocade_mac_address_table', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac_group', 'pybind.nos.v7_0_1a.brocade_mac_address_table', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac_group', 'pybind.nos.v7_1_0.brocade_mac_address_table', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac_group', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mac_group', u'mac-group-entry'), ('pybind.nos.v7_0_1a.mac_group', u'mac-group-entry'), ('pybind.nos.v6_0_2b.mac_group', u'mac-group-entry'), ('pybind.nos.v7_1_0.mac_group', u'mac-group-entry')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'mac_group', 'keyval': 'mac_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mac_group=mac_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mac_group_mac_get(self, mac_group=None, mac_group_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type mac_group: mac_group_id
    :param mac_group: Keyword argument tuple.

    :type mac_group_id: long
    :param mac_group_id: **mac_group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type mac_group_entry: entry_address
    :param mac_group_entry: Keyword argument tuple.

    :type entry_address: unicode
    :param entry_address: **mac_group_entry** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mac_group', 'mac_group'), ('pybind.nos.v7_1_0.mac_group', 'mac_group'), ('pybind.nos.v6_0_2b.mac_group', 'mac_group'), ('pybind.nos.v7_0_1a.mac_group', 'mac_group')]
    bindings_list = [('pybind.nos.v6_0_2b.mac_group.mac_group_entry', 'pybind.nos.v6_0_2b.brocade_mac_address_table', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.mac_group.mac_group_entry', 'pybind.nos.v7_0_1a.brocade_mac_address_table', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.mac_group.mac_group_entry', 'pybind.nos.v7_1_0.brocade_mac_address_table', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.mac_group.mac_group_entry', 'pybind.slxos.v16r_1_00b.brocade_mac_address_table', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'mac_group_id', 'extra_keyval': ''}, {'keyval': 'mac_group_id', 'extra_keyval': ''}, {'keyval': 'mac_group_id', 'extra_keyval': ''}, {'keyval': 'mac_group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mac_group_entry', 'keyval': 'entry_address', 'extra_keyval': 'entry_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mac_group=mac_group, mac_group_entry=mac_group_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mct_l2ys_state_show_cluster_mem_vlan_get(self, show_cluster_mem_vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type show_cluster_mem_vlan: cluster_id
    :param show_cluster_mem_vlan: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_cluster_mem_vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_l2ys_state.show_cluster_mem_vlan', 'pybind.slxos.v16r_1_00b.brocade_l2sys_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mct_l2ys_state.show_cluster_mem_vlan', u'vlan-label-info')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster_mem_vlan', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster_mem_vlan=show_cluster_mem_vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mct_state_show_cluster_get(self, show_cluster=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type show_cluster: cluster_id
    :param show_cluster: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_cluster** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'peer-info-list'), ('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'config-vlan-list'), ('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'client-info-list'), ('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'active-vlan-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster=show_cluster)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mct_state_show_cluster_client_info_list_get(self, show_cluster=None, client_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type show_cluster: cluster_id
    :param show_cluster: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_cluster** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type client_info_list: cluster_id, client_id
    :param client_info_list: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **client_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type client_id: long
    :param client_id: **client_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'show_cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster.client_info_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster.client_info_list', u'config-vlans')]
    compositions_keyval_list = [{'keyval': 'cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'client_info_list', 'keyval': 'cluster_id, client_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster=show_cluster, client_info_list=client_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mct_state_show_cluster_peer_info_list_get(self, show_cluster=None, peer_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type show_cluster: cluster_id
    :param show_cluster: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_cluster** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type peer_info_list: peer_ip_addr
    :param peer_info_list: Keyword argument tuple.

    :type peer_ip_addr: long
    :param peer_ip_addr: **peer_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster', u'show_cluster')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mct_state.show_cluster.peer_info_list', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cluster_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer_info_list', 'keyval': 'peer_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster=show_cluster, peer_info_list=peer_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mctd_client_state_state_show_cluster_mctd_client_get(self, show_cluster_mctd_client=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type show_cluster_mctd_client: cluster_id
    :param show_cluster_mctd_client: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_cluster_mctd_client** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mctd_client_state_state.show_cluster_mctd_client', 'pybind.slxos.v16r_1_00b.brocade_mct_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mctd_client_state_state.show_cluster_mctd_client', u'client-state-info')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster_mctd_client', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster_mctd_client=show_cluster_mctd_client)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mctd_client_state_state_show_cluster_mem_vlan_get(self, show_cluster_mem_vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type show_cluster_mem_vlan: cluster_id
    :param show_cluster_mem_vlan: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_cluster_mem_vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mctd_client_state_state.show_cluster_mem_vlan', 'pybind.slxos.v16r_1_00b.brocade_mct_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mctd_client_state_state.show_cluster_mem_vlan', u'vlan-label-info')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'show_cluster_mem_vlan', 'keyval': 'cluster_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_cluster_mem_vlan=show_cluster_mem_vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def monitor_session_get(self, session=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type session: session_number
    :param session: Keyword argument tuple.

    :type session_number: long
    :param session_number: **session** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.monitor.session', 'pybind.nos.v6_0_2b.brocade_span', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.monitor.session', 'pybind.nos.v7_0_1a.brocade_span', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.monitor.session', 'pybind.nos.v7_1_0.brocade_span', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.monitor.session', 'pybind.slxos.v16r_1_00b.brocade_span', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.monitor.session', u'span-command'), ('pybind.nos.v6_0_2b.monitor.session', u'span-command'), ('pybind.nos.v7_0_1a.monitor.session', u'span-command'), ('pybind.slxos.v16r_1_00b.monitor.session', u'span-command')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'session', 'keyval': 'session_number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, session=session)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_auto_bandwidth_template_get(self, auto_bandwidth_template=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type auto_bandwidth_template: name
    :param auto_bandwidth_template: Keyword argument tuple.

    :type name: unicode
    :param name: **auto_bandwidth_template** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template', u'associated-paths')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'auto_bandwidth_template', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, auto_bandwidth_template=auto_bandwidth_template)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_auto_bandwidth_template_associated_paths_get(self, auto_bandwidth_template=None, associated_paths=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type auto_bandwidth_template: name
    :param auto_bandwidth_template: Keyword argument tuple.

    :type name: unicode
    :param name: **auto_bandwidth_template** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type associated_paths: lsp_name
    :param associated_paths: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **associated_paths** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template', u'auto_bandwidth_template')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.auto_bandwidth_template.associated_paths', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'associated_paths', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, auto_bandwidth_template=auto_bandwidth_template, associated_paths=associated_paths)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_autobw_threshold_table_entry_get(self, autobw_threshold_table_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type autobw_threshold_table_entry: bandwidth
    :param autobw_threshold_table_entry: Keyword argument tuple.

    :type bandwidth: long
    :param bandwidth: **autobw_threshold_table_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.autobw_threshold_table_entry', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'autobw_threshold_table_entry', 'keyval': 'bandwidth', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, autobw_threshold_table_entry=autobw_threshold_table_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_dynamic_bypass_dynamic_bypass_interface_get(self, dynamic_bypass_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type dynamic_bypass_interface: if_name, if_type
    :param dynamic_bypass_interface: Keyword argument tuple.

    :type if_name: unicode
    :param if_name: **dynamic_bypass_interface** tuple argument.

    :type if_type: unicode
    :param if_type: **dynamic_bypass_interface** tuple argument.

        * enumeration restriction: ::

            ['loopback-interface',
            'ethernet-interface',
            'port-channel-interface',
            'unknown-interface',
            've-interface',
            'fbr-channel-interface']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface', u'mp-infos')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dynamic_bypass_interface', 'keyval': 'if_name, if_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dynamic_bypass_interface=dynamic_bypass_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_dynamic_bypass_dynamic_bypass_interface_mp_infos_get(self, dynamic_bypass_interface=None, mp_infos=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dynamic_bypass_interface: if_name, if_type
    :param dynamic_bypass_interface: Keyword argument tuple.

    :type if_name: unicode
    :param if_name: **dynamic_bypass_interface** tuple argument.

    :type if_type: unicode
    :param if_type: **dynamic_bypass_interface** tuple argument.

        * enumeration restriction: ::

            ['loopback-interface',
            'ethernet-interface',
            'port-channel-interface',
            'unknown-interface',
            've-interface',
            'fbr-channel-interface']

    **Instance Keyword Argument Tuple**:

    :type mp_infos: router_id
    :param mp_infos: Keyword argument tuple.

    :type router_id: unicode
    :param router_id: **mp_infos** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface', u'dynamic_bypass_interface')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.dynamic_bypass.dynamic_bypass_interface.mp_infos', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'if_name, if_type', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mp_infos', 'keyval': 'router_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dynamic_bypass_interface=dynamic_bypass_interface, mp_infos=mp_infos)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_forwarding_entry_get(self, forwarding_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type forwarding_entry: entry_index, sync_index
    :param forwarding_entry: Keyword argument tuple.

    :type entry_index: long
    :param entry_index: **forwarding_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type sync_index: long
    :param sync_index: **forwarding_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.forwarding_entry', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'forwarding_entry', 'keyval': 'entry_index, sync_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, forwarding_entry=forwarding_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_interface_get(self, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type interface: interface_index
    :param interface: Keyword argument tuple.

    :type interface_index: long
    :param interface_index: **interface** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.interface', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.interface', u'ldp-interface-data')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_get(self, ldp_fec_prefix_longer=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_fec_prefix_longer: prefix
    :param ldp_fec_prefix_longer: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **ldp_fec_prefix_longer** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'key'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'prefix-prefix')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_fec_prefix_longer', 'keyval': 'prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_get(self, ldp_fec_prefix_longer=None, prefix_prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_fec_prefix_longer: prefix
    :param ldp_fec_prefix_longer: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **ldp_fec_prefix_longer** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type prefix_prefix: prefix
    :param prefix_prefix: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **prefix_prefix** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix-downstream'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix-upstream'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix-nexthops')]
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_prefix', 'keyval': 'prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_prefix_downstream_get(self, ldp_fec_prefix_longer=None, prefix_prefix=None, prefix_downstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_fec_prefix_longer: prefix
    :param ldp_fec_prefix_longer: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **ldp_fec_prefix_longer** tuple argument.

    :type prefix_prefix: prefix
    :param prefix_prefix: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **prefix_prefix** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type prefix_downstream: local_ldp_id
    :param prefix_downstream: Keyword argument tuple.

    :type local_ldp_id: unicode
    :param local_ldp_id: **prefix_downstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix_prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix.prefix_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}, {'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_downstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix, prefix_downstream=prefix_downstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_prefix_nexthops_get(self, ldp_fec_prefix_longer=None, prefix_prefix=None, prefix_nexthops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_fec_prefix_longer: prefix
    :param ldp_fec_prefix_longer: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **ldp_fec_prefix_longer** tuple argument.

    :type prefix_prefix: prefix
    :param prefix_prefix: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **prefix_prefix** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type prefix_nexthops: nexthop
    :param prefix_nexthops: Keyword argument tuple.

    :type nexthop: unicode
    :param nexthop: **prefix_nexthops** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix_prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix.prefix_nexthops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}, {'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_nexthops', 'keyval': 'nexthop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix, prefix_nexthops=prefix_nexthops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_longer_prefix_prefix_prefix_upstream_get(self, ldp_fec_prefix_longer=None, prefix_prefix=None, prefix_upstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_fec_prefix_longer: prefix
    :param ldp_fec_prefix_longer: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **ldp_fec_prefix_longer** tuple argument.

    :type prefix_prefix: prefix
    :param prefix_prefix: Keyword argument tuple.

    :type prefix: unicode
    :param prefix: **prefix_prefix** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type prefix_upstream: local_ldp_id
    :param prefix_upstream: Keyword argument tuple.

    :type local_ldp_id: unicode
    :param local_ldp_id: **prefix_upstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer', u'ldp_fec_prefix_longer'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix', u'prefix_prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_longer.prefix_prefix.prefix_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'prefix', 'extra_keyval': ''}, {'keyval': 'prefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_upstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_prefix_longer=ldp_fec_prefix_longer, prefix_prefix=prefix_prefix, prefix_upstream=prefix_upstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_prefix_prefix_downstream_get(self, prefix_downstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type prefix_downstream: local_ldp_id
    :param prefix_downstream: Keyword argument tuple.

    :type local_ldp_id: unicode
    :param local_ldp_id: **prefix_downstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_prefix.prefix_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_downstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_downstream=prefix_downstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_prefix_prefix_nexthops_get(self, prefix_nexthops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type prefix_nexthops: nexthop
    :param prefix_nexthops: Keyword argument tuple.

    :type nexthop: unicode
    :param nexthop: **prefix_nexthops** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_prefix.prefix_nexthops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_nexthops', 'keyval': 'nexthop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_nexthops=prefix_nexthops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefix_prefix_prefix_upstream_get(self, prefix_upstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type prefix_upstream: local_ldp_id
    :param prefix_upstream: Keyword argument tuple.

    :type local_ldp_id: unicode
    :param local_ldp_id: **prefix_upstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefix_prefix.prefix_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix_upstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix_upstream=prefix_upstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefixes_prefix_get(self, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type prefix: destination
    :param prefix: Keyword argument tuple.

    :type destination: unicode
    :param destination: **prefix** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix', u'nexthops')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'destination', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_prefixes_prefix_nexthops_get(self, prefix=None, nexthops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type prefix: destination
    :param prefix: Keyword argument tuple.

    :type destination: unicode
    :param destination: **prefix** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type nexthops: nexthop
    :param nexthops: Keyword argument tuple.

    :type nexthop: unicode
    :param nexthop: **nexthops** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix', u'prefix')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_prefixes.prefix.nexthops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destination', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nexthops', 'keyval': 'nexthop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, prefix=prefix, nexthops=nexthops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcid_get(self, ldp_fec_vcid=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_fec_vcid: vc_id
    :param ldp_fec_vcid: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **ldp_fec_vcid** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', u'vc-upstream'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', u'vc-downstream')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_fec_vcid', 'keyval': 'vc_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_vcid=ldp_fec_vcid)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcid_vc_downstream_get(self, ldp_fec_vcid=None, vc_downstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_fec_vcid: vc_id
    :param ldp_fec_vcid: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **ldp_fec_vcid** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vc_downstream: local_ldp_id
    :param vc_downstream: Keyword argument tuple.

    :type local_ldp_id: unicode
    :param local_ldp_id: **vc_downstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', u'ldp_fec_vcid')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid.vc_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_downstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_vcid=ldp_fec_vcid, vc_downstream=vc_downstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcid_vc_upstream_get(self, ldp_fec_vcid=None, vc_upstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_fec_vcid: vc_id
    :param ldp_fec_vcid: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **ldp_fec_vcid** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vc_upstream: local_ldp_id
    :param vc_upstream: Keyword argument tuple.

    :type local_ldp_id: unicode
    :param local_ldp_id: **vc_upstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid', u'ldp_fec_vcid')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcid.vc_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_upstream', 'keyval': 'local_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_fec_vcid=ldp_fec_vcid, vc_upstream=vc_upstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_fec_ldp_fec_vcs_vc_get(self, vc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vc: peer_id
    :param vc: Keyword argument tuple.

    :type peer_id: unicode
    :param peer_id: **vc** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.fec.ldp_fec_vcs.vc', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vc', 'keyval': 'peer_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc=vc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_interface_ldp_interface_data_get(self, ldp_interface_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_interface_data: ldp_interface_name, ldp_interface_type
    :param ldp_interface_data: Keyword argument tuple.

    :type ldp_interface_name: unicode
    :param ldp_interface_name: **ldp_interface_data** tuple argument.

    :type ldp_interface_type: unicode
    :param ldp_interface_type: **ldp_interface_data** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.interface.ldp_interface_data', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_interface_data', 'keyval': 'ldp_interface_name, ldp_interface_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_interface_data=ldp_interface_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_database_get(self, ldp_database=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_database: ldp_database_peer_ip
    :param ldp_database: Keyword argument tuple.

    :type ldp_database_peer_ip: unicode
    :param ldp_database_peer_ip: **ldp_database** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', u'mpls-ldp-database-upstream'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', u'mpls-ldp-database-downstream')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_database', 'keyval': 'ldp_database_peer_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_database=ldp_database)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_database_mpls_ldp_database_downstream_get(self, ldp_database=None, mpls_ldp_database_downstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_database: ldp_database_peer_ip
    :param ldp_database: Keyword argument tuple.

    :type ldp_database_peer_ip: unicode
    :param ldp_database_peer_ip: **ldp_database** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type mpls_ldp_database_downstream: mpls_ldp_database_ds_fec_prefix
    :param mpls_ldp_database_downstream: Keyword argument tuple.

    :type mpls_ldp_database_ds_fec_prefix: unicode
    :param mpls_ldp_database_ds_fec_prefix: **mpls_ldp_database_downstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', u'ldp_database')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database.mpls_ldp_database_downstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ldp_database_peer_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mpls_ldp_database_downstream', 'keyval': 'mpls_ldp_database_ds_fec_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_database=ldp_database, mpls_ldp_database_downstream=mpls_ldp_database_downstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_database_mpls_ldp_database_upstream_get(self, ldp_database=None, mpls_ldp_database_upstream=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_database: ldp_database_peer_ip
    :param ldp_database: Keyword argument tuple.

    :type ldp_database_peer_ip: unicode
    :param ldp_database_peer_ip: **ldp_database** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type mpls_ldp_database_upstream: mpls_ldp_database_us_fec_prefix
    :param mpls_ldp_database_upstream: Keyword argument tuple.

    :type mpls_ldp_database_us_fec_prefix: unicode
    :param mpls_ldp_database_us_fec_prefix: **mpls_ldp_database_upstream** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database', u'ldp_database')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_database.mpls_ldp_database_upstream', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ldp_database_peer_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mpls_ldp_database_upstream', 'keyval': 'mpls_ldp_database_us_fec_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_database=ldp_database, mpls_ldp_database_upstream=mpls_ldp_database_upstream)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_neighbors_neighbor_get(self, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type neighbor: neighbor_ldpid, labelspaceid
    :param neighbor: Keyword argument tuple.

    :type neighbor_ldpid: unicode
    :param neighbor_ldpid: **neighbor** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type labelspaceid: int
    :param labelspaceid: **neighbor** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_neighbors.neighbor', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'neighbor_ldpid, labelspaceid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_session_get(self, ldp_session=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_session: peer_ldp_id
    :param ldp_session: Keyword argument tuple.

    :type peer_ldp_id: unicode
    :param peer_ldp_id: **ldp_session** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'filtered-fecs-out'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'filtered-fecs-in'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.session_ldp_stats.ldp_protocol_stats_instance_total', u'protocol-stats'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.session_ldp_stats.ldp_protocol_errors_instance_total', u'protocol-errors')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_session', 'keyval': 'peer_ldp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_session_filtered_fecs_in_get(self, ldp_session=None, filtered_fecs_in=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_session: peer_ldp_id
    :param ldp_session: Keyword argument tuple.

    :type peer_ldp_id: unicode
    :param peer_ldp_id: **ldp_session** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type filtered_fecs_in: fec_addr
    :param filtered_fecs_in: Keyword argument tuple.

    :type fec_addr: unicode
    :param fec_addr: **filtered_fecs_in** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.filtered_fecs_in', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'filtered_fecs_in', 'keyval': 'fec_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, filtered_fecs_in=filtered_fecs_in)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_session_filtered_fecs_out_get(self, ldp_session=None, filtered_fecs_out=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_session: peer_ldp_id
    :param ldp_session: Keyword argument tuple.

    :type peer_ldp_id: unicode
    :param peer_ldp_id: **ldp_session** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type filtered_fecs_out: fec_addr
    :param filtered_fecs_out: Keyword argument tuple.

    :type fec_addr: unicode
    :param fec_addr: **filtered_fecs_out** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.filtered_fecs_out', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'filtered_fecs_out', 'keyval': 'fec_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, filtered_fecs_out=filtered_fecs_out)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_session_session_ldp_stats_ldp_protocol_errors_instance_total_protocol_errors_get(self, ldp_session=None, protocol_errors=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_session: peer_ldp_id
    :param ldp_session: Keyword argument tuple.

    :type peer_ldp_id: unicode
    :param peer_ldp_id: **ldp_session** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type protocol_errors: error_type
    :param protocol_errors: Keyword argument tuple.

    :type error_type: long
    :param error_type: **protocol_errors** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.session_ldp_stats.ldp_protocol_errors_instance_total.protocol_errors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'protocol_errors', 'keyval': 'error_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, protocol_errors=protocol_errors)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_ldp_session_session_ldp_stats_ldp_protocol_stats_instance_total_protocol_stats_get(self, ldp_session=None, protocol_stats=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_session: peer_ldp_id
    :param ldp_session: Keyword argument tuple.

    :type peer_ldp_id: unicode
    :param peer_ldp_id: **ldp_session** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type protocol_stats: stat_type
    :param protocol_stats: Keyword argument tuple.

    :type stat_type: long
    :param stat_type: **protocol_stats** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session', u'ldp_session')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.ldp_session.session_ldp_stats.ldp_protocol_stats_instance_total.protocol_stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'peer_ldp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'protocol_stats', 'keyval': 'stat_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session, protocol_stats=protocol_stats)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_path_get(self, path=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type path: destination_route
    :param path: Keyword argument tuple.

    :type destination_route: unicode
    :param destination_route: **path** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', u'upstream-sessions'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', u'downstream-sessions')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'path', 'keyval': 'destination_route', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_path_downstream_sessions_get(self, path=None, downstream_sessions=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type path: destination_route
    :param path: Keyword argument tuple.

    :type destination_route: unicode
    :param destination_route: **path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type downstream_sessions: ip
    :param downstream_sessions: Keyword argument tuple.

    :type ip: unicode
    :param ip: **downstream_sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path.downstream_sessions', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destination_route', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'downstream_sessions', 'keyval': 'ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, downstream_sessions=downstream_sessions)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_path_upstream_sessions_get(self, path=None, upstream_sessions=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type path: destination_route
    :param path: Keyword argument tuple.

    :type destination_route: unicode
    :param destination_route: **path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type upstream_sessions: ip
    :param upstream_sessions: Keyword argument tuple.

    :type ip: unicode
    :param ip: **upstream_sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.path.upstream_sessions', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destination_route', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'upstream_sessions', 'keyval': 'ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, upstream_sessions=upstream_sessions)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_errors_instance_since_clear_protocol_errors_get(self, protocol_errors=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type protocol_errors: error_type
    :param protocol_errors: Keyword argument tuple.

    :type error_type: long
    :param error_type: **protocol_errors** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_errors_instance_since_clear.protocol_errors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_errors', 'keyval': 'error_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_errors=protocol_errors)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_errors_instance_total_protocol_errors_get(self, protocol_errors=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type protocol_errors: error_type
    :param protocol_errors: Keyword argument tuple.

    :type error_type: long
    :param error_type: **protocol_errors** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_errors_instance_total.protocol_errors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_errors', 'keyval': 'error_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_errors=protocol_errors)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_stats_instance_since_clear_protocol_stats_get(self, protocol_stats=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type protocol_stats: stat_type
    :param protocol_stats: Keyword argument tuple.

    :type stat_type: long
    :param stat_type: **protocol_stats** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_stats_instance_since_clear.protocol_stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_stats', 'keyval': 'stat_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_stats=protocol_stats)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_statistics_ldp_protocol_stats_instance_total_protocol_stats_get(self, protocol_stats=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type protocol_stats: stat_type
    :param protocol_stats: Keyword argument tuple.

    :type stat_type: long
    :param stat_type: **protocol_stats** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.statistics.ldp_protocol_stats_instance_total.protocol_stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'protocol_stats', 'keyval': 'stat_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, protocol_stats=protocol_stats)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_targeted_peer_get(self, targeted_peer=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type targeted_peer: mpls_ldp_targeted_peer_id
    :param targeted_peer: Keyword argument tuple.

    :type mpls_ldp_targeted_peer_id: unicode
    :param mpls_ldp_targeted_peer_id: **targeted_peer** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.targeted_peer', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'targeted_peer', 'keyval': 'mpls_ldp_targeted_peer_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, targeted_peer=targeted_peer)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_tunnels_ldp_tunnels_get(self, ldp_tunnels=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_tunnels: tunnel_destination, prefix_length
    :param ldp_tunnels: Keyword argument tuple.

    :type tunnel_destination: unicode
    :param tunnel_destination: **ldp_tunnels** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type prefix_length: long
    :param prefix_length: **ldp_tunnels** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels', u'out-segments')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_tunnels', 'keyval': 'tunnel_destination, prefix_length', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_tunnels=ldp_tunnels)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_ldp_tunnels_ldp_tunnels_out_segments_get(self, ldp_tunnels=None, out_segments=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ldp_tunnels: tunnel_destination, prefix_length
    :param ldp_tunnels: Keyword argument tuple.

    :type tunnel_destination: unicode
    :param tunnel_destination: **ldp_tunnels** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type prefix_length: long
    :param prefix_length: **ldp_tunnels** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type out_segments: outgoing_interface
    :param out_segments: Keyword argument tuple.

    :type outgoing_interface: unicode
    :param outgoing_interface: **out_segments** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels', u'ldp_tunnels')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.ldp.tunnels.ldp_tunnels.out_segments', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'tunnel_destination, prefix_length', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'out_segments', 'keyval': 'outgoing_interface', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_tunnels=ldp_tunnels, out_segments=out_segments)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_get(self, lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'forwarding'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr', u'exclude-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'frr'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr', u'include-all'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.backup', u'backup-transit'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'basic'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.backup', u'backup-ingress'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr', u'include-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'backup'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'instances'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'secondary-path')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_backup_backup_ingress_get(self, lsp=None, backup_ingress=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type backup_ingress: backup_from_address, backup_to_address, backup_name
    :param backup_ingress: Keyword argument tuple.

    :type backup_from_address: unicode
    :param backup_from_address: **backup_ingress** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type backup_to_address: unicode
    :param backup_to_address: **backup_ingress** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type backup_name: unicode
    :param backup_name: **backup_ingress** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.backup.backup_ingress', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'backup_ingress', 'keyval': 'backup_from_address, backup_to_address, backup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, backup_ingress=backup_ingress)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_backup_backup_transit_get(self, lsp=None, backup_transit=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type backup_transit: backup_from_address, backup_to_address, backup_name
    :param backup_transit: Keyword argument tuple.

    :type backup_from_address: unicode
    :param backup_from_address: **backup_transit** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type backup_to_address: unicode
    :param backup_to_address: **backup_transit** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type backup_name: unicode
    :param backup_name: **backup_transit** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.backup.backup_transit', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'backup_transit', 'keyval': 'backup_from_address, backup_to_address, backup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, backup_transit=backup_transit)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_frr_exclude_any_get(self, lsp=None, exclude_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type exclude_any: admin_group_id
    :param exclude_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **exclude_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr.exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, exclude_any=exclude_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_frr_include_all_get(self, lsp=None, include_all=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type include_all: admin_group_id
    :param include_all: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **include_all** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr.include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, include_all=include_all)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_frr_include_any_get(self, lsp=None, include_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type include_any: admin_group_id
    :param include_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **include_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.frr.include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, include_any=include_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_get(self, lsp=None, instances=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-exclude-interfaces'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'cspf-path-hops'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'cspf-exclude-hops'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'rsvp-session-rro-hops'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-exclude-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-frr-include-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-include-all'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-include-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-frr-include-all'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'config-frr-exclude-any')]
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'instances', 'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_exclude_any_get(self, lsp=None, instances=None, config_exclude_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_exclude_any: admin_group_id
    :param config_exclude_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_exclude_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_exclude_any=config_exclude_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_exclude_interfaces_get(self, lsp=None, instances=None, config_exclude_interfaces=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_exclude_interfaces: exclude_interface_name
    :param config_exclude_interfaces: Keyword argument tuple.

    :type exclude_interface_name: unicode
    :param exclude_interface_name: **config_exclude_interfaces** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_exclude_interfaces', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_exclude_interfaces', 'keyval': 'exclude_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_exclude_interfaces=config_exclude_interfaces)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_frr_exclude_any_get(self, lsp=None, instances=None, config_frr_exclude_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_frr_exclude_any: admin_group_id
    :param config_frr_exclude_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_frr_exclude_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_frr_exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_frr_exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_frr_exclude_any=config_frr_exclude_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_frr_include_all_get(self, lsp=None, instances=None, config_frr_include_all=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_frr_include_all: admin_group_id
    :param config_frr_include_all: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_frr_include_all** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_frr_include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_frr_include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_frr_include_all=config_frr_include_all)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_frr_include_any_get(self, lsp=None, instances=None, config_frr_include_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_frr_include_any: admin_group_id
    :param config_frr_include_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_frr_include_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_frr_include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_frr_include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_frr_include_any=config_frr_include_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_include_all_get(self, lsp=None, instances=None, config_include_all=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_include_all: admin_group_id
    :param config_include_all: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_include_all** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_include_all=config_include_all)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_config_include_any_get(self, lsp=None, instances=None, config_include_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type config_include_any: admin_group_id
    :param config_include_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_include_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.config_include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, config_include_any=config_include_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_cspf_exclude_hops_get(self, lsp=None, instances=None, cspf_exclude_hops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type cspf_exclude_hops: hop_index, hop_address
    :param cspf_exclude_hops: Keyword argument tuple.

    :type hop_index: long
    :param hop_index: **cspf_exclude_hops** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type hop_address: unicode
    :param hop_address: **cspf_exclude_hops** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.cspf_exclude_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_exclude_hops', 'keyval': 'hop_index, hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, cspf_exclude_hops=cspf_exclude_hops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_cspf_path_hops_get(self, lsp=None, instances=None, cspf_path_hops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type cspf_path_hops: hop_index, hop_address
    :param cspf_path_hops: Keyword argument tuple.

    :type hop_index: long
    :param hop_index: **cspf_path_hops** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type hop_address: unicode
    :param hop_address: **cspf_path_hops** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.cspf_path_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_path_hops', 'keyval': 'hop_index, hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, cspf_path_hops=cspf_path_hops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_instances_rsvp_session_rro_hops_get(self, lsp=None, instances=None, rsvp_session_rro_hops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type instances: instance_id, lsp_id
    :param instances: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type lsp_id: long
    :param lsp_id: **instances** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type rsvp_session_rro_hops: hop_index, hop_address
    :param rsvp_session_rro_hops: Keyword argument tuple.

    :type hop_index: long
    :param hop_index: **rsvp_session_rro_hops** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type hop_address: unicode
    :param hop_address: **rsvp_session_rro_hops** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances', u'instances')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.instances.rsvp_session_rro_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'instance_id, lsp_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rsvp_session_rro_hops', 'keyval': 'hop_index, hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, instances=instances, rsvp_session_rro_hops=rsvp_session_rro_hops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_secondary_path_get(self, lsp=None, secondary_path=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type secondary_path: path_name
    :param secondary_path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **secondary_path** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'config-include-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'config-exclude-any'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'config-include-all')]
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'secondary_path', 'keyval': 'path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_secondary_path_config_exclude_any_get(self, lsp=None, secondary_path=None, config_exclude_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type secondary_path: path_name
    :param secondary_path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **secondary_path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type config_exclude_any: admin_group_id
    :param config_exclude_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_exclude_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'secondary_path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path.config_exclude_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_exclude_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path, config_exclude_any=config_exclude_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_secondary_path_config_include_all_get(self, lsp=None, secondary_path=None, config_include_all=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type secondary_path: path_name
    :param secondary_path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **secondary_path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type config_include_all: admin_group_id
    :param config_include_all: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_include_all** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'secondary_path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path.config_include_all', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_all', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path, config_include_all=config_include_all)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_lsp_secondary_path_config_include_any_get(self, lsp=None, secondary_path=None, config_include_any=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type secondary_path: path_name
    :param secondary_path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **secondary_path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type config_include_any: admin_group_id
    :param config_include_any: Keyword argument tuple.

    :type admin_group_id: long
    :param admin_group_id: **config_include_any** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp', u'lsp'), ('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path', u'secondary_path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.lsp.secondary_path.config_include_any', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}, {'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'config_include_any', 'keyval': 'admin_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path, config_include_any=config_include_any)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_memory_pools_get(self, pools=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type pools: pool_index
    :param pools: Keyword argument tuple.

    :type pool_index: long
    :param pool_index: **pools** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools', u'sub-pools')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'pools', 'keyval': 'pool_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pools=pools)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_memory_pools_sub_pools_get(self, pools=None, sub_pools=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pools: pool_index
    :param pools: Keyword argument tuple.

    :type pool_index: long
    :param pool_index: **pools** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type sub_pools: sub_pool_index
    :param sub_pools: Keyword argument tuple.

    :type sub_pool_index: long
    :param sub_pool_index: **sub_pools** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools', u'pools')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.pools.sub_pools', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'pool_index', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'sub_pools', 'keyval': 'sub_pool_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pools=pools, sub_pools=sub_pools)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_memory_stats_get(self, stats=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type stats: mem_stats_index
    :param stats: Keyword argument tuple.

    :type mem_stats_index: long
    :param mem_stats_index: **stats** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.memory.stats', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'stats', 'keyval': 'mem_stats_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, stats=stats)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_path_get(self, path=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type path: path_name
    :param path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **path** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', u'path-lsps'), ('pybind.slxos.v16r_1_00b.mpls_state.path', u'path-hops'), ('pybind.slxos.v16r_1_00b.mpls_state.ldp', u'path')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'path', 'keyval': 'path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_path_path_hops_get(self, path=None, path_hops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type path: path_name
    :param path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type path_hops: hop_address
    :param path_hops: Keyword argument tuple.

    :type hop_address: unicode
    :param hop_address: **path_hops** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.path.path_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_hops', 'keyval': 'hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_hops=path_hops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_path_path_lsps_get(self, path=None, path_lsps=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type path: path_name
    :param path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **path** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type path_lsps: lsp_name
    :param path_lsps: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **path_lsps** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.path.path_lsps', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_lsps', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_lsps=path_lsps)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_policy_admin_groups_get(self, admin_groups=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type admin_groups: name
    :param admin_groups: Keyword argument tuple.

    :type name: unicode
    :param name: **admin_groups** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.policy.admin_groups', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'admin_groups', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, admin_groups=admin_groups)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_policy_rsvp_flooding_thresholds_get(self, rsvp_flooding_thresholds=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rsvp_flooding_thresholds: threshold_type
    :param rsvp_flooding_thresholds: Keyword argument tuple.

    :type threshold_type: unicode
    :param threshold_type: **rsvp_flooding_thresholds** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.policy.rsvp_flooding_thresholds', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rsvp_flooding_thresholds', 'keyval': 'threshold_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rsvp_flooding_thresholds=rsvp_flooding_thresholds)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_route_get(self, route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type route: entry_index
    :param route: Keyword argument tuple.

    :type entry_index: long
    :param entry_index: **route** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.route', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'route', 'keyval': 'entry_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_get(self, link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type link: ip_address, nbr_ip_address
    :param link: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type nbr_ip_address: unicode
    :param nbr_ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'lsp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'link', 'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_get(self, link=None, lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type link: ip_address, nbr_ip_address
    :param link: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type nbr_ip_address: unicode
    :param nbr_ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'cspf-hop'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'rro-hop')]
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name, path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_cspf_hop_get(self, link=None, lsp=None, cspf_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type link: ip_address, nbr_ip_address
    :param link: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type nbr_ip_address: unicode
    :param nbr_ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type cspf_hop: index
    :param cspf_hop: Keyword argument tuple.

    :type index: long
    :param index: **cspf_hop** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp.cspf_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}, {'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp, cspf_hop=cspf_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_link_get(self, link=None, lsp=None, link_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type link: ip_address, nbr_ip_address
    :param link: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type nbr_ip_address: unicode
    :param nbr_ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type link_: index
    :param link_: Keyword argument tuple.

    :type index: long
    :param index: **link_** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}, {'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'link_', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp, link_=link_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_link_lsp_rro_hop_get(self, link=None, lsp=None, rro_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type link: ip_address, nbr_ip_address
    :param link: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type nbr_ip_address: unicode
    :param nbr_ip_address: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type rro_hop: index
    :param rro_hop: Keyword argument tuple.

    :type index: long
    :param index: **rro_hop** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.link.lsp.rro_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ip_address, nbr_ip_address', 'extra_keyval': ''}, {'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rro_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, link=link, lsp=lsp, rro_hop=rro_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_get(self, lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'rro-hop'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'cspf-hop')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name, path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_cspf_hop_get(self, lsp=None, cspf_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type cspf_hop: index
    :param cspf_hop: Keyword argument tuple.

    :type index: long
    :param index: **cspf_hop** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp.cspf_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, cspf_hop=cspf_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_link_get(self, lsp=None, link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type link: index
    :param link: Keyword argument tuple.

    :type index: long
    :param index: **link** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'link', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, link=link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_igp_sync_lsp_rro_hop_get(self, lsp=None, rro_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name, path_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument.

    :type path_name: unicode
    :param path_name: **lsp** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type rro_hop: index
    :param rro_hop: Keyword argument tuple.

    :type index: long
    :param index: **rro_hop** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.igp_sync.lsp.rro_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'lsp_name, path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rro_hop', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, rro_hop=rro_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_interfaces_get(self, interfaces=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type interfaces: interface_index
    :param interfaces: Keyword argument tuple.

    :type interface_index: long
    :param interface_index: **interfaces** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.interfaces', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.interfaces', u'packet-counters'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.interfaces', u'error-counters')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interfaces', 'keyval': 'interface_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interfaces=interfaces)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_neighbors_get(self, neighbors=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type neighbors: neighbor_ip_addr
    :param neighbors: Keyword argument tuple.

    :type neighbor_ip_addr: unicode
    :param neighbor_ip_addr: **neighbors** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.neighbors', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'neighbors', 'keyval': 'neighbor_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, neighbors=neighbors)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_sessions_get(self, sessions=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type sessions: dest_ip_addr, src_ip_addr, tunnel_id, session_role
    :param sessions: Keyword argument tuple.

    :type dest_ip_addr: unicode
    :param dest_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_ip_addr: unicode
    :param src_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type tunnel_id: int
    :param tunnel_id: **sessions** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type session_role: unicode
    :param session_role: **sessions** tuple argument.

        * enumeration restriction: ::

            ['session-role-transit',
            'session-role-ingress',
            'session-role-egress',
            'session-role-unspecified']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'psbs')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'sessions', 'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_sessions_psbs_get(self, sessions=None, psbs=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type sessions: dest_ip_addr, src_ip_addr, tunnel_id, session_role
    :param sessions: Keyword argument tuple.

    :type dest_ip_addr: unicode
    :param dest_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_ip_addr: unicode
    :param src_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type tunnel_id: int
    :param tunnel_id: **sessions** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type session_role: unicode
    :param session_role: **sessions** tuple argument.

        * enumeration restriction: ::

            ['session-role-transit',
            'session-role-ingress',
            'session-role-egress',
            'session-role-unspecified']

    **Instance Keyword Argument Tuple**:

    :type psbs: path_index
    :param psbs: Keyword argument tuple.

    :type path_index: long
    :param path_index: **psbs** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'sessions')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', u'session-ero-hops'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', u'session-rro-hops')]
    compositions_keyval_list = [{'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'psbs', 'keyval': 'path_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions, psbs=psbs)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_sessions_psbs_session_ero_hops_get(self, sessions=None, psbs=None, session_ero_hops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type sessions: dest_ip_addr, src_ip_addr, tunnel_id, session_role
    :param sessions: Keyword argument tuple.

    :type dest_ip_addr: unicode
    :param dest_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_ip_addr: unicode
    :param src_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type tunnel_id: int
    :param tunnel_id: **sessions** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type session_role: unicode
    :param session_role: **sessions** tuple argument.

        * enumeration restriction: ::

            ['session-role-transit',
            'session-role-ingress',
            'session-role-egress',
            'session-role-unspecified']

    :type psbs: path_index
    :param psbs: Keyword argument tuple.

    :type path_index: long
    :param path_index: **psbs** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type session_ero_hops: ip_addr
    :param session_ero_hops: Keyword argument tuple.

    :type ip_addr: unicode
    :param ip_addr: **session_ero_hops** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'sessions'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', u'psbs')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs.session_ero_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}, {'keyval': 'path_index', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'session_ero_hops', 'keyval': 'ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions, psbs=psbs, session_ero_hops=session_ero_hops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_rsvp_sessions_psbs_session_rro_hops_get(self, sessions=None, psbs=None, session_rro_hops=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type sessions: dest_ip_addr, src_ip_addr, tunnel_id, session_role
    :param sessions: Keyword argument tuple.

    :type dest_ip_addr: unicode
    :param dest_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_ip_addr: unicode
    :param src_ip_addr: **sessions** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type tunnel_id: int
    :param tunnel_id: **sessions** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type session_role: unicode
    :param session_role: **sessions** tuple argument.

        * enumeration restriction: ::

            ['session-role-transit',
            'session-role-ingress',
            'session-role-egress',
            'session-role-unspecified']

    :type psbs: path_index
    :param psbs: Keyword argument tuple.

    :type path_index: long
    :param path_index: **psbs** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type session_rro_hops: ip_addr
    :param session_rro_hops: Keyword argument tuple.

    :type ip_addr: unicode
    :param ip_addr: **session_rro_hops** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions', u'sessions'), ('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs', u'psbs')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.rsvp.sessions.psbs.session_rro_hops', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dest_ip_addr, src_ip_addr, tunnel_id, session_role', 'extra_keyval': ''}, {'keyval': 'path_index', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'session_rro_hops', 'keyval': 'ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sessions=sessions, psbs=psbs, session_rro_hops=session_rro_hops)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_statistics_oam_return_codes_get(self, return_codes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type return_codes: number
    :param return_codes: Keyword argument tuple.

    :type number: long
    :param number: **return_codes** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.statistics_oam.return_codes', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'return_codes', 'keyval': 'number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, return_codes=return_codes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_te_database_area_get(self, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type area: area_id, level_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type level_id: long
    :param level_id: **area** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'node')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id, level_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_te_database_area_node_get(self, area=None, node=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type area: area_id, level_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type level_id: long
    :param level_id: **area** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type node: local_node_id, local_router_id
    :param node: Keyword argument tuple.

    :type local_node_id: unicode
    :param local_node_id: **node** tuple argument.

    :type local_router_id: unicode
    :param local_router_id: **node** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'link'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'srlg')]
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'node', 'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_te_database_area_node_link_get(self, area=None, node=None, link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type area: area_id, level_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type level_id: long
    :param level_id: **area** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type node: local_node_id, local_router_id
    :param node: Keyword argument tuple.

    :type local_node_id: unicode
    :param local_node_id: **node** tuple argument.

    :type local_router_id: unicode
    :param local_router_id: **node** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type link: local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip
    :param link: Keyword argument tuple.

    :type local_node_id: unicode
    :param local_node_id: **link** tuple argument.

    :type remote_node_id: unicode
    :param remote_node_id: **link** tuple argument.

    :type local_router_id: unicode
    :param local_router_id: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type remote_router_id: unicode
    :param remote_router_id: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type local_ip: unicode
    :param local_ip: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type remote_ip: unicode
    :param remote_ip: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'node')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link', u'srlg')]
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'link', 'keyval': 'local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node, link=link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_te_database_area_node_link_srlg_get(self, area=None, node=None, link=None, srlg=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type area: area_id, level_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type level_id: long
    :param level_id: **area** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type node: local_node_id, local_router_id
    :param node: Keyword argument tuple.

    :type local_node_id: unicode
    :param local_node_id: **node** tuple argument.

    :type local_router_id: unicode
    :param local_router_id: **node** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type link: local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip
    :param link: Keyword argument tuple.

    :type local_node_id: unicode
    :param local_node_id: **link** tuple argument.

    :type remote_node_id: unicode
    :param remote_node_id: **link** tuple argument.

    :type local_router_id: unicode
    :param local_router_id: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type remote_router_id: unicode
    :param remote_router_id: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type local_ip: unicode
    :param local_ip: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type remote_ip: unicode
    :param remote_ip: **link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type srlg: name
    :param srlg: Keyword argument tuple.

    :type name: unicode
    :param name: **srlg** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'node'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link', u'link')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.link.srlg', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, remote_node_id, local_router_id, remote_router_id, local_ip, remote_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'srlg', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node, link=link, srlg=srlg)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_te_database_area_node_srlg_get(self, area=None, node=None, srlg=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type area: area_id, level_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type level_id: long
    :param level_id: **area** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type node: local_node_id, local_router_id
    :param node: Keyword argument tuple.

    :type local_node_id: unicode
    :param local_node_id: **node** tuple argument.

    :type local_router_id: unicode
    :param local_router_id: **node** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type srlg: name
    :param srlg: Keyword argument tuple.

    :type name: unicode
    :param name: **srlg** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area', u'area'), ('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node', u'node')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.database.area.node.srlg', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'area_id, level_id', 'extra_keyval': ''}, {'keyval': 'local_node_id, local_router_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'srlg', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, area=area, node=node, srlg=srlg)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_te_router_id_map_get(self, router_id_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type router_id_map: ip_address
    :param router_id_map: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **router_id_map** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.te.router_id_map', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'router_id_map', 'keyval': 'ip_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, router_id_map=router_id_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_transit_traffic_statistics_get(self, transit_traffic_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type transit_traffic_statistics: in_label
    :param transit_traffic_statistics: Keyword argument tuple.

    :type in_label: long
    :param in_label: **transit_traffic_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.transit_traffic_statistics', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.transit_traffic_statistics', u'statistics')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'transit_traffic_statistics', 'keyval': 'in_label', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, transit_traffic_statistics=transit_traffic_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def mpls_state_tunnel_traffic_statistics_get(self, tunnel_traffic_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tunnel_traffic_statistics: index
    :param tunnel_traffic_statistics: Keyword argument tuple.

    :type index: long
    :param index: **tunnel_traffic_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_state.tunnel_traffic_statistics', 'pybind.slxos.v16r_1_00b.brocade_mpls_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_state.tunnel_traffic_statistics', u'statistics')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tunnel_traffic_statistics', 'keyval': 'index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tunnel_traffic_statistics=tunnel_traffic_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def nas_server_ip_get(self, server_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type server_ip: server_ip
    :param server_ip: Keyword argument tuple.

    :type server_ip: unicode
    :param server_ip: **server_ip** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.nas.server_ip', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nas.server_ip', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nas.server_ip', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nas.server_ip', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.nas.server_ip', u'vlan'), ('pybind.nos.v7_0_1a.nas.server_ip', u'vrf'), ('pybind.slxos.v16r_1_00b.nas.server_ip', u'vrf'), ('pybind.slxos.v16r_1_00b.nas.server_ip', u'vlan'), ('pybind.nos.v6_0_2b.nas.server_ip', u'vlan'), ('pybind.nos.v6_0_2b.nas.server_ip', u'vrf'), ('pybind.nos.v7_1_0.nas.server_ip', u'vlan'), ('pybind.nos.v7_1_0.nas.server_ip', u'vrf')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'server_ip', 'keyval': 'server_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server_ip=server_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def nas_server_ip_vlan_get(self, server_ip=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type server_ip: server_ip
    :param server_ip: Keyword argument tuple.

    :type server_ip: unicode
    :param server_ip: **server_ip** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    **Instance Keyword Argument Tuple**:

    :type vlan: vlan_number
    :param vlan: Keyword argument tuple.

    :type vlan_number: long
    :param vlan_number: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.nas.server_ip', u'server_ip'), ('pybind.nos.v6_0_2b.nas.server_ip', u'server_ip'), ('pybind.nos.v7_0_1a.nas.server_ip', u'server_ip'), ('pybind.nos.v7_1_0.nas.server_ip', u'server_ip')]
    bindings_list = [('pybind.nos.v6_0_2b.nas.server_ip.vlan', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nas.server_ip.vlan', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nas.server_ip.vlan', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nas.server_ip.vlan', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'vlan_number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server_ip=server_ip, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def nas_server_ip_vrf_get(self, server_ip=None, vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type server_ip: server_ip
    :param server_ip: Keyword argument tuple.

    :type server_ip: unicode
    :param server_ip: **server_ip** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    **Instance Keyword Argument Tuple**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument.

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.nas.server_ip', u'server_ip'), ('pybind.nos.v7_1_0.nas.server_ip', u'server_ip'), ('pybind.nos.v7_0_1a.nas.server_ip', u'server_ip'), ('pybind.nos.v6_0_2b.nas.server_ip', u'server_ip')]
    bindings_list = [('pybind.nos.v6_0_2b.nas.server_ip.vrf', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nas.server_ip.vrf', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nas.server_ip.vrf', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nas.server_ip.vrf', 'pybind.slxos.v16r_1_00b.brocade_qos_cee', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}, {'keyval': 'server_ip', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrf', 'keyval': 'vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server_ip=server_ip, vrf=vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def nsx_controller_get(self, nsx_controller=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type nsx_controller: name
    :param nsx_controller: Keyword argument tuple.

    :type name: unicode
    :param name: **nsx_controller** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.nsx_controller', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.nsx_controller', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.nsx_controller', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.nsx_controller', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.nsx_controller', u'connection-addr'), ('pybind.nos.v7_0_1a.nsx_controller', u'connection-addr'), ('pybind.slxos.v16r_1_00b.nsx_controller', u'connection-addr'), ('pybind.nos.v6_0_2b.nsx_controller', u'connection-addr')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'nsx_controller', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, nsx_controller=nsx_controller)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ntp_authentication_key_get(self, authentication_key=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type authentication_key: keyid, md5, sha1, encryption_level
    :param authentication_key: Keyword argument tuple.

    :type keyid: long
    :param keyid: **authentication_key** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type md5: unicode
    :param md5: **authentication_key** tuple argument:  MD5 Encryption

        * length restriction: ::

            ['1 .. max']

    :type sha1: unicode
    :param sha1: **authentication_key** tuple argument:  SHA1 Encryption

        * length restriction: ::

            ['1 .. max']

    :type encryption_level: unicode
    :param encryption_level: **authentication_key** tuple argument:  Level of encryption of the md5 key (default=7)

        * enumeration restriction: ::

            ['0', '7']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ntp.authentication_key', 'pybind.nos.v6_0_2b.brocade_ntp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ntp.authentication_key', 'pybind.nos.v7_0_1a.brocade_ntp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ntp.authentication_key', 'pybind.nos.v7_1_0.brocade_ntp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ntp.authentication_key', 'pybind.slxos.v16r_1_00b.brocade_ntp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'authentication_key', 'keyval': 'keyid', 'extra_keyval': 'keyid, md5, sha1, encryption_level'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, authentication_key=authentication_key)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ntp_server_get(self, server=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type server: ip
    :param server: Keyword argument tuple.

    :type ip: unicode
    :param ip: **server** tuple argument:  Network Time Protocol server ip address(es)

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ntp.server', 'pybind.nos.v6_0_2b.brocade_ntp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ntp.server', 'pybind.nos.v7_0_1a.brocade_ntp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ntp.server', 'pybind.nos.v7_1_0.brocade_ntp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ntp.server', 'pybind.slxos.v16r_1_00b.brocade_ntp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.ntp.server', u'server-key')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'server', 'keyval': 'ip, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, server=server)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_controller_get(self, openflow_controller=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type openflow_controller: controller_name
    :param openflow_controller: Keyword argument tuple.

    :type controller_name: unicode
    :param controller_name: **openflow_controller** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.openflow_controller', 'pybind.nos.v6_0_2b.brocade_openflow', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.openflow_controller', 'pybind.nos.v7_0_1a.brocade_openflow', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.openflow_controller', 'pybind.nos.v7_1_0.brocade_openflow', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.openflow_global.openflow.controller', 'pybind.slxos.v16r_1_00b.brocade_openflow', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.openflow_controller', u'connection-address'), ('pybind.nos.v7_1_0.openflow_controller', u'connection-address'), ('pybind.nos.v6_0_2b.openflow_controller', u'connection-address'), ('pybind.slxos.v16r_1_00b.openflow_global.openflow.controller', u'active-controller'), ('pybind.slxos.v16r_1_00b.openflow_global.openflow.controller', u'passive')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'controller', 'keyval': 'controller_name', 'extra_keyval': 'controller_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, openflow_controller=openflow_controller)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_controller_get(self, controller=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type controller: name
    :param controller: Keyword argument tuple.

    :type name: unicode
    :param name: **controller** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.controller', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'controller', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, controller=controller)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_detail_controller_detail_list_get(self, controller_detail_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type controller_detail_list: controller_idx
    :param controller_detail_list: Keyword argument tuple.

    :type controller_idx: long
    :param controller_idx: **controller_detail_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list', u'controller-info'), ('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list', u'controller-async-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'controller_detail_list', 'keyval': 'controller_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, controller_detail_list=controller_detail_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_detail_controller_detail_list_controller_async_list_get(self, controller_detail_list=None, controller_async_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type controller_detail_list: controller_idx
    :param controller_detail_list: Keyword argument tuple.

    :type controller_idx: long
    :param controller_idx: **controller_detail_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type controller_async_list: async_type
    :param controller_async_list: Keyword argument tuple.

    :type async_type: unicode
    :param async_type: **controller_async_list** tuple argument.

        * enumeration restriction: ::

            ['dcm-async-invalid',
            'dcm-packet-in',
            'dcm-port-status',
            'dcm-flow-removed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list', u'controller_detail_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.controller_detail_list.controller_async_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'controller_idx', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'controller_async_list', 'keyval': 'async_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, controller_detail_list=controller_detail_list, controller_async_list=controller_async_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_detail_hybrid_interfaces_get(self, hybrid_interfaces=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type hybrid_interfaces: hybrid_interface
    :param hybrid_interfaces: Keyword argument tuple.

    :type hybrid_interface: unicode
    :param hybrid_interface: **hybrid_interfaces** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.detail.hybrid_interfaces', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'hybrid_interfaces', 'keyval': 'hybrid_interface', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, hybrid_interfaces=hybrid_interfaces)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_flow_flow_info_list_get(self, flow_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type flow_info_list: flow_id
    :param flow_info_list: Keyword argument tuple.

    :type flow_id: long
    :param flow_id: **flow_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list', u'flow-action-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flow_info_list', 'keyval': 'flow_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_info_list=flow_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_flow_flow_info_list_flow_action_list_get(self, flow_info_list=None, flow_action_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type flow_info_list: flow_id
    :param flow_info_list: Keyword argument tuple.

    :type flow_id: long
    :param flow_id: **flow_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type flow_action_list: action_idx
    :param flow_action_list: Keyword argument tuple.

    :type action_idx: long
    :param action_idx: **flow_action_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list', u'flow_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow.flow_info_list.flow_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'flow_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'flow_action_list', 'keyval': 'action_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_info_list=flow_info_list, flow_action_list=flow_action_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_flow_id_flow_action_list_get(self, flow_action_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type flow_action_list: action_idx
    :param flow_action_list: Keyword argument tuple.

    :type action_idx: long
    :param action_idx: **flow_action_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_id.flow_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flow_action_list', 'keyval': 'action_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_action_list=flow_action_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_flow_interface_get(self, flow_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type flow_interface: interface_type, interface_value
    :param flow_interface: Keyword argument tuple.

    :type interface_type: long
    :param interface_type: **flow_interface** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type interface_value: unicode
    :param interface_value: **flow_interface** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', u'flow-info-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'flow_interface', 'keyval': 'interface_type, interface_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_interface=flow_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_flow_interface_flow_info_list_get(self, flow_interface=None, flow_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type flow_interface: interface_type, interface_value
    :param flow_interface: Keyword argument tuple.

    :type interface_type: long
    :param interface_type: **flow_interface** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type interface_value: unicode
    :param interface_value: **flow_interface** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type flow_info_list: flow_id
    :param flow_info_list: Keyword argument tuple.

    :type flow_id: long
    :param flow_id: **flow_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', u'flow_interface')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list', u'flow-action-list')]
    compositions_keyval_list = [{'keyval': 'interface_type, interface_value', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'flow_info_list', 'keyval': 'flow_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_interface=flow_interface, flow_info_list=flow_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_flow_interface_flow_info_list_flow_action_list_get(self, flow_interface=None, flow_info_list=None, flow_action_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type flow_interface: interface_type, interface_value
    :param flow_interface: Keyword argument tuple.

    :type interface_type: long
    :param interface_type: **flow_interface** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type interface_value: unicode
    :param interface_value: **flow_interface** tuple argument.

    :type flow_info_list: flow_id
    :param flow_info_list: Keyword argument tuple.

    :type flow_id: long
    :param flow_id: **flow_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type flow_action_list: action_idx
    :param flow_action_list: Keyword argument tuple.

    :type action_idx: long
    :param action_idx: **flow_action_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface', u'flow_interface'), ('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list', u'flow_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.flow_interface.flow_info_list.flow_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_type, interface_value', 'extra_keyval': ''}, {'keyval': 'flow_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'flow_action_list', 'keyval': 'action_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, flow_interface=flow_interface, flow_info_list=flow_info_list, flow_action_list=flow_action_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_group_group_info_list_get(self, group_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type group_info_list: group_id
    :param group_info_list: Keyword argument tuple.

    :type group_id: long
    :param group_id: **group_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', u'group-bucket-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group_info_list', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_info_list=group_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_group_group_info_list_group_bucket_list_get(self, group_info_list=None, group_bucket_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type group_info_list: group_id
    :param group_info_list: Keyword argument tuple.

    :type group_id: long
    :param group_id: **group_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type group_bucket_list: bucket_id
    :param group_bucket_list: Keyword argument tuple.

    :type bucket_id: long
    :param bucket_id: **group_bucket_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', u'group_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list', u'group-action-list')]
    compositions_keyval_list = [{'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_bucket_list', 'keyval': 'bucket_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_info_list=group_info_list, group_bucket_list=group_bucket_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_group_group_info_list_group_bucket_list_group_action_list_get(self, group_info_list=None, group_bucket_list=None, group_action_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type group_info_list: group_id
    :param group_info_list: Keyword argument tuple.

    :type group_id: long
    :param group_id: **group_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type group_bucket_list: bucket_id
    :param group_bucket_list: Keyword argument tuple.

    :type bucket_id: long
    :param bucket_id: **group_bucket_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type group_action_list: action_id
    :param group_action_list: Keyword argument tuple.

    :type action_id: long
    :param action_id: **group_action_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list', u'group_info_list'), ('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list', u'group_bucket_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group.group_info_list.group_bucket_list.group_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'bucket_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_action_list', 'keyval': 'action_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_info_list=group_info_list, group_bucket_list=group_bucket_list, group_action_list=group_action_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_group_id_group_bucket_list_get(self, group_bucket_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type group_bucket_list: bucket_id
    :param group_bucket_list: Keyword argument tuple.

    :type bucket_id: long
    :param bucket_id: **group_bucket_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list', u'group-action-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group_bucket_list', 'keyval': 'bucket_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_bucket_list=group_bucket_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_group_id_group_bucket_list_group_action_list_get(self, group_bucket_list=None, group_action_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type group_bucket_list: bucket_id
    :param group_bucket_list: Keyword argument tuple.

    :type bucket_id: long
    :param bucket_id: **group_bucket_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type group_action_list: action_id
    :param group_action_list: Keyword argument tuple.

    :type action_id: long
    :param action_id: **group_action_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list', u'group_bucket_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.group_id.group_bucket_list.group_action_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bucket_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_action_list', 'keyval': 'action_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_bucket_list=group_bucket_list, group_action_list=group_action_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_interface_get(self, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type interface: port
    :param interface: Keyword argument tuple.

    :type port: unicode
    :param port: **interface** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.interface', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_meter_id_meterband_info_list_get(self, meterband_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type meterband_info_list: band_type
    :param meterband_info_list: Keyword argument tuple.

    :type band_type: long
    :param band_type: **meterband_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter_id.meterband_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'meterband_info_list', 'keyval': 'band_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, meterband_info_list=meterband_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_meter_meter_info_list_get(self, meter_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type meter_info_list: meter_id
    :param meter_info_list: Keyword argument tuple.

    :type meter_id: long
    :param meter_id: **meter_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list', u'meterband-info-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'meter_info_list', 'keyval': 'meter_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, meter_info_list=meter_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_meter_meter_info_list_meterband_info_list_get(self, meter_info_list=None, meterband_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type meter_info_list: meter_id
    :param meter_info_list: Keyword argument tuple.

    :type meter_id: long
    :param meter_id: **meter_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type meterband_info_list: band_type
    :param meterband_info_list: Keyword argument tuple.

    :type band_type: long
    :param band_type: **meterband_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list', u'meter_info_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.meter.meter_info_list.meterband_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'meter_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'meterband_info_list', 'keyval': 'band_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, meter_info_list=meter_info_list, meterband_info_list=meterband_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_queues_interface_queue_info_list_get(self, queue_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type queue_info_list: interface, num
    :param queue_info_list: Keyword argument tuple.

    :type interface: unicode
    :param interface: **queue_info_list** tuple argument.

    :type num: long
    :param num: **queue_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.queues_interface.queue_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'queue_info_list', 'keyval': 'interface, num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue_info_list=queue_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_resources_group_resouces_list_get(self, group_resouces_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type group_resouces_list: group_type
    :param group_resouces_list: Keyword argument tuple.

    :type group_type: unicode
    :param group_type: **group_resouces_list** tuple argument.

        * enumeration restriction: ::

            ['dcm-group-type-all',
            'dcm-group-type-select',
            'dcm-group-type-invalid',
            'dcm-group-type-indirect',
            'dcm-group-type-fast-failover']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.group_resouces_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group_resouces_list', 'keyval': 'group_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group_resouces_list=group_resouces_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_resources_slot_resouces_list_get(self, slot_resouces_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type slot_resouces_list: slot_id
    :param slot_resouces_list: Keyword argument tuple.

    :type slot_id: long
    :param slot_id: **slot_resouces_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', u'slot-match-profile-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'slot_resouces_list', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot_resouces_list=slot_resouces_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_resources_slot_resouces_list_slot_match_profile_list_get(self, slot_resouces_list=None, slot_match_profile_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type slot_resouces_list: slot_id
    :param slot_resouces_list: Keyword argument tuple.

    :type slot_id: long
    :param slot_id: **slot_resouces_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type slot_match_profile_list: slot_match_profile_idx
    :param slot_match_profile_list: Keyword argument tuple.

    :type slot_match_profile_idx: long
    :param slot_match_profile_idx: **slot_match_profile_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', u'slot_resouces_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list', u'slot-chip-resource-list')]
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'slot_match_profile_list', 'keyval': 'slot_match_profile_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot_resouces_list=slot_resouces_list, slot_match_profile_list=slot_match_profile_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def openflow_state_resources_slot_resouces_list_slot_match_profile_list_slot_chip_resource_list_get(self, slot_resouces_list=None, slot_match_profile_list=None, slot_chip_resource_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type slot_resouces_list: slot_id
    :param slot_resouces_list: Keyword argument tuple.

    :type slot_id: long
    :param slot_id: **slot_resouces_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type slot_match_profile_list: slot_match_profile_idx
    :param slot_match_profile_list: Keyword argument tuple.

    :type slot_match_profile_idx: long
    :param slot_match_profile_idx: **slot_match_profile_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type slot_chip_resource_list: slot_chip_idx
    :param slot_chip_resource_list: Keyword argument tuple.

    :type slot_chip_idx: long
    :param slot_chip_idx: **slot_chip_resource_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list', u'slot_resouces_list'), ('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list', u'slot_match_profile_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.openflow_state.resources.slot_resouces_list.slot_match_profile_list.slot_chip_resource_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'slot_match_profile_idx', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'slot_chip_resource_list', 'keyval': 'slot_chip_idx', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot_resouces_list=slot_resouces_list, slot_match_profile_list=slot_match_profile_list, slot_chip_resource_list=slot_chip_resource_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def opstest_state_arpentries_arpe_get(self, arpe=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type arpe: ip, ifname
    :param arpe: Keyword argument tuple.

    :type ip: unicode
    :param ip: **arpe** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ifname: unicode
    :param ifname: **arpe** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.arpentries.arpe', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'arpe', 'keyval': 'ip, ifname', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, arpe=arpe)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def opstest_state_routes_route_get(self, route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type route: destPrefix
    :param route: Keyword argument tuple.

    :type destPrefix: unicode
    :param destPrefix: **route** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', u'children')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'route', 'keyval': 'destPrefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def opstest_state_routes_route_children_get(self, route=None, children=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route: destPrefix
    :param route: Keyword argument tuple.

    :type destPrefix: unicode
    :param destPrefix: **route** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type children: keyid
    :param children: Keyword argument tuple.

    :type keyid: long
    :param keyid: **children** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', u'route')]
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children', u'layer2')]
    compositions_keyval_list = [{'keyval': 'destPrefix', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'children', 'keyval': 'keyid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route, children=children)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def opstest_state_routes_route_children_layer2_get(self, route=None, children=None, layer2=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route: destPrefix
    :param route: Keyword argument tuple.

    :type destPrefix: unicode
    :param destPrefix: **route** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type children: keyid
    :param children: Keyword argument tuple.

    :type keyid: long
    :param keyid: **children** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type layer2: layer2id
    :param layer2: Keyword argument tuple.

    :type layer2id: long
    :param layer2id: **layer2** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route', u'route'), ('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children', u'children')]
    bindings_list = [('pybind.slxos.v16r_1_00b.opstest_state.routes.route.children.layer2', 'pybind.slxos.v16r_1_00b.brocade_opstest', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'destPrefix', 'extra_keyval': ''}, {'keyval': 'keyid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'layer2', 'keyval': 'layer2id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route=route, children=children, layer2=layer2)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_access_list_type_vxlan_extended_get(self, extended=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended: ext_user_acl_name
    :param extended: Keyword argument tuple.

    :type ext_user_acl_name: unicode
    :param ext_user_acl_name: **extended** tuple argument:  Access List Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended', u'ext-seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'ext_user_acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_access_list_type_vxlan_extended_seq_get(self, extended=None, ext_seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type extended: ext_user_acl_name
    :param extended: Keyword argument tuple.

    :type ext_user_acl_name: unicode
    :param ext_user_acl_name: **extended** tuple argument:  Access List Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type ext_seq: ext_seq_num, ext_permit_deny, ext_dst_vtep_ip, ext_dst_vtep_ip_any, ext_src_vtep_ip, ext_src_vtep_ip_any, ext_vni, ext_vni_any, ext_vni_mask, ext_count, ext_mirror, ext_redirect, ext_sflow, native, tag, dst_ip_host, dst_ip, dst_ip_any, src_ip_host, src_ip, src_ip_any, dst_port, dst_port_any, src_port, src_port_any
    :param ext_seq: Keyword argument tuple.

    :type ext_seq_num: long
    :param ext_seq_num: **ext_seq** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ext_permit_deny: unicode
    :param ext_permit_deny: **ext_seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ext_dst_vtep_ip: unicode
    :param ext_dst_vtep_ip: **ext_seq** tuple argument:  dst vtep ip address: A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ext_dst_vtep_ip_any: YANGBool
    :param ext_dst_vtep_ip_any: **ext_seq** tuple argument:  dst vtep ip address: any

    :type ext_src_vtep_ip: unicode
    :param ext_src_vtep_ip: **ext_seq** tuple argument:  src vtep ip address: A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type ext_src_vtep_ip_any: YANGBool
    :param ext_src_vtep_ip_any: **ext_seq** tuple argument:  src vtep ip address: any

    :type ext_vni: long
    :param ext_vni: **ext_seq** tuple argument:  vni number: 1..16777215

        * range restriction: ::

            ['0..4294967295']

    :type ext_vni_any: YANGBool
    :param ext_vni_any: **ext_seq** tuple argument:  vni any

    :type ext_vni_mask: unicode
    :param ext_vni_mask: **ext_seq** tuple argument:  vni mask:Hexadecimal 0..FFFFFF

        * pattern restriction: ::

            '0|[1-9a-fA-F][0-9a-fA-F]{0,5}'

    :type ext_count: YANGBool
    :param ext_count: **ext_seq** tuple argument:  count

    :type ext_mirror: unicode
    :param ext_mirror: **ext_seq** tuple argument:  mirror <interface-name>

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type ext_redirect: unicode
    :param ext_redirect: **ext_seq** tuple argument:  redirect <interface-name>

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type ext_sflow: YANGBool
    :param ext_sflow: **ext_seq** tuple argument:  sflow

    :type native: YANGBool
    :param native: **ext_seq** tuple argument.

    :type tag: unicode
    :param tag: **ext_seq** tuple argument.

        * enumeration restriction: ::

            ['none', 'single', 'any']

    :type dst_ip_host: unicode
    :param dst_ip_host: **ext_seq** tuple argument:  dst ip host: A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type dst_ip: unicode
    :param dst_ip: **ext_seq** tuple argument:  dst ip: A.B.C.D/mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type dst_ip_any: YANGBool
    :param dst_ip_any: **ext_seq** tuple argument:  dst ip address: any

    :type src_ip_host: unicode
    :param src_ip_host: **ext_seq** tuple argument:  src ip host: A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_ip: unicode
    :param src_ip: **ext_seq** tuple argument:  src ip: A.B.C.D/mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type src_ip_any: YANGBool
    :param src_ip_any: **ext_seq** tuple argument:  src ip address: any

    :type dst_port: long
    :param dst_port: **ext_seq** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type dst_port_any: YANGBool
    :param dst_port_any: **ext_seq** tuple argument:  dst-port-any

    :type src_port: long
    :param src_port: **ext_seq** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type src_port_any: YANGBool
    :param src_port_any: **ext_seq** tuple argument:  src-port-any

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended', u'extended')]
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.extended.ext_seq', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'ext_user_acl_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ext_seq', 'keyval': 'ext_seq_num', 'extra_keyval': 'ext_seq_num, ext_permit_deny, ext_dst_vtep_ip, ext_dst_vtep_ip_any, ext_src_vtep_ip, ext_src_vtep_ip_any, ext_vni, ext_vni_any, ext_vni_mask, ext_count, ext_mirror, ext_redirect, ext_sflow, native, tag, dst_ip_host, dst_ip, dst_ip_any, src_ip_host, src_ip, src_ip_any, dst_port, dst_port_any, src_port, src_port_any'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended=extended, ext_seq=ext_seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_access_list_type_vxlan_standard_get(self, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type standard: user_acl_name
    :param standard: Keyword argument tuple.

    :type user_acl_name: unicode
    :param user_acl_name: **standard** tuple argument:  Access List Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard', u'seq')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'user_acl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_access_list_type_vxlan_standard_seq_get(self, standard=None, seq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type standard: user_acl_name
    :param standard: Keyword argument tuple.

    :type user_acl_name: unicode
    :param user_acl_name: **standard** tuple argument:  Access List Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type seq: seq_num, permit_deny, dst_vtep_ip, dst_vtep_ip_any, src_vtep_ip, src_vtep_ip_any, vni, vni_any, vni_mask, count, redirect, sflow
    :param seq: Keyword argument tuple.

    :type seq_num: long
    :param seq_num: **seq** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type permit_deny: unicode
    :param permit_deny: **seq** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type dst_vtep_ip: unicode
    :param dst_vtep_ip: **seq** tuple argument:  dst vtep ip address: A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type dst_vtep_ip_any: YANGBool
    :param dst_vtep_ip_any: **seq** tuple argument:  dst vtep ip address: any

    :type src_vtep_ip: unicode
    :param src_vtep_ip: **seq** tuple argument:  src vtep ip address: A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type src_vtep_ip_any: YANGBool
    :param src_vtep_ip_any: **seq** tuple argument:  src vtep ip address: any

    :type vni: long
    :param vni: **seq** tuple argument:  vni number: 1..16777215

        * range restriction: ::

            ['0..4294967295']

    :type vni_any: YANGBool
    :param vni_any: **seq** tuple argument:  vni any

    :type vni_mask: unicode
    :param vni_mask: **seq** tuple argument:  vni mask:Hexadecimal 0..FFFFFF

        * pattern restriction: ::

            '0|[1-9a-fA-F][0-9a-fA-F]{0,5}'

    :type count: YANGBool
    :param count: **seq** tuple argument:  count

    :type redirect: unicode
    :param redirect: **seq** tuple argument:  redirect <interface-name>

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type sflow: YANGBool
    :param sflow: **seq** tuple argument:  sflow

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard', u'standard')]
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay.access_list.type.vxlan.standard.seq', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'user_acl_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'seq', 'keyval': 'seq_num', 'extra_keyval': 'seq_num, permit_deny, dst_vtep_ip, dst_vtep_ip_any, src_vtep_ip, src_vtep_ip_any, vni, vni_any, vni_mask, count, redirect, sflow'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, standard=standard, seq=seq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_get(self, overlay_gateway=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.overlay_gateway', u'monitor'), ('pybind.slxos.v16r_1_00b.overlay_gateway.access_lists.ipv4', u'in'), ('pybind.slxos.v16r_1_00b.overlay_gateway.attach', u'vlan'), ('pybind.slxos.v16r_1_00b.overlay_gateway.ip.interface', u'loopback'), ('pybind.slxos.v16r_1_00b.overlay_gateway.access_lists.mac', u'in'), ('pybind.slxos.v16r_1_00b.overlay_gateway.map_.vlan', u'vni'), ('pybind.slxos.v16r_1_00b.overlay_gateway.enable', u'statistics'), ('pybind.slxos.v16r_1_00b.overlay_gateway', u'sflow'), ('pybind.slxos.v16r_1_00b.overlay_gateway.access_lists.mac', u'out'), ('pybind.slxos.v16r_1_00b.overlay_gateway.access_lists.ipv4', u'out'), ('pybind.slxos.v16r_1_00b.overlay_gateway.ip.interface', u've'), ('pybind.slxos.v16r_1_00b.overlay_gateway.access_lists.ipv6', u'in'), ('pybind.slxos.v16r_1_00b.overlay_gateway', u'site'), ('pybind.slxos.v16r_1_00b.overlay_gateway.access_lists.ipv6', u'out'), ('pybind.slxos.v16r_1_00b.overlay_gateway.map_', u'vlan-vni-mapping'), ('pybind.nos.v6_0_2b.overlay_gateway.access_lists.ipv6', u'out'), ('pybind.nos.v6_0_2b.overlay_gateway', u'sflow'), ('pybind.nos.v6_0_2b.overlay_gateway.enable', u'statistics'), ('pybind.nos.v6_0_2b.overlay_gateway.ip.interface', u've'), ('pybind.nos.v6_0_2b.overlay_gateway.access_lists.mac', u'out'), ('pybind.nos.v6_0_2b.overlay_gateway.map_.vlan', u'vni'), ('pybind.nos.v6_0_2b.overlay_gateway.access_lists.ipv6', u'in'), ('pybind.nos.v6_0_2b.overlay_gateway.attach', u'rbridge-id'), ('pybind.nos.v6_0_2b.overlay_gateway.access_lists.ipv4', u'in'), ('pybind.nos.v6_0_2b.overlay_gateway', u'site'), ('pybind.nos.v6_0_2b.overlay_gateway.access_lists.ipv4', u'out'), ('pybind.nos.v6_0_2b.overlay_gateway', u'monitor'), ('pybind.nos.v6_0_2b.overlay_gateway.access_lists.mac', u'in'), ('pybind.nos.v6_0_2b.overlay_gateway.ip.interface', u'loopback'), ('pybind.nos.v6_0_2b.overlay_gateway.attach', u'vlan'), ('pybind.nos.v6_0_2b.overlay_gateway.map_', u'vlan-vni-mapping'), ('pybind.nos.v7_0_1a.overlay_gateway.attach', u'vlan'), ('pybind.nos.v7_0_1a.overlay_gateway.map_.vlan', u'vni'), ('pybind.nos.v7_0_1a.overlay_gateway.access_lists.mac', u'in'), ('pybind.nos.v7_0_1a.overlay_gateway', u'monitor'), ('pybind.nos.v7_0_1a.overlay_gateway.access_lists.ipv6', u'in'), ('pybind.nos.v7_0_1a.overlay_gateway.attach', u'rbridge-id'), ('pybind.nos.v7_0_1a.overlay_gateway.ip.interface', u've'), ('pybind.nos.v7_0_1a.overlay_gateway', u'sflow'), ('pybind.nos.v7_0_1a.overlay_gateway.enable', u'statistics'), ('pybind.nos.v7_0_1a.overlay_gateway.map_', u'vlan-vni-mapping'), ('pybind.nos.v7_0_1a.overlay_gateway.access_lists.mac', u'out'), ('pybind.nos.v7_0_1a.overlay_gateway.access_lists.ipv6', u'out'), ('pybind.nos.v7_0_1a.overlay_gateway.ip.interface', u'loopback'), ('pybind.nos.v7_0_1a.overlay_gateway.access_lists.ipv4', u'in'), ('pybind.nos.v7_0_1a.overlay_gateway.access_lists.ipv4', u'out'), ('pybind.nos.v7_0_1a.overlay_gateway', u'site'), ('pybind.nos.v7_1_0.overlay_gateway.ip.interface', u've'), ('pybind.nos.v7_1_0.overlay_gateway.map_.vlan', u'vni'), ('pybind.nos.v7_1_0.overlay_gateway.access_lists.ipv4', u'in'), ('pybind.nos.v7_1_0.overlay_gateway.ip.interface', u'loopback'), ('pybind.nos.v7_1_0.overlay_gateway.access_lists.mac', u'out'), ('pybind.nos.v7_1_0.overlay_gateway.access_lists.ipv6', u'in'), ('pybind.nos.v7_1_0.overlay_gateway.attach', u'vlan'), ('pybind.nos.v7_1_0.overlay_gateway.access_lists.ipv4', u'out'), ('pybind.nos.v7_1_0.overlay_gateway.access_lists.mac', u'in'), ('pybind.nos.v7_1_0.overlay_gateway', u'site'), ('pybind.nos.v7_1_0.overlay_gateway.enable', u'statistics'), ('pybind.nos.v7_1_0.overlay_gateway.access_lists.ipv6', u'out'), ('pybind.nos.v7_1_0.overlay_gateway', u'monitor'), ('pybind.nos.v7_1_0.overlay_gateway', u'sflow'), ('pybind.nos.v7_1_0.overlay_gateway.map_', u'vlan-vni-mapping'), ('pybind.nos.v7_1_0.overlay_gateway.attach', u'rbridge-id')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'overlay_gateway', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_attach_vlan_get(self, overlay_gateway=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    **Instance Keyword Argument Tuple**:

    :type vlan: vid, mac
    :param vlan: Keyword argument tuple.

    :type vid: long
    :param vid: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type mac: unicode
    :param mac: **vlan** tuple argument:  Configure VLAN-MAC attachment

        * pattern restriction: ::

            '[0-9a-fA-F]{4}(\.[0-9a-fA-F]{4}){2}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.attach.vlan', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.attach.vlan', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.attach.vlan', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.attach.vlan', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'vid, mac', 'extra_keyval': 'vid, mac'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_map_get(self, overlay_gateway=None, vlan_vni_mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    **Instance Keyword Argument Tuple**:

    :type vlan_vni_mapping: vid
    :param vlan_vni_mapping: Keyword argument tuple.

    :type vid: long
    :param vid: **vlan_vni_mapping** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.map_.vlan_vni_mapping', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.map_.vlan_vni_mapping', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.map_.vlan_vni_mapping', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.map_.vlan_vni_mapping', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan_vni_mapping', 'keyval': 'vid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, vlan_vni_mapping=vlan_vni_mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_monitor_get(self, overlay_gateway=None, monitor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    **Instance Keyword Argument Tuple**:

    :type monitor: session, direction, remote_endpoint, vlan_leaf, vlan_add_remove, vlan_range
    :param monitor: Keyword argument tuple.

    :type session: long
    :param session: **monitor** tuple argument:  Session number

        * range restriction: ::

            ['0..4294967295']

    :type direction: unicode
    :param direction: **monitor** tuple argument:  Specify flow direction

        * enumeration restriction: ::

            ['both', 'rx', 'tx']

    :type remote_endpoint: unicode
    :param remote_endpoint: **monitor** tuple argument:  Tunnel destination end point address

        * enumeration restriction: ::

            ['any']

    :type vlan_leaf: unicode
    :param vlan_leaf: **monitor** tuple argument:  Target VLAN IDs

        * enumeration restriction: ::

            ['vlan']

    :type vlan_add_remove: unicode
    :param vlan_add_remove: **monitor** tuple argument.

        * enumeration restriction: ::

            ['add', 'remove']

    :type vlan_range: unicode
    :param vlan_range: **monitor** tuple argument.

        * pattern restriction: ::

            '[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.monitor', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.monitor', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.monitor', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.monitor', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'monitor', 'keyval': 'session', 'extra_keyval': 'session, direction, remote_endpoint, vlan_leaf, vlan_add_remove, vlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, monitor=monitor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_sflow_get(self, overlay_gateway=None, sflow=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    **Instance Keyword Argument Tuple**:

    :type sflow: sflow_profile_name, sflow_remote_endpoint, sflow_vlan_action, sflow_vlan_range
    :param sflow: Keyword argument tuple.

    :type sflow_profile_name: unicode
    :param sflow_profile_name: **sflow** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type sflow_remote_endpoint: unicode
    :param sflow_remote_endpoint: **sflow** tuple argument:  Tunnel destination end point address

        * enumeration restriction: ::

            ['any']

    :type sflow_vlan_action: unicode
    :param sflow_vlan_action: **sflow** tuple argument:  Target VLAN IDs

        * enumeration restriction: ::

            ['add', 'remove']

    :type sflow_vlan_range: unicode
    :param sflow_vlan_range: **sflow** tuple argument.

        * pattern restriction: ::

            '[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.sflow', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.sflow', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.sflow', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.sflow', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'sflow', 'keyval': 'sflow_profile_name', 'extra_keyval': 'sflow_profile_name, sflow_remote_endpoint, sflow_vlan_action, sflow_vlan_range'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, sflow=sflow)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_site_get(self, overlay_gateway=None, site=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    **Instance Keyword Argument Tuple**:

    :type site: name
    :param site: Keyword argument tuple.

    :type name: unicode
    :param name: **site** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,63}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.site', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.site', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.site', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.overlay_gateway.site.bfd', u'params'), ('pybind.nos.v6_0_2b.overlay_gateway.site.extend', u'vlan'), ('pybind.nos.v6_0_2b.overlay_gateway.site', u'tunnel-dst'), ('pybind.nos.v6_0_2b.overlay_gateway.site.bfd.params', u'interval'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site.bfd', u'params'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site.bfd.params', u'interval'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site.extend', u'vlan'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site', u'tunnel-dst'), ('pybind.nos.v7_0_1a.overlay_gateway.site.extend', u'vlan'), ('pybind.nos.v7_0_1a.overlay_gateway.site.bfd', u'params'), ('pybind.nos.v7_0_1a.overlay_gateway.site', u'tunnel-dst'), ('pybind.nos.v7_0_1a.overlay_gateway.site', u'mac-learning'), ('pybind.nos.v7_0_1a.overlay_gateway.site.bfd.params', u'interval'), ('pybind.nos.v7_1_0.overlay_gateway.site.bfd', u'params'), ('pybind.nos.v7_1_0.overlay_gateway.site', u'mac-learning'), ('pybind.nos.v7_1_0.overlay_gateway.site.bfd.params', u'interval'), ('pybind.nos.v7_1_0.overlay_gateway.site', u'tunnel-dst'), ('pybind.nos.v7_1_0.overlay_gateway.site.extend', u'vlan')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'site', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, site=site)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_gateway_site_ip_get(self, overlay_gateway=None, site=None, tunnel_dst=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_gateway: name
    :param overlay_gateway: Keyword argument tuple.

    :type name: unicode
    :param name: **overlay_gateway** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    :type site: name
    :param site: Keyword argument tuple.

    :type name: unicode
    :param name: **site** tuple argument.

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,63}'

    **Instance Keyword Argument Tuple**:

    :type tunnel_dst: address
    :param tunnel_dst: Keyword argument tuple.

    :type address: unicode
    :param address: **tunnel_dst** tuple argument:  Tunnel destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_0_1a.overlay_gateway.site', u'site'), ('pybind.nos.v7_1_0.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v7_1_0.overlay_gateway.site', u'site'), ('pybind.slxos.v16r_1_00b.overlay_gateway', 'overlay_gateway'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site', u'site'), ('pybind.nos.v6_0_2b.overlay_gateway', 'overlay_gateway'), ('pybind.nos.v6_0_2b.overlay_gateway.site', u'site')]
    bindings_list = [('pybind.nos.v6_0_2b.overlay_gateway.site.tunnel_dst', 'pybind.nos.v6_0_2b.brocade_tunnels', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.overlay_gateway.site.tunnel_dst', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.overlay_gateway.site.tunnel_dst', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.overlay_gateway.site.tunnel_dst', 'pybind.slxos.v16r_1_00b.brocade_tunnels', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'tunnel_dst', 'keyval': 'address', 'extra_keyval': 'address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_gateway=overlay_gateway, site=site, tunnel_dst=tunnel_dst)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_transit_get(self, overlay_transit=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type overlay_transit: user_transit_name
    :param overlay_transit: Keyword argument tuple.

    :type user_transit_name: unicode
    :param user_transit_name: **overlay_transit** tuple argument:  User Transit Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay_transit', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.overlay_transit', u'transit-overlay')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'overlay_transit', 'keyval': 'user_transit_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_transit=overlay_transit)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_transit_overlay_get(self, overlay_transit=None, transit_overlay=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type overlay_transit: user_transit_name
    :param overlay_transit: Keyword argument tuple.

    :type user_transit_name: unicode
    :param user_transit_name: **overlay_transit** tuple argument:  User Transit Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    **Instance Keyword Argument Tuple**:

    :type transit_overlay: access_group, in_out
    :param transit_overlay: Keyword argument tuple.

    :type access_group: unicode
    :param access_group: **transit_overlay** tuple argument:  Access Group Name (Max 63)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,62})'

    :type in_out: unicode
    :param in_out: **transit_overlay** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.overlay_transit', 'overlay_transit')]
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay_transit.transit_overlay', 'pybind.slxos.v16r_1_00b.brocade_vxlan_visibility', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'user_transit_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'transit_overlay', 'keyval': 'access_group, in_out', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, overlay_transit=overlay_transit, transit_overlay=transit_overlay)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def overlay_transit_state_extended_data_get(self, extended_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended_data: acl_name, seq_num
    :param extended_data: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **extended_data** tuple argument.

    :type seq_num: long
    :param seq_num: **extended_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.overlay_transit_state.extended_data', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended_data', 'keyval': 'acl_name, seq_num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended_data=extended_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ovsdb_server_get(self, ovsdb_server=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type ovsdb_server: name
    :param ovsdb_server: Keyword argument tuple.

    :type name: unicode
    :param name: **ovsdb_server** tuple argument:  Ovsdb server name

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_0_1a.ovsdb_server', 'pybind.nos.v7_0_1a.brocade_tunnels', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ovsdb_server', 'pybind.nos.v7_1_0.brocade_tunnels', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.ovsdb_server', u'ip')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'ovsdb_server', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ovsdb_server=ovsdb_server)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pim_anycast_state_get(self, pim_anycast_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type pim_anycast_state: anycast_rp
    :param pim_anycast_state: Keyword argument tuple.

    :type anycast_rp: unicode
    :param anycast_rp: **pim_anycast_state** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state', u'peer-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'pim_anycast_state', 'keyval': 'anycast_rp', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_anycast_state=pim_anycast_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pim_anycast_state_peer_list_get(self, pim_anycast_state=None, peer_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_anycast_state: anycast_rp
    :param pim_anycast_state: Keyword argument tuple.

    :type anycast_rp: unicode
    :param anycast_rp: **pim_anycast_state** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type peer_list: ipv4_addr
    :param peer_list: Keyword argument tuple.

    :type ipv4_addr: long
    :param ipv4_addr: **peer_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state', 'pim_anycast_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_anycast_state.peer_list', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'anycast_rp', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'peer_list', 'keyval': 'ipv4_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_anycast_state=pim_anycast_state, peer_list=peer_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pim_ecmp_state_get(self, pim_ecmp_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type pim_ecmp_state: addr_filter
    :param pim_ecmp_state: Keyword argument tuple.

    :type addr_filter: unicode
    :param addr_filter: **pim_ecmp_state** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state', u'pim-ecmp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'pim_ecmp_state', 'keyval': 'addr_filter', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_ecmp_state=pim_ecmp_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pim_ecmp_state_pim_ecmp_get(self, pim_ecmp_state=None, pim_ecmp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type pim_ecmp_state: addr_filter
    :param pim_ecmp_state: Keyword argument tuple.

    :type addr_filter: unicode
    :param addr_filter: **pim_ecmp_state** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    **Instance Keyword Argument Tuple**:

    :type pim_ecmp: src_ip, rp_addr
    :param pim_ecmp: Keyword argument tuple.

    :type src_ip: unicode
    :param src_ip: **pim_ecmp** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type rp_addr: unicode
    :param rp_addr: **pim_ecmp** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state', 'pim_ecmp_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_ecmp_state.pim_ecmp', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'addr_filter', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_ecmp', 'keyval': 'src_ip, rp_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pim_ecmp_state=pim_ecmp_state, pim_ecmp=pim_ecmp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pim_global_state_interfaces_get(self, interfaces=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type interfaces: interface_name
    :param interfaces: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **interfaces** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces', u'pim-interface-data')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'interfaces', 'keyval': 'interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interfaces=interfaces)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pim_global_state_interfaces_pim_interface_data_get(self, interfaces=None, pim_interface_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type interfaces: interface_name
    :param interfaces: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **interfaces** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type pim_interface_data: interface_name, interface_type
    :param pim_interface_data: Keyword argument tuple.

    :type interface_name: unicode
    :param interface_name: **pim_interface_data** tuple argument.

    :type interface_type: unicode
    :param interface_type: **pim_interface_data** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces', u'interfaces')]
    bindings_list = [('pybind.slxos.v16r_1_00b.pim_global_state.interfaces.pim_interface_data', 'pybind.slxos.v16r_1_00b.brocade_pim_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pim_interface_data', 'keyval': 'interface_name, interface_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, interfaces=interfaces, pim_interface_data=pim_interface_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def police_priority_map_get(self, police_priority_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type police_priority_map: name
    :param police_priority_map: Keyword argument tuple.

    :type name: unicode
    :param name: **police_priority_map** tuple argument:  Policer Priority Map Name (Max Size - 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.police_priority_map', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.police_priority_map', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.police_priority_map', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.police_priority_map', u'exceed'), ('pybind.nos.v6_0_2b.police_priority_map', u'conform'), ('pybind.nos.v7_0_1a.police_priority_map', u'conform'), ('pybind.nos.v7_0_1a.police_priority_map', u'exceed'), ('pybind.nos.v7_1_0.police_priority_map', u'conform'), ('pybind.nos.v7_1_0.police_priority_map', u'exceed')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'police_priority_map', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, police_priority_map=police_priority_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def policy_map_get(self, policy_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type policy_map: po_name
    :param policy_map: Keyword argument tuple.

    :type po_name: unicode
    :param po_name: **policy_map** tuple argument:  Policy Map Name (Max Size - 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.policy_map', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.policy_map', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.policy_map', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.policy_map', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.policy_map', u'class'), ('pybind.nos.v7_1_0.policy_map', u'class'), ('pybind.slxos.v16r_1_00b.policy_map', u'class'), ('pybind.nos.v7_0_1a.policy_map', u'class')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'policy_map', 'keyval': 'po_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy_map=policy_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def policy_map_class_get(self, policy_map=None, class_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type policy_map: po_name
    :param policy_map: Keyword argument tuple.

    :type po_name: unicode
    :param po_name: **policy_map** tuple argument:  Policy Map Name (Max Size - 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type class_: cl_name
    :param class_: Keyword argument tuple.

    :type cl_name: unicode
    :param cl_name: **class_** tuple argument:  Policy Map Class Name (Max Size -64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.policy_map', 'policy_map'), ('pybind.nos.v7_1_0.policy_map', 'policy_map'), ('pybind.nos.v6_0_2b.policy_map', 'policy_map'), ('pybind.slxos.v16r_1_00b.policy_map', 'policy_map')]
    bindings_list = [('pybind.nos.v6_0_2b.policy_map.class_', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.policy_map.class_', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.policy_map.class_', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.policy_map.class_', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.policy_map.class_.set_', u'set_cos_tc'), ('pybind.nos.v7_0_1a.policy_map.class_.priority_mapping_table', u'import'), ('pybind.nos.v7_0_1a.policy_map.class_', u'map'), ('pybind.nos.v7_0_1a.policy_map.class_.set_', u'set_dscp'), ('pybind.nos.v7_0_1a.policy_map.class_', u'police'), ('pybind.nos.v7_0_1a.policy_map.class_', u'span'), ('pybind.nos.v7_0_1a.policy_map.class_', u'shape'), ('pybind.nos.v7_0_1a.policy_map.class_.scheduler', u'strict-priority'), ('pybind.nos.v7_1_0.policy_map.class_', u'police'), ('pybind.nos.v7_1_0.policy_map.class_', u'span'), ('pybind.nos.v7_1_0.policy_map.class_', u'map'), ('pybind.nos.v7_1_0.policy_map.class_', u'shape'), ('pybind.nos.v7_1_0.policy_map.class_.priority_mapping_table', u'import'), ('pybind.nos.v7_1_0.policy_map.class_.set_', u'set_dscp'), ('pybind.nos.v7_1_0.policy_map.class_.set_', u'set_cos_tc'), ('pybind.nos.v7_1_0.policy_map.class_.scheduler', u'strict-priority'), ('pybind.nos.v6_0_2b.policy_map.class_.set_', u'set_cos_tc'), ('pybind.nos.v6_0_2b.policy_map.class_.scheduler', u'strict-priority'), ('pybind.nos.v6_0_2b.policy_map.class_', u'span'), ('pybind.nos.v6_0_2b.policy_map.class_', u'map'), ('pybind.nos.v6_0_2b.policy_map.class_.set_', u'set_dscp'), ('pybind.nos.v6_0_2b.policy_map.class_', u'shape'), ('pybind.nos.v6_0_2b.policy_map.class_.priority_mapping_table', u'import'), ('pybind.nos.v6_0_2b.policy_map.class_', u'police'), ('pybind.slxos.v16r_1_00b.policy_map.class_', u'span'), ('pybind.slxos.v16r_1_00b.policy_map.class_', u'shape'), ('pybind.slxos.v16r_1_00b.policy_map.class_.set_', u'set_dscp'), ('pybind.slxos.v16r_1_00b.policy_map.class_.priority_mapping_table', u'import'), ('pybind.slxos.v16r_1_00b.policy_map.class_', u'police'), ('pybind.slxos.v16r_1_00b.policy_map.class_.scheduler', u'strict-priority'), ('pybind.slxos.v16r_1_00b.policy_map.class_', u'map'), ('pybind.slxos.v16r_1_00b.policy_map.class_.set_', u'set_cos_tc')]
    compositions_keyval_list = [{'keyval': 'po_name', 'extra_keyval': ''}, {'keyval': 'po_name', 'extra_keyval': ''}, {'keyval': 'po_name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'class_', 'keyval': 'cl_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy_map=policy_map, class_=class_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_channel_redundancy_group_get(self, port_channel_redundancy_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type port_channel_redundancy_group: group_id
    :param port_channel_redundancy_group: Keyword argument tuple.

    :type group_id: long
    :param group_id: **port_channel_redundancy_group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.port_channel_redundancy_group', 'pybind.nos.v6_0_2b.brocade_lag', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_channel_redundancy_group', 'pybind.nos.v7_0_1a.brocade_lag', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_channel_redundancy_group', 'pybind.nos.v7_1_0.brocade_lag', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group', 'pybind.slxos.v16r_1_00b.brocade_lag', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.port_channel_redundancy_group', u'port-channel'), ('pybind.nos.v6_0_2b.port_channel_redundancy_group', u'port-channel'), ('pybind.nos.v7_1_0.port_channel_redundancy_group', u'port-channel'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group', u'port-channel')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'port_channel_redundancy_group', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel_redundancy_group=port_channel_redundancy_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_channel_redundancy_group_port_channel_get(self, port_channel_redundancy_group=None, port_channel=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_channel_redundancy_group: group_id
    :param port_channel_redundancy_group: Keyword argument tuple.

    :type group_id: long
    :param group_id: **port_channel_redundancy_group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type port_channel: name, port_channel_active
    :param port_channel: Keyword argument tuple.

    :type name: long
    :param name: **port_channel** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type port_channel_active: YANGBool
    :param port_channel_active: **port_channel** tuple argument:  Select port-channel as active in port-channel redundancy group.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.port_channel_redundancy_group', 'port_channel_redundancy_group'), ('pybind.nos.v7_1_0.port_channel_redundancy_group', 'port_channel_redundancy_group'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group', 'port_channel_redundancy_group'), ('pybind.nos.v6_0_2b.port_channel_redundancy_group', 'port_channel_redundancy_group')]
    bindings_list = [('pybind.nos.v6_0_2b.port_channel_redundancy_group.port_channel', 'pybind.nos.v6_0_2b.brocade_lag', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_channel_redundancy_group.port_channel', 'pybind.nos.v7_0_1a.brocade_lag', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_channel_redundancy_group.port_channel', 'pybind.nos.v7_1_0.brocade_lag', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_channel_redundancy_group.port_channel', 'pybind.slxos.v16r_1_00b.brocade_lag', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'name', 'extra_keyval': 'name, port_channel_active'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_channel_redundancy_group=port_channel_redundancy_group, port_channel=port_channel)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_get(self, port_profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type port_profile: name
    :param port_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **port_profile** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_global.port_profile', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_global.port_profile', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_global.port_profile', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.port_profile_global.port_profile', u'static'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile', u'static'), ('pybind.nos.v6_0_2b.port_profile_global.port_profile', u'static'), ('pybind.nos.v7_1_0.port_profile_global.port_profile', u'static')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'port_profile', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_domain_get(self, port_profile_domain=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type port_profile_domain: port_profile_domain_name
    :param port_profile_domain: Keyword argument tuple.

    :type port_profile_domain_name: unicode
    :param port_profile_domain_name: **port_profile_domain** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_domain', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_domain', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_domain', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_domain', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.port_profile_domain', u'profile'), ('pybind.nos.v7_1_0.port_profile_domain', u'profile'), ('pybind.slxos.v16r_1_00b.port_profile_domain', u'profile'), ('pybind.nos.v7_0_1a.port_profile_domain', u'profile')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'port_profile_domain', 'keyval': 'port_profile_domain_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile_domain=port_profile_domain)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_domain_port_profile_get(self, port_profile_domain=None, profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_profile_domain: port_profile_domain_name
    :param port_profile_domain: Keyword argument tuple.

    :type port_profile_domain_name: unicode
    :param port_profile_domain_name: **port_profile_domain** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    **Instance Keyword Argument Tuple**:

    :type profile: profile_name
    :param profile: Keyword argument tuple.

    :type profile_name: unicode
    :param profile_name: **profile** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.port_profile_domain', 'port_profile_domain'), ('pybind.nos.v7_1_0.port_profile_domain', 'port_profile_domain'), ('pybind.nos.v6_0_2b.port_profile_domain', 'port_profile_domain'), ('pybind.nos.v7_0_1a.port_profile_domain', 'port_profile_domain')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_domain.profile', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_domain.profile', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_domain.profile', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_domain.profile', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'port_profile_domain_name', 'extra_keyval': ''}, {'keyval': 'port_profile_domain_name', 'extra_keyval': ''}, {'keyval': 'port_profile_domain_name', 'extra_keyval': ''}, {'keyval': 'port_profile_domain_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'profile', 'keyval': 'profile_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile_domain=port_profile_domain, profile=profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_qos_profile_qos_flowcontrol_pfc_get(self, port_profile=None, pfc=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_profile: name
    :param port_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **port_profile** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    **Instance Keyword Argument Tuple**:

    :type pfc: pfc_cos
    :param pfc: Keyword argument tuple.

    :type pfc_cos: long
    :param pfc_cos: **pfc** tuple argument:  CoS value

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.qos_profile.qos.flowcontrol.pfc', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pfc', 'keyval': 'pfc_cos', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, pfc=pfc)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_static_get(self, port_profile=None, static=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_profile: name
    :param port_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **port_profile** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    **Instance Keyword Argument Tuple**:

    :type static: mac_address
    :param static: Keyword argument tuple.

    :type mac_address: unicode
    :param mac_address: **static** tuple argument:  mac address in HHHH.HHHH.HHHH format

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.port_profile_global.port_profile', u'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile', u'port_profile'), ('pybind.nos.v6_0_2b.port_profile_global.port_profile', u'port_profile'), ('pybind.nos.v7_0_1a.port_profile_global.port_profile', u'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile_global.port_profile.static', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile_global.port_profile.static', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile_global.port_profile.static', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile_global.port_profile.static', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static', 'keyval': 'mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, static=static)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_vlan_profile_switchport_access_vlan_get(self, port_profile=None, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_profile: name
    :param port_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **port_profile** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    **Instance Keyword Argument Tuple**:

    :type vlan: access_vlan_id, access_mac_group
    :param vlan: Keyword argument tuple.

    :type access_vlan_id: long
    :param access_vlan_id: **vlan** tuple argument:  Set the default VLAN for the interface

        * range restriction: ::

            ['0..4294967295']

    :type access_mac_group: long
    :param access_mac_group: **vlan** tuple argument:  Associate a Mac group with a vlan

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.access_mac_group_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.access_mac_vlan_classification.access.vlan', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'access_vlan_id, access_mac_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_vlan_profile_switchport_trunk_allowed_vlan_add_get(self, port_profile=None, add=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_profile: name
    :param port_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **port_profile** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    **Instance Keyword Argument Tuple**:

    :type add: trunk_vlan_id, trunk_ctag_id
    :param add: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **add** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.add_', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'add', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, add=add)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def port_profile_vlan_profile_switchport_trunk_allowed_vlan_remove_get(self, port_profile=None, remove=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type port_profile: name
    :param port_profile: Keyword argument tuple.

    :type name: unicode
    :param name: **port_profile** tuple argument:  Port-profile name (Max Size - 128)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,127})'

    **Instance Keyword Argument Tuple**:

    :type remove: trunk_vlan_id, trunk_ctag_id
    :param remove: Keyword argument tuple.

    :type trunk_vlan_id: long
    :param trunk_vlan_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type trunk_ctag_id: long
    :param trunk_ctag_id: **remove** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.port_profile', 'port_profile'), ('pybind.nos.v6_0_2b.port_profile', 'port_profile'), ('pybind.nos.v7_0_1a.port_profile', 'port_profile'), ('pybind.slxos.v16r_1_00b.port_profile', 'port_profile')]
    bindings_list = [('pybind.nos.v6_0_2b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v6_0_2b.brocade_port_profile', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_0_1a.brocade_port_profile', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.nos.v7_1_0.brocade_port_profile', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.port_profile.vlan_profile.switchport.trunk.trunk_vlan_classification.allowed.vlan.remove_', 'pybind.slxos.v16r_1_00b.brocade_port_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remove', 'keyval': 'trunk_vlan_id, trunk_ctag_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, port_profile=port_profile, remove=remove)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def preprovision_rbridge_id_get(self, rbridge_id=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rbridge_id: rbridge_id, wwn
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type wwn: unicode
    :param wwn: **rbridge_id** tuple argument:  World Wide Name (WWN)

        * pattern restriction: ::

            '[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0'
            '-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9'
            'a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-'
            'fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.preprovision.rbridge_id', 'pybind.nos.v6_0_2b.brocade_preprovision', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.preprovision.rbridge_id', 'pybind.nos.v7_0_1a.brocade_preprovision', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.preprovision.rbridge_id', 'pybind.nos.v7_1_0.brocade_preprovision', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.preprovision.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_preprovision', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id, wwn', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_cfm_domain_name_get(self, domain_name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type domain_name: domain_name
    :param domain_name: Keyword argument tuple.

    :type domain_name: unicode
    :param domain_name: **domain_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'ma-name')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'domain_name', 'keyval': 'domain_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_cfm_domain_name_ma_name_get(self, domain_name=None, ma_name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain_name: domain_name
    :param domain_name: Keyword argument tuple.

    :type domain_name: unicode
    :param domain_name: **domain_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    **Instance Keyword Argument Tuple**:

    :type ma_name: ma_name
    :param ma_name: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'domain_name')]
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands', u'mep'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', u'cfm-ma-sub-commands')]
    compositions_keyval_list = [{'keyval': 'domain_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ma_name', 'keyval': 'ma_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name, ma_name=ma_name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_cfm_domain_name_ma_name_mep_get(self, domain_name=None, ma_name=None, mep=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain_name: domain_name
    :param domain_name: Keyword argument tuple.

    :type domain_name: unicode
    :param domain_name: **domain_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    :type ma_name: ma_name
    :param ma_name: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    **Instance Keyword Argument Tuple**:

    :type mep: mep_id
    :param mep: Keyword argument tuple.

    :type mep_id: long
    :param mep_id: **mep** tuple argument:  DECIMAL :: <1-8191>

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'domain_name'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', u'ma_name')]
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep.cfm_mep_sub_commands', u'remote-mep'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep', u'cfm-mep-sub-commands')]
    compositions_keyval_list = [{'keyval': 'domain_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mep', 'keyval': 'mep_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name, ma_name=ma_name, mep=mep)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_cfm_domain_name_ma_name_mep_remote_mep_get(self, domain_name=None, ma_name=None, mep=None, remote_mep=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type domain_name: domain_name
    :param domain_name: Keyword argument tuple.

    :type domain_name: unicode
    :param domain_name: **domain_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    :type ma_name: ma_name
    :param ma_name: Keyword argument tuple.

    :type ma_name: unicode
    :param ma_name: **ma_name** tuple argument:  String length 21 char

        * length restriction: ::

            ['1..21']

    :type mep: mep_id
    :param mep: Keyword argument tuple.

    :type mep_id: long
    :param mep_id: **mep** tuple argument:  DECIMAL :: <1-8191>

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type remote_mep: remote_mep
    :param remote_mep: Keyword argument tuple.

    :type remote_mep: long
    :param remote_mep: **remote_mep** tuple argument:  DECIMAL :: <1-8191>

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name', u'domain_name'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name', u'ma_name'), ('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep', u'mep')]
    bindings_list = [('pybind.slxos.v16r_1_00b.protocol.cfm.domain_name.ma_name.cfm_ma_sub_commands.mep.cfm_mep_sub_commands.remote_mep', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'domain_name', 'extra_keyval': ''}, {'keyval': 'ma_name', 'extra_keyval': ''}, {'keyval': 'mep_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'remote_mep', 'keyval': 'remote_mep', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, domain_name=domain_name, ma_name=ma_name, mep=mep, remote_mep=remote_mep)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_lldp_profile_get(self, profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type profile: profile_name
    :param profile: Keyword argument tuple.

    :type profile_name: unicode
    :param profile_name: **profile** tuple argument.

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '(\S)+'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.lldp.profile', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.lldp.profile', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.lldp.profile', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.lldp.profile', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.protocol.lldp.profile.advertise', u'optional-tlv'), ('pybind.nos.v7_0_1a.protocol.lldp.profile', u'advertise'), ('pybind.slxos.v16r_1_00b.protocol.lldp.profile.advertise', u'optional-tlv'), ('pybind.slxos.v16r_1_00b.protocol.lldp.profile', u'advertise'), ('pybind.nos.v6_0_2b.protocol.lldp.profile.advertise', u'optional-tlv'), ('pybind.nos.v6_0_2b.protocol.lldp.profile', u'advertise'), ('pybind.nos.v7_1_0.protocol.lldp.profile.advertise', u'optional-tlv'), ('pybind.nos.v7_1_0.protocol.lldp.profile', u'advertise')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'profile', 'keyval': 'profile_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, profile=profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_spanning_tree_mstp_instance_get(self, instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type instance: id
    :param instance: Keyword argument tuple.

    :type id: int
    :param id: **instance** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.spanning_tree.mstp.instance', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.spanning_tree.mstp.instance', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.spanning_tree.mstp.instance', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.spanning_tree.mstp.instance', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'instance', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, instance=instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_spanning_tree_pvst_vlan_get(self, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.spanning_tree.pvst.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.spanning_tree.pvst.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.spanning_tree.pvst.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.spanning_tree.pvst.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.protocol.spanning_tree.pvst.vlan', u'timer-config')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def protocol_spanning_tree_rpvst_vlan_get(self, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vlan: id
    :param vlan: Keyword argument tuple.

    :type id: long
    :param id: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.protocol.spanning_tree.rpvst.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.protocol.spanning_tree.rpvst.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.protocol.spanning_tree.rpvst.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.protocol.spanning_tree.rpvst.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.protocol.spanning_tree.rpvst.vlan', u'timer-config')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def pw_profile_get(self, pw_profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type pw_profile: pw_profile_name
    :param pw_profile: Keyword argument tuple.

    :type pw_profile_name: unicode
    :param pw_profile_name: **pw_profile** tuple argument:  Pw-profile name (Max Size - 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.pw_profile', 'pybind.slxos.v16r_1_00b.brocade_pw_profile', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.pw_profile', u'vc-mode'), ('pybind.slxos.v16r_1_00b.pw_profile', u'mtu')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'pw_profile', 'keyval': 'pw_profile_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, pw_profile=pw_profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_cpu_slot_get(self, slot=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type slot: slot_id
    :param slot: Keyword argument tuple.

    :type slot_id: unicode
    :param slot_id: **slot** tuple argument.

        * length restriction: ::

            ['1..3']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.port', u'port-shaper'), ('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group', u'group')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'slot', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot=slot)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_cpu_slot_group_get(self, slot=None, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type slot: slot_id
    :param slot: Keyword argument tuple.

    :type slot_id: unicode
    :param slot_id: **slot** tuple argument.

        * length restriction: ::

            ['1..3']

    **Instance Keyword Argument Tuple**:

    :type group: group_id
    :param group: Keyword argument tuple.

    :type group_id: unicode
    :param group_id: **group** tuple argument.

        * length restriction: ::

            ['1..3']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot', u'slot')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq', u'group-wfq'), ('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq', u'group-shaper'), ('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq', u'group-prio')]
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot=slot, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_cpu_slot_group_prio_get(self, slot=None, group=None, group_prio=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type slot: slot_id
    :param slot: Keyword argument tuple.

    :type slot_id: unicode
    :param slot_id: **slot** tuple argument.

        * length restriction: ::

            ['1..3']

    :type group: group_id
    :param group: Keyword argument tuple.

    :type group_id: unicode
    :param group_id: **group** tuple argument.

        * length restriction: ::

            ['1..3']

    **Instance Keyword Argument Tuple**:

    :type group_prio: group_prio_id
    :param group_prio: Keyword argument tuple.

    :type group_prio_id: unicode
    :param group_prio_id: **group_prio** tuple argument.

        * length restriction: ::

            ['1..3']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot', u'slot'), ('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group', u'group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq.group_prio', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq.group_prio.group_prio_config_shaper_wfq', u'group-prio-shaper'), ('pybind.slxos.v16r_1_00b.qos.cpu.slot.port_group.group.group_config_shaper_wfq.group_prio.group_prio_config_shaper_wfq', u'group-prio-wfq')]
    compositions_keyval_list = [{'keyval': 'slot_id', 'extra_keyval': ''}, {'keyval': 'group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'group_prio', 'keyval': 'group_prio_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, slot=slot, group=group, group_prio=group_prio)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_cos_mutation_get(self, cos_mutation=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cos_mutation: name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7
    :param cos_mutation: Keyword argument tuple.

    :type name: unicode
    :param name: **cos_mutation** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type cos0: long
    :param cos0: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos1: long
    :param cos1: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos2: long
    :param cos2: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos3: long
    :param cos3: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos4: long
    :param cos4: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos5: long
    :param cos5: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos6: long
    :param cos6: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos7: long
    :param cos7: **cos_mutation** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.cos_mutation', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.cos_mutation', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.cos_mutation', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation', u'cos-to-cos-mappings')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cos_mutation', 'keyval': 'name', 'extra_keyval': 'name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_mutation=cos_mutation)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_cos_mutation_map_get(self, cos_mutation=None, cos_to_cos_mappings=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cos_mutation: name
    :param cos_mutation: Keyword argument tuple.

    :type name: unicode
    :param name: **cos_mutation** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type cos_to_cos_mappings: from_cos
    :param cos_to_cos_mappings: Keyword argument tuple.

    :type from_cos: int
    :param from_cos: **cos_to_cos_mappings** tuple argument:  In CoS

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation', u'cos_mutation')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation.cos_to_cos_mappings', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_mutation.cos_to_cos_mappings', u'to')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cos_to_cos_mappings', 'keyval': 'from_cos', 'extra_keyval': 'from_cos'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_mutation=cos_mutation, cos_to_cos_mappings=cos_to_cos_mappings)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_cos_traffic_class_get(self, cos_traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cos_traffic_class: name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7
    :param cos_traffic_class: Keyword argument tuple.

    :type name: unicode
    :param name: **cos_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type cos0: long
    :param cos0: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos1: long
    :param cos1: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos2: long
    :param cos2: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos3: long
    :param cos3: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos4: long
    :param cos4: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos5: long
    :param cos5: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos6: long
    :param cos6: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type cos7: long
    :param cos7: **cos_traffic_class** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.cos_traffic_class', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.cos_traffic_class', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.cos_traffic_class', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class', u'cos-to-tc-dp-mappings')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cos_traffic_class', 'keyval': 'name', 'extra_keyval': 'name, cos0, cos1, cos2, cos3, cos4, cos5, cos6, cos7'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_traffic_class=cos_traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_cos_traffic_class_map_get(self, cos_traffic_class=None, cos_to_tc_dp_mappings=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cos_traffic_class: name
    :param cos_traffic_class: Keyword argument tuple.

    :type name: unicode
    :param name: **cos_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type cos_to_tc_dp_mappings: from_cos
    :param cos_to_tc_dp_mappings: Keyword argument tuple.

    :type from_cos: int
    :param from_cos: **cos_to_tc_dp_mappings** tuple argument:  In CoS

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class', u'cos_traffic_class')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class.cos_to_tc_dp_mappings', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.cos_traffic_class.cos_to_tc_dp_mappings', u'to')]
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cos_to_tc_dp_mappings', 'keyval': 'from_cos', 'extra_keyval': 'from_cos'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cos_traffic_class=cos_traffic_class, cos_to_tc_dp_mappings=cos_to_tc_dp_mappings)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_cos_get(self, dscp_cos=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type dscp_cos: dscp_cos_map_name
    :param dscp_cos: Keyword argument tuple.

    :type dscp_cos_map_name: unicode
    :param dscp_cos_map_name: **dscp_cos** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos', u'mark'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos', u'mark'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos', u'dscp-to-cos-mapping'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos', u'mark')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_cos', 'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_cos=dscp_cos)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_cos_map_get(self, dscp_cos=None, dscp_to_cos_mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_cos: dscp_cos_map_name
    :param dscp_cos: Keyword argument tuple.

    :type dscp_cos_map_name: unicode
    :param dscp_cos_map_name: **dscp_cos** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type dscp_to_cos_mapping: dscp_in_values
    :param dscp_to_cos_mapping: Keyword argument tuple.

    :type dscp_in_values: unicode
    :param dscp_in_values: **dscp_to_cos_mapping** tuple argument:  In DSCP

        * pattern restriction: ::

            '(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5]'
            '[0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-'
            '3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos', u'dscp_cos')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos.dscp_to_cos_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_cos.dscp_to_cos_mapping', u'to')]
    compositions_keyval_list = [{'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp_to_cos_mapping', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_cos=dscp_cos, dscp_to_cos_mapping=dscp_to_cos_mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_cos_mark_get(self, dscp_cos=None, mark=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_cos: dscp_cos_map_name
    :param dscp_cos: Keyword argument tuple.

    :type dscp_cos_map_name: unicode
    :param dscp_cos_map_name: **dscp_cos** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type mark: dscp_in_values
    :param mark: Keyword argument tuple.

    :type dscp_in_values: unicode
    :param dscp_in_values: **mark** tuple argument:  0-63;;Incoming DSCP

        * pattern restriction: ::

            '(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5]'
            '[0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-'
            '3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos', u'dscp_cos'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos', u'dscp_cos'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos', u'dscp_cos')]
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_cos.mark', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_cos.mark', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_cos.mark', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_cos_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mark', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_cos=dscp_cos, mark=mark)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_mutation_get(self, dscp_mutation=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type dscp_mutation: dscp_mutation_map_name
    :param dscp_mutation: Keyword argument tuple.

    :type dscp_mutation_map_name: unicode
    :param dscp_mutation_map_name: **dscp_mutation** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_mutation', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_mutation', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_mutation', u'mark'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation', u'dscp-to-dscp-mapping'), ('pybind.nos.v7_1_0.qos.map_.dscp_mutation', u'mark'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation', u'mark')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_mutation', 'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_mutation=dscp_mutation)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_mutation_map_get(self, dscp_mutation=None, dscp_to_dscp_mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_mutation: dscp_mutation_map_name
    :param dscp_mutation: Keyword argument tuple.

    :type dscp_mutation_map_name: unicode
    :param dscp_mutation_map_name: **dscp_mutation** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type dscp_to_dscp_mapping: dscp_in_values
    :param dscp_to_dscp_mapping: Keyword argument tuple.

    :type dscp_in_values: unicode
    :param dscp_in_values: **dscp_to_dscp_mapping** tuple argument:  In DSCP

        * pattern restriction: ::

            '(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5]'
            '[0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-'
            '3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation', u'dscp_mutation')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation.dscp_to_dscp_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_mutation.dscp_to_dscp_mapping', u'to')]
    compositions_keyval_list = [{'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp_to_dscp_mapping', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_mutation=dscp_mutation, dscp_to_dscp_mapping=dscp_to_dscp_mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_mutation_mark_get(self, dscp_mutation=None, mark=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_mutation: dscp_mutation_map_name
    :param dscp_mutation: Keyword argument tuple.

    :type dscp_mutation_map_name: unicode
    :param dscp_mutation_map_name: **dscp_mutation** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type mark: dscp_in_values
    :param mark: Keyword argument tuple.

    :type dscp_in_values: unicode
    :param dscp_in_values: **mark** tuple argument:  0-63;;Incoming DSCP

        * pattern restriction: ::

            '(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5]'
            '[0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-'
            '3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.qos.map_.dscp_mutation', u'dscp_mutation'), ('pybind.nos.v6_0_2b.qos.map_.dscp_mutation', u'dscp_mutation'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation', u'dscp_mutation')]
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_mutation.mark', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_mutation.mark', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_mutation.mark', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_mutation_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mark', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_mutation=dscp_mutation, mark=mark)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_traffic_class_get(self, dscp_traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type dscp_traffic_class: dscp_traffic_class_map_name
    :param dscp_traffic_class: Keyword argument tuple.

    :type dscp_traffic_class_map_name: unicode
    :param dscp_traffic_class_map_name: **dscp_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class', u'mark'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class', u'mark'), ('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class', u'mark'), ('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class', u'dscp-to-tc-dp-mapping')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_traffic_class', 'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_traffic_class=dscp_traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_traffic_class_map_get(self, dscp_traffic_class=None, dscp_to_tc_dp_mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_traffic_class: dscp_traffic_class_map_name
    :param dscp_traffic_class: Keyword argument tuple.

    :type dscp_traffic_class_map_name: unicode
    :param dscp_traffic_class_map_name: **dscp_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type dscp_to_tc_dp_mapping: dscp_in_values
    :param dscp_to_tc_dp_mapping: Keyword argument tuple.

    :type dscp_in_values: unicode
    :param dscp_in_values: **dscp_to_tc_dp_mapping** tuple argument:  In DSCP

        * pattern restriction: ::

            '(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5]'
            '[0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-'
            '3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class', u'dscp_traffic_class')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class.dscp_to_tc_dp_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.dscp_traffic_class.dscp_to_tc_dp_mapping', u'to')]
    compositions_keyval_list = [{'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp_to_tc_dp_mapping', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_traffic_class=dscp_traffic_class, dscp_to_tc_dp_mapping=dscp_to_tc_dp_mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_dscp_traffic_class_mark_get(self, dscp_traffic_class=None, mark=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_traffic_class: dscp_traffic_class_map_name
    :param dscp_traffic_class: Keyword argument tuple.

    :type dscp_traffic_class_map_name: unicode
    :param dscp_traffic_class_map_name: **dscp_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type mark: dscp_in_values
    :param mark: Keyword argument tuple.

    :type dscp_in_values: unicode
    :param dscp_in_values: **mark** tuple argument:  0-63;;Incoming DSCP

        * pattern restriction: ::

            '(([0-9])|([1-5][0-9])|(6[0-3]))(-(([0-9])|([1-5]'
            '[0-9])|(6[0-3])))?((,(([0-9])|([1-5][0-9])|(6[0-'
            '3]))(-(([0-9])|([1-5][0-9])|(6[0-3])))?)?)*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class', u'dscp_traffic_class'), ('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class', u'dscp_traffic_class'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class', u'dscp_traffic_class')]
    bindings_list = [('pybind.nos.v6_0_2b.qos.map_.dscp_traffic_class.mark', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.map_.dscp_traffic_class.mark', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.map_.dscp_traffic_class.mark', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}, {'keyval': 'dscp_traffic_class_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'mark', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_traffic_class=dscp_traffic_class, mark=mark)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_traffic_class_cos_get(self, traffic_class_cos=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type traffic_class_cos: traffic_class_cos_map_name
    :param traffic_class_cos: Keyword argument tuple.

    :type traffic_class_cos_map_name: unicode
    :param traffic_class_cos_map_name: **traffic_class_cos** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos', u'tc-dp-to-cos-mapping')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'traffic_class_cos', 'keyval': 'traffic_class_cos_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_cos=traffic_class_cos)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_map_traffic_class_cos_map_get(self, traffic_class_cos=None, tc_dp_to_cos_mapping=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type traffic_class_cos: traffic_class_cos_map_name
    :param traffic_class_cos: Keyword argument tuple.

    :type traffic_class_cos_map_name: unicode
    :param traffic_class_cos_map_name: **traffic_class_cos** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type tc_dp_to_cos_mapping: from_traffic_class, from_drop_precedence
    :param tc_dp_to_cos_mapping: Keyword argument tuple.

    :type from_traffic_class: int
    :param from_traffic_class: **tc_dp_to_cos_mapping** tuple argument:  In Traffic-Class

        * range restriction: ::

            ['0..255']

    :type from_drop_precedence: int
    :param from_drop_precedence: **tc_dp_to_cos_mapping** tuple argument:  In Drop-Precedence

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos', u'traffic_class_cos')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos.tc_dp_to_cos_mapping', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos.map_.traffic_class_cos.tc_dp_to_cos_mapping', u'to')]
    compositions_keyval_list = [{'keyval': 'traffic_class_cos_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'tc_dp_to_cos_mapping', 'keyval': 'from_traffic_class, from_drop_precedence', 'extra_keyval': 'from_traffic_class, from_drop_precedence'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_cos=traffic_class_cos, tc_dp_to_cos_mapping=tc_dp_to_cos_mapping)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_dscp_exp_get(self, dscp_exp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type dscp_exp: dscp_exp_map_name
    :param dscp_exp: Keyword argument tuple.

    :type dscp_exp_map_name: unicode
    :param dscp_exp_map_name: **dscp_exp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp', u'dscp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'dscp_exp', 'keyval': 'dscp_exp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_exp=dscp_exp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_dscp_exp_dscp_get(self, dscp_exp=None, dscp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type dscp_exp: dscp_exp_map_name
    :param dscp_exp: Keyword argument tuple.

    :type dscp_exp_map_name: unicode
    :param dscp_exp_map_name: **dscp_exp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type dscp: dscp_in_values
    :param dscp: Keyword argument tuple.

    :type dscp_in_values: long
    :param dscp_in_values: **dscp** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp', u'dscp_exp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp.dscp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.dscp_exp.dscp', u'to')]
    compositions_keyval_list = [{'keyval': 'dscp_exp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'dscp', 'keyval': 'dscp_in_values', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, dscp_exp=dscp_exp, dscp=dscp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_exp_dscp_get(self, exp_dscp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type exp_dscp: exp_dscp_map_name
    :param exp_dscp: Keyword argument tuple.

    :type exp_dscp_map_name: unicode
    :param exp_dscp_map_name: **exp_dscp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp', u'exp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'exp_dscp', 'keyval': 'exp_dscp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_dscp=exp_dscp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_exp_dscp_exp_get(self, exp_dscp=None, exp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type exp_dscp: exp_dscp_map_name
    :param exp_dscp: Keyword argument tuple.

    :type exp_dscp_map_name: unicode
    :param exp_dscp_map_name: **exp_dscp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type exp: exp_in_values
    :param exp: Keyword argument tuple.

    :type exp_in_values: long
    :param exp_in_values: **exp** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp', u'exp_dscp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp.exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_dscp.exp', u'to')]
    compositions_keyval_list = [{'keyval': 'exp_dscp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exp', 'keyval': 'exp_in_values', 'extra_keyval': 'exp_in_values'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_dscp=exp_dscp, exp=exp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_exp_traffic_class_get(self, exp_traffic_class=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type exp_traffic_class: exp_traffic_class_map_name
    :param exp_traffic_class: Keyword argument tuple.

    :type exp_traffic_class_map_name: unicode
    :param exp_traffic_class_map_name: **exp_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class', u'exp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'exp_traffic_class', 'keyval': 'exp_traffic_class_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_traffic_class=exp_traffic_class)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_exp_traffic_class_exp_get(self, exp_traffic_class=None, exp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type exp_traffic_class: exp_traffic_class_map_name
    :param exp_traffic_class: Keyword argument tuple.

    :type exp_traffic_class_map_name: unicode
    :param exp_traffic_class_map_name: **exp_traffic_class** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type exp: exp_in_values
    :param exp: Keyword argument tuple.

    :type exp_in_values: long
    :param exp_in_values: **exp** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class', u'exp_traffic_class')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class.exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.exp_traffic_class.exp', u'to')]
    compositions_keyval_list = [{'keyval': 'exp_traffic_class_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exp', 'keyval': 'exp_in_values', 'extra_keyval': 'exp_in_values'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, exp_traffic_class=exp_traffic_class, exp=exp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_inexp_outexp_get(self, inexp_outexp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type inexp_outexp: inexp_outexp_map_name
    :param inexp_outexp: Keyword argument tuple.

    :type inexp_outexp_map_name: unicode
    :param inexp_outexp_map_name: **inexp_outexp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp', u'in-exp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'inexp_outexp', 'keyval': 'inexp_outexp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, inexp_outexp=inexp_outexp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_inexp_outexp_in_exp_get(self, inexp_outexp=None, in_exp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type inexp_outexp: inexp_outexp_map_name
    :param inexp_outexp: Keyword argument tuple.

    :type inexp_outexp_map_name: unicode
    :param inexp_outexp_map_name: **inexp_outexp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type in_exp: in_exp_in_values
    :param in_exp: Keyword argument tuple.

    :type in_exp_in_values: long
    :param in_exp_in_values: **in_exp** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp', u'inexp_outexp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp.in_exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.inexp_outexp.in_exp', u'to')]
    compositions_keyval_list = [{'keyval': 'inexp_outexp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'in_exp', 'keyval': 'in_exp_in_values', 'extra_keyval': 'in_exp_in_values'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, inexp_outexp=inexp_outexp, in_exp=in_exp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_traffic_class_exp_get(self, traffic_class_exp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type traffic_class_exp: traffic_class_exp_map_name
    :param traffic_class_exp: Keyword argument tuple.

    :type traffic_class_exp_map_name: unicode
    :param traffic_class_exp_map_name: **traffic_class_exp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp', u'priority')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'traffic_class_exp', 'keyval': 'traffic_class_exp_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_exp=traffic_class_exp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_mpls_map_traffic_class_exp_traffic_class_get(self, traffic_class_exp=None, priority=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type traffic_class_exp: traffic_class_exp_map_name
    :param traffic_class_exp: Keyword argument tuple.

    :type traffic_class_exp_map_name: unicode
    :param traffic_class_exp_map_name: **traffic_class_exp** tuple argument:  Name for the MAP(Max 64)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type priority: priority_in_values, drop_precedence, to, exp
    :param priority: Keyword argument tuple.

    :type priority_in_values: long
    :param priority_in_values: **priority** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type drop_precedence: long
    :param drop_precedence: **priority** tuple argument:  drop-precedence value 0-3

        * range restriction: ::

            ['0..4294967295']

    :type to: YANGBool
    :param to: **priority** tuple argument:  to

    :type exp: long
    :param exp: **priority** tuple argument:  exp value 0-7

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp', u'traffic_class_exp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.qos_mpls.map_.traffic_class_exp.priority', 'pybind.slxos.v16r_1_00b.brocade_qos_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'traffic_class_exp_map_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'priority', 'keyval': 'priority_in_values', 'extra_keyval': 'priority_in_values, drop_precedence, to, exp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, traffic_class_exp=traffic_class_exp, priority=priority)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_red_profile_get(self, red_profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type red_profile: profile_id, min_threshold, max_threshold, drop_probability
    :param red_profile: Keyword argument tuple.

    :type profile_id: long
    :param profile_id: **red_profile** tuple argument:  0-383;;Profile Id

        * range restriction: ::

            ['-2147483648..2147483647']

    :type min_threshold: long
    :param min_threshold: **red_profile** tuple argument:  Minimum Threshold in Percentage

        * range restriction: ::

            ['-2147483648..2147483647']

    :type max_threshold: long
    :param max_threshold: **red_profile** tuple argument:  Maximum Threshold in Percentage

        * range restriction: ::

            ['-2147483648..2147483647']

    :type drop_probability: long
    :param drop_probability: **red_profile** tuple argument:  Drop Probability in Percentage

        * range restriction: ::

            ['-2147483648..2147483647']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.qos.red_profile', 'pybind.nos.v6_0_2b.brocade_qos', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.qos.red_profile', 'pybind.nos.v7_0_1a.brocade_qos', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.qos.red_profile', 'pybind.nos.v7_1_0.brocade_qos', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.qos.red_profile', 'pybind.slxos.v16r_1_00b.brocade_qos_mls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'red_profile', 'keyval': 'profile_id', 'extra_keyval': 'profile_id, min_threshold, max_threshold, drop_probability'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, red_profile=red_profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def qos_service_policy_get(self, service_policy=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type service_policy: direction, policy_map_name
    :param service_policy: Keyword argument tuple.

    :type direction: unicode
    :param direction: **service_policy** tuple argument.

        * enumeration restriction: ::

            ['in']

    :type policy_map_name: unicode
    :param policy_map_name: **service_policy** tuple argument:  MAP_NAME;;Qos Policy map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_qos.qos.service_policy', 'pybind.nos.v6_0_2b.brocade_policer', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_qos.qos.service_policy', 'pybind.nos.v7_0_1a.brocade_policer', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_qos.qos.service_policy', 'pybind.nos.v7_1_0.brocade_policer', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_qos.qos.service_policy', 'pybind.slxos.v16r_1_00b.brocade_qos_mqc', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.system_qos.qos.service_policy.attach.rbridge_id', u'remove'), ('pybind.nos.v7_0_1a.system_qos.qos.service_policy.attach.rbridge_id', u'add'), ('pybind.nos.v6_0_2b.system_qos.qos.service_policy.attach.rbridge_id', u'remove'), ('pybind.nos.v6_0_2b.system_qos.qos.service_policy.attach.rbridge_id', u'add'), ('pybind.nos.v7_1_0.system_qos.qos.service_policy.attach.rbridge_id', u'add'), ('pybind.nos.v7_1_0.system_qos.qos.service_policy.attach.rbridge_id', u'remove')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'service_policy', 'keyval': 'direction, policy_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, service_policy=service_policy)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def queues_state_queue_interface_list_get(self, queue_interface_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type queue_interface_list: interface_value
    :param queue_interface_list: Keyword argument tuple.

    :type interface_value: unicode
    :param interface_value: **queue_interface_list** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list', u'queue-info-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'queue_interface_list', 'keyval': 'interface_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue_interface_list=queue_interface_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def queues_state_queue_interface_list_queue_info_list_get(self, queue_interface_list=None, queue_info_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type queue_interface_list: interface_value
    :param queue_interface_list: Keyword argument tuple.

    :type interface_value: unicode
    :param interface_value: **queue_interface_list** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type queue_info_list: interface, num
    :param queue_info_list: Keyword argument tuple.

    :type interface: unicode
    :param interface: **queue_info_list** tuple argument.

    :type num: long
    :param num: **queue_info_list** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list', u'queue_interface_list')]
    bindings_list = [('pybind.slxos.v16r_1_00b.queues_state.queue_interface_list.queue_info_list', 'pybind.slxos.v16r_1_00b.brocade_openflow_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'interface_value', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue_info_list', 'keyval': 'interface, num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue_interface_list=queue_interface_list, queue_info_list=queue_info_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def radius_server_host_get(self, host=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type host: hostname
    :param host: Keyword argument tuple.

    :type hostname: unicode
    :param hostname: **host** tuple argument:  INETADDRESS   Domain name or IP Address of this RADIUS server

        * length restriction: ::

            ['0..max']

        * pattern restriction: ::

            '\p{IsBasicLatin}{0,255}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.radius_server.host', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.radius_server.host', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.radius_server.host', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.radius_server.host', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.radius_server.host', u'radius-server-options')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'hostname, use_vrf', 'extra_keyval': 'hostname, use_vrf, auth_port, protocol, key, encryption_level, retries, timeout'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_get(self, rbridge_id=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.rbridge_id', u'logical-chassis'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps', u'enable'), ('pybind.slxos.v16r_1_00b.rbridge_id.ip.community_list', u'extended'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', u'ag'), ('pybind.slxos.v16r_1_00b.rbridge_id', u'default-config'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor', u'sfp'), ('pybind.slxos.v16r_1_00b.rbridge_id.fabric.route', u'mcast'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.compact_flash', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.fan', u'alert'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps.email', u'email-list'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag.nport_menu.nport_interface', u'nport'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.temp', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor', u'cpu'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.LineCard', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps', u'relay'), ('pybind.slxos.v16r_1_00b.rbridge_id.vcs', u'auto-shut'), ('pybind.slxos.v16r_1_00b.preprovision', u'rbridge-id'), ('pybind.slxos.v16r_1_00b.rbridge_id.chassis', u'oper-address'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor', u'interface'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id.ip.community_list', u'standard'), ('pybind.slxos.v16r_1_00b.rbridge_id.fabric', u'ecmp'), ('pybind.slxos.v16r_1_00b.rbridge_id.fabric', u'port-channel'), ('pybind.slxos.v16r_1_00b.diag.post', u'rbridge-id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor', u'memory'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.LineCard', u'alert'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.power', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag', u'timeout'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag', u'pg'), ('pybind.slxos.v16r_1_00b.fabric.route.mcast', u'rbridge-id'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.power', u'alert'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor', u'security'), ('pybind.slxos.v16r_1_00b.rbridge_id', u'fcoe-config'), ('pybind.slxos.v16r_1_00b.rbridge_id.fcoe_config', u'fcoe-enode-fabric-map'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.cid_card', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.cid_card', u'alert'), ('pybind.slxos.v16r_1_00b.rbridge_id', u'interface-nodespecific'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor', u'buffer'), ('pybind.slxos.v16r_1_00b.rbridge_id.ipv6.ipv6route', u'route'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.MM', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.fan', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id', u'chassis'), ('pybind.slxos.v16r_1_00b.rbridge_id.system_monitor.SFM', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag', u'counter'), ('pybind.slxos.v16r_1_00b.rbridge_id.fabric.login_policy', u'duplicatewwn'), ('pybind.nos.v7_0_1a.rbridge_id.maps', u'rule'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.receive', u'access-group'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor', u'evpn-neighbor-ipv6'), ('pybind.nos.v7_0_1a.rbridge_id.hardware_profile.kap', u'predefined'), ('pybind.nos.v7_0_1a.rbridge_id.host_table', u'aging-time'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast', u'default-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.ag', u'timeout'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.LineCard', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.qos', u'tx-queue'), ('pybind.nos.v7_0_1a.rbridge_id.ip.static_ag_ip_config', u'anycast-gateway-mac'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.import_', u'routes'), ('pybind.nos.v7_0_1a.rbridge_id.fcsp.auth', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder', u'af-ipv6-neighbor-peergroup'), ('pybind.nos.v7_0_1a.diag.post', u'rbridge-id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor', u'memory'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder', u'pim'), ('pybind.nos.v7_0_1a.rbridge_id.fabric.route', u'mcast'), ('pybind.nos.v7_0_1a.rbridge_id', u'clock'), ('pybind.nos.v7_0_1a.rbridge_id.ip.dhcp.relay', u'information'), ('pybind.nos.v7_0_1a.rbridge_id.host_table', u'aging-mode'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.cid_card', u'alert'), ('pybind.nos.v7_0_1a.rbridge_id', u'default-config'), ('pybind.nos.v7_0_1a.rbridge_id.maps', u'enable'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.fan', u'alert'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.nos.v7_0_1a.rbridge_id', u'root'), ('pybind.nos.v7_0_1a.rbridge_id', u'ag'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder', u'af-ipv6-neighbor-address'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'dampening'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy', u'policies'), ('pybind.nos.v7_0_1a.rbridge_id', u'evpn-instance'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor', u'evpn-peer-group'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_candidate', u'rp-cand-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_candidate', u'rp-cand-grp-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes', u'distance'), ('pybind.nos.v7_0_1a.rbridge_id.maps', u'relay'), ('pybind.nos.v7_0_1a.rbridge_id.router', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy', u'policies'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'aggregate-address'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_0_1a.preprovision', u'rbridge-id'), ('pybind.nos.v7_0_1a.rbridge_id.telnet.server.telnet_vrf_cont', u'use-vrf'), ('pybind.nos.v7_0_1a.rbridge_id', u'fcoe-config'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes', u'cluster-id'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.cid_card', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route', u'static-route-nh-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.fan', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.nos.v7_0_1a.rbridge_id.bp_rate_limit.heavy', u'module'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server', u'v3host'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder.dampening', u'values'), ('pybind.nos.v7_0_1a.rbridge_id.protocol', u'hide-vrrp-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s', u'neighbor-ipv6-addr'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'af-common-cmds-holder'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.sfp', u'alert'), ('pybind.nos.v7_0_1a.rbridge_id', u'chassis'), ('pybind.nos.v7_0_1a.rbridge_id.interface', u've'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route', u'static-route-oif'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'af-common-cmds-holder'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.temp', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn', u'evpn'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes', u'confederation'), ('pybind.nos.v7_0_1a.rbridge_id.fabric', u'ecmp'), ('pybind.nos.v7_0_1a.rbridge_id', u'route-map'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.compact_flash', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.bp_rate_limit', u'queue'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route', u'link-local-static-route-nh'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'graceful-restart'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.retain', u'route-target'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor', u'evpn-neighbor-ipv4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_0_1a.rbridge_id.ag', u'counter'), ('pybind.nos.v7_0_1a.rbridge_id.ip.community_list', u'standard'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'aggregate-ipv6-address'), ('pybind.nos.v7_0_1a.rbridge_id.hardware_profile.vlan_classification', u'predefined'), ('pybind.nos.v7_0_1a.rbridge_id.maps', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.bsr_candidate', u'bsr-cand-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'table-map'), ('pybind.nos.v7_0_1a.rbridge_id', u'bfd-session-setup-delay'), ('pybind.nos.v7_0_1a.rbridge_id', u'fabric'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder.dampening', u'values'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6', u'proto-vrrpv3'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id.ip.community_list', u'extended'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder', u'af-ipv4-neighbor-address'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.MM', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.maps', u'logicalgroup'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.hardware_profile.route_table.predefined', u'routing_parameter'), ('pybind.nos.v7_0_1a.rbridge_id.ssh.server.ssh_vrf_cont', u'use-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.ip', u'extcommunity-list'), ('pybind.nos.v7_0_1a.rbridge_id', u'system-max'), ('pybind.nos.v7_0_1a.rbridge_id.crypto', u'key'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.vcs', u'auto-shut'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp', u'router-bgp-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.ip', u'prefix-list'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor', u'sfp'), ('pybind.nos.v7_0_1a.rbridge_id.fabric.login_policy', u'duplicatewwn'), ('pybind.nos.v7_0_1a.rbridge_id', u'vrrp'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'table-map'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route', u'static-route-nh'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.ipv6route', u'route'), ('pybind.nos.v7_0_1a.rbridge_id.http', u'server'), ('pybind.nos.v7_0_1a.rbridge_id.telnet', u'server'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.power', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor', u'cpu'), ('pybind.nos.v7_0_1a.rbridge_id', u'system-mode'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'dampening'), ('pybind.nos.v7_0_1a.rbridge_id.fcsp.auth', u'proto'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast', u'af-ipv6-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.spanning_tree', u'ieee-bpdu'), ('pybind.nos.v7_0_1a.rbridge_id.ssh.server', u'standby'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server', u'three-tuple-if'), ('pybind.nos.v7_0_1a.rbridge_id.ip', u'rtm-config'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor', u'security'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_0_1a.rbridge_id.fcoe_config', u'fcoe-enode-fabric-map'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.LineCard', u'alert'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route', u'static-route-nh'), ('pybind.nos.v7_0_1a.rbridge_id.hardware_profile.tcam', u'predefined'), ('pybind.nos.v7_0_1a.fabric.route.mcast', u'rbridge-id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn', u'graceful-restart'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'static-network'), ('pybind.nos.v7_0_1a.rbridge_id.event_handler.activate', u'name'), ('pybind.nos.v7_0_1a.rbridge_id.qos.rcv_queue', u'multicast'), ('pybind.nos.v7_0_1a.rbridge_id', u'switch-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.power', u'alert'), ('pybind.nos.v7_0_1a.rbridge_id.crypto', u'ca'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast', u'default-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.openflow', u'logical-instance'), ('pybind.nos.v7_0_1a.rbridge_id.qos', u'rcv-queue'), ('pybind.nos.v7_0_1a.rbridge_id.hardware_profile.route_table', u'predefined'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_0_1a.rbridge_id.ag.nport_menu.nport_interface', u'nport'), ('pybind.nos.v7_0_1a.rbridge_id.ssh', u'server'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route', u'static-route-nh-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.telnet.server', u'standby'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips', u'neighbor-addr'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast', u'af-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6', u'prefix-list'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps', u'neighbor-peer-grp'), ('pybind.nos.v7_0_1a.rbridge_id.ssh.server', u'key'), ('pybind.nos.v7_0_1a.rbridge_id.http.server.http_vrf_cont', u'use-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.hardware_profile.kap', u'customized'), ('pybind.nos.v7_0_1a.rbridge_id.ip.receive', u'access-group'), ('pybind.nos.v7_0_1a.rbridge_id', u'vrrp-rbridge-global'), ('pybind.nos.v7_0_1a.rbridge_id', u'filter-change-update-delay'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.chassis', u'oper-address'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes', u'capability'), ('pybind.nos.v7_0_1a.rbridge_id.ip.import_', u'routes'), ('pybind.nos.v7_0_1a.rbridge_id.global_lc_holder.linecard', u'linecards'), ('pybind.nos.v7_0_1a.rbridge_id', u'arp-entry'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route', u'static-route-oif'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'multipath'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder', u'af-ipv4-neighbor-peergroup'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static.bfd', u'bfd-static-route'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'maximum-paths'), ('pybind.nos.v7_0_1a.rbridge_id.ssh', u'client'), ('pybind.nos.v7_0_1a.system.switch_attributes', u'rbridge-id'), ('pybind.nos.v7_0_1a.rbridge_id.system_monitor.SFM', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'graceful-restart'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'multipath'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.ipv6_global_cmds.nd_global', u'dad'), ('pybind.nos.v7_0_1a.rbridge_id.ag', u'pg'), ('pybind.nos.v7_0_1a.rbridge_id.ip.as_path', u'access-list'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_0_1a.rbridge_id.maps.email', u'email-list'), ('pybind.nos.v7_0_1a.rbridge_id', u'logical-chassis'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server', u'user'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'maximum-paths'), ('pybind.nos.v7_0_1a.rbridge_id.interface', u'loopback'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.fabric', u'port-channel'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.static_ag_ipv6_config', u'anycast-gateway-mac'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server', u'engineid'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route', u'static-route-oif-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim', u'rp-address'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server', u'offline-if'), ('pybind.nos.v7_0_1a.rbridge_id', u'interface-nodespecific'), ('pybind.nos.v7_1_0.rbridge_id.hardware_profile.route_table.predefined', u'routing_parameter'), ('pybind.nos.v7_1_0.rbridge_id.event_handler.activate', u'name'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor', u'evpn-neighbor-ipv4'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'distance'), ('pybind.nos.v7_1_0.rbridge_id', u'switch-attributes'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route', u'static-route-nh'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'maximum-paths'), ('pybind.nos.v7_1_0.rbridge_id.ip.as_path', u'access-list'), ('pybind.nos.v7_1_0.rbridge_id', u'vrrp'), ('pybind.nos.v7_1_0.rbridge_id.maps', u'rule'), ('pybind.nos.v7_1_0.rbridge_id', u'root'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server', u'user'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_1_0.rbridge_id.ssh', u'client'), ('pybind.nos.v7_1_0.rbridge_id.ag.nport_menu.nport_interface', u'nport'), ('pybind.nos.v7_1_0.rbridge_id.maps', u'policy'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'cluster-id'), ('pybind.nos.v7_1_0.rbridge_id.telnet.server.telnet_vrf_cont', u'use-vrf'), ('pybind.nos.v7_1_0.rbridge_id.interface', u've'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'multipath'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_1_0.preprovision', u'rbridge-id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder', u'af-ipv6-neighbor-peergroup'), ('pybind.nos.v7_1_0.rbridge_id.global_lc_holder.linecard', u'linecards'), ('pybind.nos.v7_1_0.rbridge_id.maps', u'relay'), ('pybind.nos.v7_1_0.rbridge_id.ip.static_ag_ip_config', u'anycast-gateway-mac'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_1_0.rbridge_id.ssh', u'server'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_1_0.rbridge_id.ag', u'counter'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route', u'static-route-nh'), ('pybind.nos.v7_1_0.rbridge_id.http.server.http_vrf_cont', u'use-vrf'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.fcoe_config', u'fcoe-enode-fabric-map'), ('pybind.nos.v7_1_0.rbridge_id.maps', u'logicalgroup'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface', u'policy'), ('pybind.nos.v7_1_0.rbridge_id.ip.community_list', u'standard'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder', u'af-ipv4-neighbor-address'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server', u'v3host'), ('pybind.nos.v7_1_0.rbridge_id.fabric.login_policy', u'duplicatewwn'), ('pybind.nos.v7_1_0.rbridge_id.crypto', u'key'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips', u'neighbor-addr'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', u'dhcpd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'network'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy', u'policies'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'dampening'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.temp', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route', u'static-route-nh-vrf'), ('pybind.nos.v7_1_0.rbridge_id.ip.community_list', u'extended'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security', u'policy'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.receive', u'access-group'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id', u'fcoe-config'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'table-map'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor', u'memory'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder', u'af-ipv4-neighbor-peergroup'), ('pybind.nos.v7_1_0.rbridge_id', u'ag'), ('pybind.nos.v7_1_0.rbridge_id.host_table', u'aging-time'), ('pybind.nos.v7_1_0.rbridge_id.fcsp.auth', u'proto'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor', u'evpn-peer-group'), ('pybind.nos.v7_1_0.rbridge_id.crypto', u'ca'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.MM', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.ip.receive', u'access-group'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'af-common-cmds-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn', u'graceful-restart'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.fan', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id', u'bfd-session-setup-delay'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'network'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'graceful-restart'), ('pybind.nos.v7_1_0.rbridge_id.ssh.server', u'standby'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.cid_card', u'alert'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast', u'default-vrf'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server', u'engineid'), ('pybind.nos.v7_1_0.rbridge_id', u'interface-nodespecific'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.qos', u'tx-queue'), ('pybind.nos.v7_1_0.rbridge_id.hardware_profile.kap', u'predefined'), ('pybind.nos.v7_1_0.rbridge_id.ipv6', u'proto-vrrpv3'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.LineCard', u'alert'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route', u'static-route-oif'), ('pybind.nos.v7_1_0.rbridge_id.hardware_profile.tcam', u'predefined'), ('pybind.nos.v7_1_0.rbridge_id.bp_rate_limit.heavy', u'module'), ('pybind.nos.v7_1_0.rbridge_id', u'route-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_1_0.rbridge_id.resource_monitor', u'cpu'), ('pybind.nos.v7_1_0.rbridge_id.router', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.nos.v7_1_0.rbridge_id.ip.import_', u'routes'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor', u'cpu'), ('pybind.nos.v7_1_0.rbridge_id.bp_rate_limit', u'queue'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast', u'af-vrf'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.import_', u'routes'), ('pybind.nos.v7_1_0.rbridge_id', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'maximum-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'aggregate-address'), ('pybind.nos.v7_1_0.rbridge_id.ag', u'pg'), ('pybind.nos.v7_1_0.rbridge_id', u'default-config'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast', u'af-ipv6-vrf'), ('pybind.nos.v7_1_0.rbridge_id.host_table', u'aging-mode'), ('pybind.nos.v7_1_0.rbridge_id', u'system-max'), ('pybind.nos.v7_1_0.rbridge_id', u'fabric'), ('pybind.nos.v7_1_0.rbridge_id.telnet.server', u'standby'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.cid_card', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.ipv6_global_cmds.nd_global', u'dad'), ('pybind.nos.v7_1_0.fabric.route.mcast', u'rbridge-id'), ('pybind.nos.v7_1_0.rbridge_id.openflow', u'logical-instance'), ('pybind.nos.v7_1_0.rbridge_id.fabric', u'ecmp'), ('pybind.nos.v7_1_0.rbridge_id.ssh.server.ssh_vrf_cont', u'use-vrf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.nos.v7_1_0.rbridge_id.maps.email', u'email-list'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route', u'link-local-static-route-nh'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static.bfd', u'bfd-static-route'), ('pybind.nos.v7_1_0.rbridge_id.telnet', u'server'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'listen-range'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.LineCard', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp', u'policy'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_candidate', u'rp-cand-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.maxas_limit', u'in'), ('pybind.nos.v7_1_0.rbridge_id', u'evpn-instance'), ('pybind.nos.v7_1_0.rbridge_id.ip', u'prefix-list'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder.dampening', u'values'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.fan', u'alert'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.compact_flash', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.hardware_profile.kap', u'customized'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'aggregate-ipv6-address'), ('pybind.nos.v7_1_0.diag.post', u'rbridge-id'), ('pybind.nos.v7_1_0.rbridge_id.ssh.server', u'key'), ('pybind.nos.v7_1_0.rbridge_id.vcs', u'auto-shut'), ('pybind.nos.v7_1_0.rbridge_id.ipv6', u'prefix-list'), ('pybind.nos.v7_1_0.rbridge_id.maps', u'enable'), ('pybind.nos.v7_1_0.rbridge_id.ip', u'rtm-config'), ('pybind.nos.v7_1_0.rbridge_id', u'logical-chassis'), ('pybind.nos.v7_1_0.rbridge_id.fabric', u'port-channel'), ('pybind.nos.v7_1_0.rbridge_id.fcsp.auth', u'policy'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s', u'neighbor-ipv6-addr'), ('pybind.nos.v7_1_0.rbridge_id.interface', u'loopback'), ('pybind.nos.v7_1_0.rbridge_id.hardware_profile.route_table', u'predefined'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'multipath'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'af-common-cmds-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn', u'evpn'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'capability'), ('pybind.nos.v7_1_0.rbridge_id.ip.dhcp.relay', u'information'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor', u'evpn-neighbor-ipv6'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_1_0.rbridge_id.spanning_tree', u'ieee-bpdu'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.sfp', u'alert'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'dampening'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp', u'router-bgp-attributes'), ('pybind.nos.v7_1_0.rbridge_id', u'arp-entry'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.static_ag_ipv6_config', u'anycast-gateway-mac'), ('pybind.nos.v7_1_0.rbridge_id.qos', u'rcv-queue'), ('pybind.nos.v7_1_0.rbridge_id.qos.rcv_queue', u'multicast'), ('pybind.nos.v7_1_0.rbridge_id', u'system-mode'), ('pybind.nos.v7_1_0.rbridge_id', u'chassis'), ('pybind.nos.v7_1_0.rbridge_id.http', u'server'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server', u'three-tuple-if'), ('pybind.nos.v7_1_0.rbridge_id.hardware_profile.vlan_classification', u'predefined'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.ipv6route', u'route'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.SFM', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id', u'filter-change-update-delay'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder.dampening', u'values'), ('pybind.nos.v7_1_0.rbridge_id.protocol', u'hide-vrrp-holder'), ('pybind.nos.v7_1_0.rbridge_id', u'clock'), ('pybind.nos.v7_1_0.rbridge_id', u'vrrp-rbridge-global'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_candidate', u'rp-cand-grp-prefix'), ('pybind.nos.v7_1_0.rbridge_id.resource_monitor.process', u'memory'), ('pybind.nos.v7_1_0.rbridge_id.ip', u'extcommunity-list'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'graceful-restart'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor', u'sfp'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.power', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route', u'static-route-oif-vrf'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder', u'pim'), ('pybind.nos.v7_1_0.rbridge_id.resource_monitor', u'memory'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'table-map'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim', u'rp-address'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route', u'static-route-nh-vrf'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.bsr_candidate', u'bsr-cand-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.retain', u'route-target'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder', u'af-ipv6-neighbor-address'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast', u'default-vrf'), ('pybind.nos.v7_1_0.rbridge_id.fabric.route', u'mcast'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route', u'static-route-oif'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'static-network'), ('pybind.nos.v7_1_0.rbridge_id.system_monitor.power', u'alert'), ('pybind.nos.v7_1_0.rbridge_id.ag', u'timeout'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps', u'neighbor-peer-grp'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server', u'offline-if'), ('pybind.nos.v7_1_0.system.switch_attributes', u'rbridge-id'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy', u'policies'), ('pybind.nos.v7_1_0.rbridge_id.chassis', u'oper-address'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor', u'security'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes', u'confederation'), ('pybind.nos.v6_0_2b.rbridge_id.global_lc_holder.linecard', u'linecards'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'table-map'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.hardware_profile.tcam', u'predefined'), ('pybind.nos.v6_0_2b.rbridge_id.vcs', u'auto-shut'), ('pybind.nos.v6_0_2b.rbridge_id.ip', u'prefix-list'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes', u'cluster-id'), ('pybind.nos.v6_0_2b.rbridge_id.ip.as_path', u'access-list'), ('pybind.nos.v6_0_2b.rbridge_id.hardware_profile.route_table.predefined', u'routing_parameter'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route', u'static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.fabric.login_policy', u'duplicatewwn'), ('pybind.nos.v6_0_2b.rbridge_id.telnet.server.telnet_vrf_cont', u'use-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.cid_card', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.ip.import_', u'routes'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s', u'neighbor-ipv6-addr'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder', u'af-ipv6-neighbor-peergroup'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route', u'static-route-oif'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.ipv6route', u'route'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder', u'af-ipv4-neighbor-peergroup'), ('pybind.nos.v6_0_2b.rbridge_id.interface', u've'), ('pybind.nos.v6_0_2b.rbridge_id.ag.nport_menu.nport_interface', u'nport'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast', u'af-ipv6-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.fabric', u'ecmp'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy', u'policies'), ('pybind.nos.v6_0_2b.rbridge_id.maps', u'relay'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp', u'router-bgp-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.fabric', u'port-channel'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder', u'af-ipv4-neighbor-address'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'af-common-cmds-holder'), ('pybind.nos.v6_0_2b.rbridge_id.ssh', u'server'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v6_0_2b.rbridge_id', u'route-map'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.temp', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.receive', u'access-group'), ('pybind.nos.v6_0_2b.rbridge_id.crypto', u'ca'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor', u'memory'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.LineCard', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id', u'vrrp-rbridge-global'), ('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_candidate', u'rp-cand-interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps', u'neighbor-peer-grp'), ('pybind.nos.v6_0_2b.rbridge_id', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.ip.community_list', u'extended'), ('pybind.nos.v6_0_2b.rbridge_id.ag', u'pg'), ('pybind.nos.v6_0_2b.rbridge_id', u'arp-entry'), ('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim', u'rp-address'), ('pybind.nos.v6_0_2b.rbridge_id.ag', u'timeout'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route', u'static-route-nh'), ('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_candidate', u'rp-cand-grp-prefix'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id', u'clock'), ('pybind.nos.v6_0_2b.rbridge_id', u'vrrp'), ('pybind.nos.v6_0_2b.rbridge_id', u'switch-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.hardware_profile.route_table', u'predefined'), ('pybind.nos.v6_0_2b.rbridge_id.interface', u'loopback'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route', u'static-route-oif'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor', u'cpu'), ('pybind.nos.v6_0_2b.rbridge_id.openflow', u'logical-instance'), ('pybind.nos.v6_0_2b.rbridge_id.hardware_profile.vlan_classification', u'predefined'), ('pybind.nos.v6_0_2b.rbridge_id.hardware_profile.kap', u'predefined'), ('pybind.nos.v6_0_2b.rbridge_id.bp_rate_limit.heavy', u'module'), ('pybind.nos.v6_0_2b.diag.post', u'rbridge-id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'dampening'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.ipv6_global_cmds.nd_global', u'dad'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route', u'static-route-oif-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast', u'af-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.compact_flash', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id', u'root'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'maximum-paths'), ('pybind.nos.v6_0_2b.rbridge_id.ip.receive', u'access-group'), ('pybind.nos.v6_0_2b.rbridge_id.crypto', u'key'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.nos.v6_0_2b.rbridge_id.ip', u'rtm-config'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes', u'confederation'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v6_0_2b.rbridge_id.maps', u'enable'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder.dampening', u'values'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'multipath'), ('pybind.nos.v6_0_2b.rbridge_id.qos', u'rcv-queue'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'graceful-restart'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes', u'capability'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route', u'static-route-nh'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'aggregate-address'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'maximum-paths'), ('pybind.nos.v6_0_2b.rbridge_id', u'interface-nodespecific'), ('pybind.nos.v6_0_2b.rbridge_id.snmp_server', u'user'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'network'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.power', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.snmp_server', u'offline-if'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes', u'bfd'), ('pybind.nos.v6_0_2b.fabric.route.mcast', u'rbridge-id'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.MM', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6', u'proto-vrrpv3'), ('pybind.nos.v6_0_2b.rbridge_id.ssh.server', u'key'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'multipath'), ('pybind.nos.v6_0_2b.rbridge_id.fabric.route', u'mcast'), ('pybind.nos.v6_0_2b.rbridge_id', u'ag'), ('pybind.nos.v6_0_2b.rbridge_id.spanning_tree', u'ieee-bpdu'), ('pybind.nos.v6_0_2b.rbridge_id.hardware_profile.kap', u'customized'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder', u'pim'), ('pybind.nos.v6_0_2b.rbridge_id.fcsp.auth', u'proto'), ('pybind.nos.v6_0_2b.rbridge_id', u'system-max'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route', u'link-local-static-route-nh'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'table-map'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.cid_card', u'alert'), ('pybind.nos.v6_0_2b.rbridge_id.ssh', u'client'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast', u'default-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'static-network'), ('pybind.nos.v6_0_2b.rbridge_id.protocol', u'hide-vrrp-holder'), ('pybind.nos.v6_0_2b.rbridge_id.ip.dhcp.relay', u'information'), ('pybind.nos.v6_0_2b.rbridge_id.ip', u'extcommunity-list'), ('pybind.nos.v6_0_2b.rbridge_id.chassis', u'oper-address'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'aggregate-ipv6-address'), ('pybind.nos.v6_0_2b.rbridge_id.qos', u'tx-queue'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder', u'af-ipv6-neighbor-address'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy', u'policies'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf', u'network'), ('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.bsr_candidate', u'bsr-cand-interface'), ('pybind.nos.v6_0_2b.rbridge_id', u'fcoe-config'), ('pybind.nos.v6_0_2b.rbridge_id.event_handler.activate', u'name'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static.bfd', u'bfd-static-route'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.fan', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.fcsp.auth', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id.fcoe_config', u'fcoe-enode-fabric-map'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.fan', u'alert'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.nos.v6_0_2b.rbridge_id', u'default-config'), ('pybind.nos.v6_0_2b.rbridge_id', u'filter-change-update-delay'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.power', u'alert'), ('pybind.nos.v6_0_2b.rbridge_id', u'logical-chassis'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6', u'prefix-list'), ('pybind.nos.v6_0_2b.rbridge_id.ssh.server.ssh_vrf_cont', u'use-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.router', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.snmp_server', u'three-tuple-if'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.LineCard', u'alert'), ('pybind.nos.v6_0_2b.rbridge_id.ssh.server', u'standby'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor', u'sfp'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.import_', u'routes'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder.dampening', u'values'), ('pybind.nos.v6_0_2b.rbridge_id.snmp_server', u'engineid'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.SFM', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'af-common-cmds-holder'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route', u'static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor', u'security'), ('pybind.nos.v6_0_2b.rbridge_id', u'chassis'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.http', u'server'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes', u'distance'), ('pybind.nos.v6_0_2b.preprovision', u'rbridge-id'), ('pybind.nos.v6_0_2b.system.switch_attributes', u'rbridge-id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast', u'default-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips', u'neighbor-addr'), ('pybind.nos.v6_0_2b.rbridge_id.snmp_server', u'v3host'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id.system_monitor.sfp', u'alert'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_common_cmds_holder', u'graceful-restart'), ('pybind.nos.v6_0_2b.rbridge_id.qos.rcv_queue', u'multicast'), ('pybind.nos.v6_0_2b.rbridge_id.ip.community_list', u'standard'), ('pybind.nos.v6_0_2b.rbridge_id.telnet', u'server'), ('pybind.nos.v6_0_2b.rbridge_id.telnet.server', u'standby'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v6_0_2b.rbridge_id.ag', u'counter'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_common_cmds_holder', u'dampening'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v6_0_2b.rbridge_id.maps.email', u'email-list')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ag_nport_interface_fiberchannel_get(self, rbridge_id=None, nport=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type nport: agNPortNb
    :param nport: Keyword argument tuple.

    :type agNPortNb: unicode
    :param agNPortNb: **nport** tuple argument.

        * length restriction: ::

            ['1..250']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag.nport_menu.nport_interface.nport', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'nport', 'keyval': 'agNPortNb', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, nport=nport)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ag_pg_get(self, rbridge_id=None, pg=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type pg: pgid
    :param pg: Keyword argument tuple.

    :type pgid: long
    :param pgid: **pg** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ag.pg', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ag.pg', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ag.pg', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ag.pg', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'pg', 'keyval': 'pgid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, pg=pg)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_arp_get(self, rbridge_id=None, arp_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type arp_entry: arp_ip_address, mac_address_value, interfacename, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve
    :param arp_entry: Keyword argument tuple.

    :type arp_ip_address: unicode
    :param arp_ip_address: **arp_entry** tuple argument:  A.B.C.D;; IP address of the ARP entry

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mac_address_value: unicode
    :param mac_address_value: **arp_entry** tuple argument.

    :type interfacename: unicode
    :param interfacename: **arp_entry** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type GigabitEthernet: unicode
    :param GigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type TenGigabitEthernet: unicode
    :param TenGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type FortyGigabitEthernet: unicode
    :param FortyGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type HundredGigabitEthernet: unicode
    :param HundredGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type Ve: long
    :param Ve: **arp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.arp_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.arp_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.arp_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Port_channel, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, arp_entry=arp_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_bp_rate_limit_queue_get(self, rbridge_id=None, queue=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type queue: queue_id
    :param queue: Keyword argument tuple.

    :type queue_id: long
    :param queue_id: **queue** tuple argument:  BP queue number (only queue 0 is supported)

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.bp_rate_limit.queue', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.bp_rate_limit.queue', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'queue', 'keyval': 'queue_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, queue=queue)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_crypto_ca_get(self, rbridge_id=None, ca=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ca: trustpoint
    :param ca: Keyword argument tuple.

    :type trustpoint: unicode
    :param trustpoint: **ca** tuple argument:  Trustpoint name

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.crypto.ca', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.crypto.ca', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.crypto.ca', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ca', 'keyval': 'trustpoint', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ca=ca)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_crypto_key_get(self, rbridge_id=None, key=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type key: label, type, modulus
    :param key: Keyword argument tuple.

    :type label: unicode
    :param label: **key** tuple argument:  Key Label

        * length restriction: ::

            ['1..64']

    :type type: unicode
    :param type: **key** tuple argument:  Key Type

        * enumeration restriction: ::

            ['dsa', 'rsa', 'ecdsa']

    :type modulus: long
    :param modulus: **key** tuple argument:  Key Size

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.crypto.key', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.crypto.key', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.crypto.key', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'key', 'keyval': 'label', 'extra_keyval': 'label, type, modulus'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, key=key)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_event_handler_activate_get(self, rbridge_id=None, name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type name: name
    :param name: Keyword argument tuple.

    :type name: unicode
    :param name: **name** tuple argument:  Event handler name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.event_handler.activate.name', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.event_handler.activate.name', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.event_handler.activate.name', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.event_handler.activate.name', u'trigger-function'), ('pybind.nos.v7_0_1a.rbridge_id.event_handler.activate.name', u'trigger-function-container'), ('pybind.nos.v6_0_2b.rbridge_id.event_handler.activate.name', u'trigger-function-container')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'name', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, name=name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_get(self, rbridge_id=None, evpn_instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target', u'both'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni', u'evpn-vni'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni', u'vni-add'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target', u'export'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'route-distinguisher'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'duplicate-mac-timer'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target', u'import'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni', u'vni-add'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target', u'both'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target', u'import'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'duplicate-mac-timer'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni', u'evpn-vni'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target', u'export'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'route-distinguisher')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'evpn_instance', 'keyval': 'instance_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_route_target_both_get(self, rbridge_id=None, evpn_instance=None, both=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type both: target_community
    :param both: Keyword argument tuple.

    :type target_community: unicode
    :param target_community: **both** tuple argument:  auto;; Target VPN Extended Community

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target.both', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target.both', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'both', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, both=both)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_route_target_export_get(self, rbridge_id=None, evpn_instance=None, export=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type export: target_community
    :param export: Keyword argument tuple.

    :type target_community: unicode
    :param target_community: **export** tuple argument:  auto;; Target VPN Extended Community

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target.export', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target.export', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'export', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, export=export)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_route_target_import_get(self, rbridge_id=None, evpn_instance=None, import_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type import_: target_community
    :param import_: Keyword argument tuple.

    :type target_community: unicode
    :param target_community: **import_** tuple argument:  auto ;; Target VPN Extended Community

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.route_target.import_', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.route_target.import_', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'import_', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, import_=import_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_get(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    **Instance Keyword Argument Tuple**:

    :type evpn_vni: vni_number
    :param evpn_vni: Keyword argument tuple.

    :type vni_number: long
    :param vni_number: **evpn_vni** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target', u'import'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target', u'both'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target', u'export'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target', u'export'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target', u'both'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target', u'import')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'evpn_vni', 'keyval': 'vni_number', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_route_target_both_get(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, both=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type evpn_vni: vni_number
    :param evpn_vni: Keyword argument tuple.

    :type vni_number: long
    :param vni_number: **evpn_vni** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type both: target_community
    :param both: Keyword argument tuple.

    :type target_community: unicode
    :param target_community: **both** tuple argument:  ASN:nn;; Target VPN Extended Community

        * pattern restriction: ::

            '(((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9'
            ']{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-'
            '5])):(([0-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1]['
            '0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4'
            '294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0'
            '-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-'
            '8][0-9])|(429496729[0-5])))|((([1-9][0-9]{0,8})|'
            '(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9'
            ']{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|('
            '429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(429'
            '49672[0-8][0-9])):(([1-9][0-9]{0,3})|([1-5][0-9]'
            '{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2'
            '][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9'
            ']{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1'
            '[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9]['
            '0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9'
            ']{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4'
            '][0-9]{2})|(655[0-2][0-9])|(6553[0-5]))))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target.both', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target.both', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'both', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni, both=both)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_route_target_export_get(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, export=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type evpn_vni: vni_number
    :param evpn_vni: Keyword argument tuple.

    :type vni_number: long
    :param vni_number: **evpn_vni** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type export: target_community
    :param export: Keyword argument tuple.

    :type target_community: unicode
    :param target_community: **export** tuple argument:  ASN:nn;; Target VPN Extended Community

        * pattern restriction: ::

            '(((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9'
            ']{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-'
            '5])):(([0-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1]['
            '0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4'
            '294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0'
            '-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-'
            '8][0-9])|(429496729[0-5])))|((([1-9][0-9]{0,8})|'
            '(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9'
            ']{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|('
            '429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(429'
            '49672[0-8][0-9])):(([1-9][0-9]{0,3})|([1-5][0-9]'
            '{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2'
            '][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9'
            ']{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1'
            '[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9]['
            '0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9'
            ']{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4'
            '][0-9]{2})|(655[0-2][0-9])|(6553[0-5]))))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target.export', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target.export', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'export', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni, export=export)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_evpn_instance_vni_route_target_import_get(self, rbridge_id=None, evpn_instance=None, evpn_vni=None, import_=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type evpn_instance: instance_name
    :param evpn_instance: Keyword argument tuple.

    :type instance_name: unicode
    :param instance_name: **evpn_instance** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type evpn_vni: vni_number
    :param evpn_vni: Keyword argument tuple.

    :type vni_number: long
    :param vni_number: **evpn_vni** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type import_: target_community
    :param import_: Keyword argument tuple.

    :type target_community: unicode
    :param target_community: **import_** tuple argument:  ASN:nn;; Target VPN Extended Community

        * pattern restriction: ::

            '(((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4][0-9'
            ']{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(6553[0-'
            '5])):(([0-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1]['
            '0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4'
            '294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|(429496[0'
            '-6][0-9]{3})|(4294967[0-1][0-9]{2})|(42949672[0-'
            '8][0-9])|(429496729[0-5])))|((([1-9][0-9]{0,8})|'
            '(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9'
            ']{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|('
            '429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(429'
            '49672[0-8][0-9])):(([1-9][0-9]{0,3})|([1-5][0-9]'
            '{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2'
            '][0-9])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9'
            ']{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1'
            '[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9]['
            '0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9'
            ']{0,3})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4'
            '][0-9]{2})|(655[0-2][0-9])|(6553[0-5]))))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance', u'evpn_instance'), ('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni', u'evpn_vni')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.evpn_instance.vni.evpn_vni.route_target.import_', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.evpn_instance.vni.evpn_vni.route_target.import_', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_name', 'extra_keyval': ''}, {'keyval': 'vni_number', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'import_', 'keyval': 'target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_instance=evpn_instance, evpn_vni=evpn_vni, import_=import_)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_fabric_port_channel_get(self, rbridge_id=None, port_channel=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type port_channel: po_id
    :param port_channel: Keyword argument tuple.

    :type po_id: long
    :param po_id: **port_channel** tuple argument:  Port-channel id

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.fabric.port_channel', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.fabric.port_channel', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.fabric.port_channel', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.fabric.port_channel', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_channel', 'keyval': 'po_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, port_channel=port_channel)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_fcoe_fabric_map_get(self, rbridge_id=None, fcoe_enode_fabric_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type fcoe_enode_fabric_map: fcoe_enode_fabric_map_name
    :param fcoe_enode_fabric_map: Keyword argument tuple.

    :type fcoe_enode_fabric_map_name: unicode
    :param fcoe_enode_fabric_map_name: **fcoe_enode_fabric_map** tuple argument:  Configure an FCoE Fabric-map 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            'default'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.fcoe_config.fcoe_enode_fabric_map', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'fcoe_enode_fabric_map', 'keyval': 'fcoe_enode_fabric_map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, fcoe_enode_fabric_map=fcoe_enode_fabric_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_filter_change_update_delay_get(self, rbridge_id=None, filter_change_update_delay=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type filter_change_update_delay: filter_delay_value
    :param filter_change_update_delay: Keyword argument tuple.

    :type filter_delay_value: long
    :param filter_delay_value: **filter_change_update_delay** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.filter_change_update_delay', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.filter_change_update_delay', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.filter_change_update_delay', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'filter_change_update_delay', 'keyval': 'filter_delay_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, filter_change_update_delay=filter_change_update_delay)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_http_server_use_vrf_get(self, rbridge_id=None, use_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type use_vrf: use_vrf_name, http_vrf_shutdown
    :param use_vrf: Keyword argument tuple.

    :type use_vrf_name: unicode
    :param use_vrf_name: **use_vrf** tuple argument.

        * length restriction: ::

            ['0..max']

    :type http_vrf_shutdown: YANGBool
    :param http_vrf_shutdown: **use_vrf** tuple argument:  Shutdown HTTP/HTTPS server on the given vrf

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.http.server.http_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, secure_and_plain, http_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, use_vrf=use_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_loopback_get(self, rbridge_id=None, loopback=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.pim_intf_lo_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', u'intf-loopback'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.snmp', u'trap'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.pim_intf_lo_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.pim_intf_lo_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', u'intf-loopback'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.snmp', u'trap'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', u'intf-loopback'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.snmp', u'trap'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.interface_loopback_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.ipv6_config.address', u'link-local-config')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'loopback', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, loopback=loopback)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_loopback_ip_address_get(self, rbridge_id=None, loopback=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type address: address
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/32'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, loopback=loopback, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_loopback_ipv6_address_get(self, rbridge_id=None, loopback=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type loopback: id
    :param loopback: Keyword argument tuple.

    :type id: long
    :param id: **loopback** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, eui64, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type eui64: YANGBool
    :param eui64: **ipv6_address** tuple argument:  Configure ipv6 address with an automatically computed EUI-64 interface Id

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback', u'loopback'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.loopback', u'loopback')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.loopback.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, eui64, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, loopback=loopback, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_get(self, rbridge_id=None, ve=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'ipv6-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.policy', u'route-map'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_config', u'address'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.snmp', u'trap'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip', u'icmp'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u'vrrp'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_config', u'address'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.igmp', u'static-group'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'icmpv6'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'ipv6-ve-intf-cmds'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip', u'igmp'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'vrrpv3'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'vrrpv3e'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'access-group'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.pim_intf_vlan_cont.pim_int_cmd', u'pim'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip', u'ip-local-anycast-gateway'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.pim_intf_vlan_cont', u'pim-int-cmd'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip', u'ip-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u'vrrpe'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6', u'ipv6-local-anycast-gateway'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'icmpv6'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u'vrrp'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip', u'icmp'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.snmp', u'trap'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'ipv6-local-anycast-gateway'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'ipv6-anycast-address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip', u'igmp'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'vrrpv3e'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'ipv6-ve-intf-cmds'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_config', u'arp'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.pim_intf_vlan_cont', u'pim-int-cmd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u'vrrpe'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'ipv6-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.pim_intf_vlan_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip', u'ip-anycast-address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_config', u'address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.igmp', u'static-group'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'access-group'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'vrrpv3'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip', u'ip-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.policy', u'route-map'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip', u'ip-local-anycast-gateway'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'nd'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip', u'igmp'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.pim_intf_vlan_cont.pim_int_cmd.pim', u'multinet'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.nud', u'retry'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'prefix'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_config', u'address'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'vrrpv3e'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip_pbr_interface.ip.policy', u'route-map'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'suppress-ra'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'database-filter'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.policy', u'route-map'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip', u'ip-anycast-address'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp', u'relay'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.snmp', u'trap'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf', u'link-interval-properties'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'ipv6-local-anycast-gateway'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'ipv6-anycast-address'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_config', u'arp'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'ipv6-ve-intf-cmds'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'access-group'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'dad'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay', u'servers'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'md5-authentication'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_config.address', u'ipv6-address'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip', u'ip-local-anycast-gateway'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf.authentication', u'ipsec'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'vrrpv3'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.pim_intf_vlan_cont.pim_int_cmd', u'pim'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u'vrrp'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.igmp', u'static-group'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'ipv6-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ospfv3_conf', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra', u'ipv6-intf-cmds'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_config', u'address'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'cache'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_config.address', u'link-local-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd', u'ra-interval'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds', u'neighbor'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf', u'ospf-interface-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip', u'ip-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.pim_intf_vlan_cont', u'pim-int-cmd'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'icmpv6'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip_acl_interface.ip', u'access-group'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip', u'icmp'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6', u'interface-ospfv3-conf'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_vlan_ospf_conf.ospf_interface_config.md5_authentication', u'no-encrypt-key-table')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u've', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_access_group_get(self, rbridge_id=None, ve=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: ip_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ip_access_list: unicode
    :param ip_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip_acl_interface.ip.access_group', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip_acl_interface.ip.access_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip_acl_interface.ip.access_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ip_access_list, ip_direction', 'extra_keyval': 'ip_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_address_get(self, rbridge_id=None, ve=None, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type address: address, secondary, ospf_passive, ospf_ignore
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type secondary: YANGBool
    :param secondary: **address** tuple argument:  Secondary ip address on the specific interface

    :type ospf_passive: YANGBool
    :param ospf_passive: **address** tuple argument:  ospf pasive address on the specific interface

    :type ospf_ignore: YANGBool
    :param ospf_ignore: **address** tuple argument:  ospf active address on the specific interface

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_config.address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_config.address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_config.address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': 'address, secondary, ospf_passive, ospf_ignore'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_anycast_address_get(self, rbridge_id=None, ve=None, ip_anycast_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ip_anycast_address: ip_address
    :param ip_anycast_address: Keyword argument tuple.

    :type ip_address: unicode
    :param ip_address: **ip_anycast_address** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_anycast_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_anycast_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_anycast_address', 'keyval': 'ip_address', 'extra_keyval': 'ip_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_anycast_address=ip_anycast_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_dhcp_relay_get(self, rbridge_id=None, ve=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  A.B.C.D;; IP address of the DHCP server

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCP server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr, server_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_get(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'load-balancing'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'next-hop'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'load-balancing'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'network'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'network'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'load-balancing'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track', u'interface')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ip_local_anycast_gateway', 'keyval': 'local_ip_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_track_interface_get(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_track_network_get(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type network: network_address
    :param network: Keyword argument tuple.

    :type network_address: unicode
    :param network_address: **network** tuple argument.

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_fabric_virtual_gateway_track_next_hop_get(self, rbridge_id=None, ve=None, ip_local_anycast_gateway=None, next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ip_local_anycast_gateway: local_ip_gw_id
    :param ip_local_anycast_gateway: Keyword argument tuple.

    :type local_ip_gw_id: long
    :param local_ip_gw_id: **ip_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type next_hop: next_hop_address
    :param next_hop: Keyword argument tuple.

    :type next_hop_address: unicode
    :param next_hop_address: **next_hop** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway', u'ip_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.ip_local_anycast_gateway.track.next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ip_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ip_local_anycast_gateway=ip_local_anycast_gateway, next_hop=next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ip_igmp_static_group_get(self, rbridge_id=None, ve=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_group: sg_addr
    :param static_group: Keyword argument tuple.

    :type sg_addr: unicode
    :param sg_addr: **static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ip.igmp.static_group', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ip.igmp.static_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ip.igmp.static_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'sg_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_access_group_get(self, rbridge_id=None, ve=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: ipv6_access_list, ip_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type ipv6_access_list: unicode
    :param ipv6_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type ip_direction: unicode
    :param ip_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.access_group', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.access_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.access_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'ipv6_access_list, ip_direction', 'extra_keyval': 'ipv6_access_list, ip_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_address_get(self, rbridge_id=None, ve=None, ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_address: address, secondary, anycast
    :param ipv6_address: Keyword argument tuple.

    :type address: unicode
    :param address: **ipv6_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type secondary: YANGBool
    :param secondary: **ipv6_address** tuple argument:  Configure Secondary ipv6 address on an interface

    :type anycast: YANGBool
    :param anycast: **ipv6_address** tuple argument:  Configure ipv6 address as anycast

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', u'eui-config'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_config.address.ipv6_address', u'eui-config')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_address', 'keyval': 'address', 'extra_keyval': 'address, secondary, anycast'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_address=ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_anycast_address_get(self, rbridge_id=None, ve=None, ipv6_anycast_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_anycast_address: ipv6_address
    :param ipv6_anycast_address: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **ipv6_anycast_address** tuple argument:  A:B::C:D/LEN;; IPv6 prefix format: xxxx:xxxx/ml, xxxx:xxxx::/ml, xxxx::xx/128

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_anycast_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_anycast_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_anycast_address', 'keyval': 'ipv6_address', 'extra_keyval': 'ipv6_address'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_anycast_address=ipv6_anycast_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_dhcp_relay_get(self, rbridge_id=None, ve=None, servers=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type servers: relay_ip_addr, server_vrf_name
    :param servers: Keyword argument tuple.

    :type relay_ip_addr: unicode
    :param relay_ip_addr: **servers** tuple argument:  IPv6 address of the DHCPv6 server

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type server_vrf_name: unicode
    :param server_vrf_name: **servers** tuple argument:  VRF name of the DHCPv6 server

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.interface_ve_dhcp_conf.dhcp.relay.servers', u'interface')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'servers', 'keyval': 'relay_ip_addr', 'extra_keyval': 'relay_ip_addr, server_vrf_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, servers=servers)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_get(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'load-balancing'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-network'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-next-hop'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-network'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'load-balancing'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track', u'ipv6-network'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'load-balancing')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_local_anycast_gateway', 'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_track_interface_get(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, ipv6_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_interface: ipv6_interface_type, ipv6_interface_name
    :param ipv6_interface: Keyword argument tuple.

    :type ipv6_interface_type: unicode
    :param ipv6_interface_type: **ipv6_interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type ipv6_interface_name: unicode
    :param ipv6_interface_name: **ipv6_interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_interface', 'keyval': 'ipv6_interface_type, ipv6_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_interface=ipv6_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_track_network_get(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, ipv6_network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_network: ipv6_network_address
    :param ipv6_network: Keyword argument tuple.

    :type ipv6_network_address: unicode
    :param ipv6_network_address: **ipv6_network** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_network', 'keyval': 'ipv6_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_network=ipv6_network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_fabric_virtual_gateway_track_next_hop_get(self, rbridge_id=None, ve=None, ipv6_local_anycast_gateway=None, ipv6_next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ipv6_local_anycast_gateway: local_ipv6_gw_id
    :param ipv6_local_anycast_gateway: Keyword argument tuple.

    :type local_ipv6_gw_id: long
    :param local_ipv6_gw_id: **ipv6_local_anycast_gateway** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ipv6_next_hop: ipv6_next_hop_address
    :param ipv6_next_hop: Keyword argument tuple.

    :type ipv6_next_hop_address: unicode
    :param ipv6_next_hop_address: **ipv6_next_hop** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway', u'ipv6_local_anycast_gateway')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_local_anycast_gateway.ipv6_track.ipv6_next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'local_ipv6_gw_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ipv6_next_hop', 'keyval': 'ipv6_next_hop_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, ipv6_local_anycast_gateway=ipv6_local_anycast_gateway, ipv6_next_hop=ipv6_next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_nd_prefix_get(self, rbridge_id=None, ve=None, prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type prefix: prefix_ipv6_address
    :param prefix: Keyword argument tuple.

    :type prefix_ipv6_address: unicode
    :param prefix_ipv6_address: **prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix', u'lifetime'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime.preferred', u'prefix-flags'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.nd.prefix.lifetime', u'preferred')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix', 'keyval': 'prefix_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, prefix=prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_neighbor_get(self, rbridge_id=None, ve=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type neighbor: ipv6_address
    :param neighbor: Keyword argument tuple.

    :type ipv6_address: unicode
    :param ipv6_address: **neighbor** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.ipv6_nd_ra.ipv6_intf_cmds.neighbor', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_get(self, rbridge_id=None, ve=None, vrrpv3e=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'virtual-mac'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'virtual-ip'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.track', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'short-path-forwarding'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.track', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.track', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.track', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'virtual-mac'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'short-path-forwarding'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'virtual-ip'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'virtual-mac'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'short-path-forwarding'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.track', u'network'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.track', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3e', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_track_get(self, rbridge_id=None, ve=None, vrrpv3e=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_track_network_get(self, rbridge_id=None, ve=None, vrrpv3e=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_address
    :param network: Keyword argument tuple.

    :type network_address: unicode
    :param network_address: **network** tuple argument:  XXXX::YYYY/L;;IPv6 global address prefix in ipv6-address/Prefix length format

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.track.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_extended_group_virtual_ip_get(self, rbridge_id=None, ve=None, vrrpv3e=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3e: vrid
    :param vrrpv3e: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3e** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e', u'vrrpv3e')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3e.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3e=vrrpv3e, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_group_get(self, rbridge_id=None, ve=None, vrrpv3=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3.track', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', u'virtual-ip'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', u'virtual-ip'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3.track', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3.track', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', u'virtual-ip')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpv3', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3=vrrpv3)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_group_track_get(self, rbridge_id=None, ve=None, vrrpv3=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3=vrrpv3, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_ipv6_vrrp_group_virtual_ip_get(self, rbridge_id=None, ve=None, vrrpv3=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpv3: vrid
    :param vrrpv3: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpv3** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3', u'vrrpv3')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.ipv6.vrrpv3.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpv3=vrrpv3, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_get(self, rbridge_id=None, ve=None, vrrpe=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'virtual-ip'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.arp', u'unicast-request'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'short-path-forwarding'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.track', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.track', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'short-path-forwarding'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.track', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.arp', u'unicast-request'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'virtual-ip'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.track', u'network'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'virtual-ip'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.track', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.arp', u'unicast-request'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'short-path-forwarding'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.track', u'network')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrpe', 'keyval': 'vrid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_track_get(self, rbridge_id=None, ve=None, vrrpe=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_track_network_get(self, rbridge_id=None, ve=None, vrrpe=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_address
    :param network: Keyword argument tuple.

    :type network_address: unicode
    :param network_address: **network** tuple argument:  IPv4 global address

        * pattern restriction: ::

            '(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]'
            '|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0'
            '-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1])'
            ')'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.track.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.track.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.track.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_extended_group_virtual_ip_get(self, rbridge_id=None, ve=None, vrrpe=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrpe: vrid
    :param vrrpe: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrpe** tuple argument.

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe', u'vrrpe'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe', u'vrrpe')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrpe.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrpe.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrpe.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrpe=vrrpe, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_group_get(self, rbridge_id=None, ve=None, vrrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', u'virtual-ip'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp.track', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp.arp', u'unicast-request'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', u'virtual-ip'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', u'virtual-ip'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp.track', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp.arp', u'unicast-request')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrrp', 'keyval': 'vrid, version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrp=vrrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_group_track_get(self, rbridge_id=None, ve=None, vrrp=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type interface: interface_type, interface_name
    :param interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'port-channel']

    :type interface_name: unicode
    :param interface_name: **interface** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp.track.interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp.track.interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp.track.interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrp=vrrp, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_interface_ve_vrrp_group_virtual_ip_get(self, rbridge_id=None, ve=None, vrrp=None, virtual_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ve: name
    :param ve: Keyword argument tuple.

    :type name: long
    :param name: **ve** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrrp: vrid, version
    :param vrrp: Keyword argument tuple.

    :type vrid: int
    :param vrid: **vrrp** tuple argument.

        * range restriction: ::

            ['0..255']

    :type version: int
    :param version: **vrrp** tuple argument:  Set VRRP version 2/3

        * range restriction: ::

            ['0..255']

    **Instance Keyword Argument Tuple**:

    :type virtual_ip: virtual_ipaddr
    :param virtual_ip: Keyword argument tuple.

    :type virtual_ipaddr: unicode
    :param virtual_ipaddr: **virtual_ip** tuple argument:  Virtual IPv4 address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve', u've'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp', u'vrrp'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve', u've'), ('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp', u'vrrp')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.interface.ve.vrrp.virtual_ip', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.interface.ve.vrrp.virtual_ip', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.interface.ve.vrrp.virtual_ip', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name', 'extra_keyval': ''}, {'keyval': 'vrid, version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_ip', 'keyval': 'virtual_ipaddr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ve=ve, vrrp=vrrp, virtual_ip=virtual_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_as_path_access_list_get(self, rbridge_id=None, access_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_list: name, seq_keyword, instance, ip_action, ip_reg_expr
    :param access_list: Keyword argument tuple.

    :type name: unicode
    :param name: **access_list** tuple argument.

        * length restriction: ::

            ['1..32']

    :type seq_keyword: unicode
    :param seq_keyword: **access_list** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **access_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ip_action: unicode
    :param ip_action: **access_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ip_reg_expr: unicode
    :param ip_reg_expr: **access_list** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.as_path.access_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.as_path.access_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.as_path.access_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, access_list=access_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_community_list_extended_get(self, rbridge_id=None, extended=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type extended: name, seq_keyword, instance, ip_action, ip_community_reg_expr
    :param extended: Keyword argument tuple.

    :type name: unicode
    :param name: **extended** tuple argument.

    :type seq_keyword: unicode
    :param seq_keyword: **extended** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **extended** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ip_action: unicode
    :param ip_action: **extended** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ip_community_reg_expr: unicode
    :param ip_community_reg_expr: **extended** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.community_list.extended', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.community_list.extended', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.community_list.extended', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ip.community_list.extended', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'extended', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, ip_community_reg_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, extended=extended)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_community_list_standard_get(self, rbridge_id=None, standard=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type standard: name, seq_keyword, instance, ip_action, std_community_expr
    :param standard: Keyword argument tuple.

    :type name: unicode
    :param name: **standard** tuple argument.

    :type seq_keyword: unicode
    :param seq_keyword: **standard** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **standard** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ip_action: unicode
    :param ip_action: **standard** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type std_community_expr: unicode
    :param std_community_expr: **standard** tuple argument.

        * pattern restriction: ::

            '(\s*)|(\s*((local\-as)|(internet)|(no\-export)|('
            'no\-advertise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4'
            '})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2]['
            '0-9])|(6553[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9'
            ']{4})|(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-'
            '2][0-9])|(6553[0-5])))|([1-9][0-9]{0,8})|([1-3]['
            '0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429'
            '[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5][0'
            '-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9]'
            '{2})|(42949672[0-8][0-9])|(429496729[0-5])))((\s'
            '+((local\-as)|(internet)|(no\-export)|(no\-adver'
            'tise)|((([1-9][0-9]{0,3})|([1-5][0-9]{4})|(6[0-4'
            '][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|(65'
            '53[0-5])):(([0-9][0-9]{0,3})|([1-5][0-9]{4})|(6['
            '0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9])|'
            '(6553[0-5])))|([1-9][0-9]{0,8})|([1-3][0-9]{9})|'
            '(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(429[0-3][0-9'
            ']{6})|(4294[0-8][0-9]{5})|(42949[0-5][0-9]{4})|('
            '429496[0-6][0-9]{3})|(4294967[0-1][0-9]{2})|(429'
            '49672[0-8][0-9])|(429496729[0-5])))*)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.community_list.standard', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.community_list.standard', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.community_list.standard', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ip.community_list.standard', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'standard', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, ip_action, std_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, standard=standard)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_extcommunity_list_get(self, rbridge_id=None, extcommunity_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type extcommunity_list: extcommunity_list_num, ext_community_action, ext_community_expr
    :param extcommunity_list: Keyword argument tuple.

    :type extcommunity_list_num: int
    :param extcommunity_list_num: **extcommunity_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ext_community_action: unicode
    :param ext_community_action: **extcommunity_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ext_community_expr: unicode
    :param ext_community_expr: **extcommunity_list** tuple argument:  Ext-community-list

        * pattern restriction: ::

            '(\s*)|(\s*((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3]'
            '[0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(42'
            '9[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5]['
            '0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9'
            ']{2})|(42949672[0-8][0-9])|(429496729[0-5])):((['
            '1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})'
            '|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8]'
            '[0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]'
            '{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])'
            '|(429496729[0-5])))|((([0-9]|[1-9][0-9]|1[0-9]{2'
            '}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1['
            '0-9]{2}|2[0-4][0-9]|25[0-5]):(([1-9][0-9]{0,8})|'
            '([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7'
            '})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949'
            '[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-'
            '1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-5]'
            ')))))((\s+((rt)|(soo)|((([1-9][0-9]{0,8})|([1-3]'
            '[0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]{7})|(42'
            '9[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(42949[0-5]['
            '0-9]{4})|(429496[0-6][0-9]{3})|(4294967[0-1][0-9'
            ']{2})|(42949672[0-8][0-9])|(429496729[0-5])):((['
            '1-9][0-9]{0,8})|([1-3][0-9]{9})|(4[0-1][0-9]{8})'
            '|(42[0-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8]'
            '[0-9]{5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]'
            '{3})|(4294967[0-1][0-9]{2})|(42949672[0-8][0-9])'
            '|(429496729[0-5])))|(((([0-9]|[1-9][0-9]|1[0-9]{'
            '2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1'
            '[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,8}'
            ')|([1-3][0-9]{9})|(4[0-1][0-9]{8})|(42[0-8][0-9]'
            '{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{5})|(429'
            '49[0-5][0-9]{4})|(429496[0-6][0-9]{3})|(4294967['
            '0-1][0-9]{2})|(42949672[0-8][0-9])|(429496729[0-'
            '5])))))*)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.extcommunity_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.extcommunity_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.extcommunity_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'extcommunity_list', 'keyval': 'extcommunity_list_num', 'extra_keyval': 'extcommunity_list_num, ext_community_action, ext_community_regex, ext_community_expr'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, extcommunity_list=extcommunity_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_import_routes_get(self, rbridge_id=None, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_prefix_list_get(self, rbridge_id=None, prefix_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type prefix_list: name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp
    :param prefix_list: Keyword argument tuple.

    :type name: unicode
    :param name: **prefix_list** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type seq_keyword: unicode
    :param seq_keyword: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **prefix_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type action_ipp: unicode
    :param action_ipp: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type prefix_ipp: unicode
    :param prefix_ipp: **prefix_list** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type ge_ipp: long
    :param ge_ipp: **prefix_list** tuple argument:  Minimum IP prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type le_ipp: long
    :param le_ipp: **prefix_list** tuple argument:  Maximum IP prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.prefix_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.prefix_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.prefix_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, prefix_list=prefix_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_route_get(self, rbridge_id=None, static_route_nh_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_route_nh_vrf: static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop
    :param static_route_nh_vrf: Keyword argument tuple.

    :type static_route_next_vrf_dest: unicode
    :param static_route_next_vrf_dest: **static_route_nh_vrf** tuple argument:  A.B.C.D/L ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type next_hop_vrf: unicode
    :param next_hop_vrf: **static_route_nh_vrf** tuple argument:  Next Hop Vrf Name

    :type static_route_next_hop: unicode
    :param static_route_next_hop: **static_route_nh_vrf** tuple argument:  A.B.C.D ;; Next hop IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_oif_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ip_route_static_bfd_get(self, rbridge_id=None, bfd_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type bfd_static_route: bfd_static_route_dest, bfd_static_route_src
    :param bfd_static_route: Keyword argument tuple.

    :type bfd_static_route_dest: unicode
    :param bfd_static_route_dest: **bfd_static_route** tuple argument:  A.B.C.D ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type bfd_static_route_src: unicode
    :param bfd_static_route_src: **bfd_static_route** tuple argument:  A.B.C.D ;; Source IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v7_1_0.rbridge_id.ip.rtm_config.route.static.bfd.bfd_static_route', u'bfd-interval-attributes')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, bfd_static_route=bfd_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_import_routes_get(self, rbridge_id=None, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_prefix_list_get(self, rbridge_id=None, prefix_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type prefix_list: name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp
    :param prefix_list: Keyword argument tuple.

    :type name: unicode
    :param name: **prefix_list** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type seq_keyword: unicode
    :param seq_keyword: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['seq']

    :type instance: int
    :param instance: **prefix_list** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type action_ipp: unicode
    :param action_ipp: **prefix_list** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type ipv6_prefix_ipp: unicode
    :param ipv6_prefix_ipp: **prefix_list** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type ge_ipp: long
    :param ge_ipp: **prefix_list** tuple argument:  Minimum IPv6 prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type le_ipp: long
    :param le_ipp: **prefix_list** tuple argument:  Maximum IPv6 prefix length.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.prefix_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.prefix_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.prefix_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'prefix_list', 'keyval': 'name, seq_keyword, instance', 'extra_keyval': 'name, seq_keyword, instance, action_ipp, ipv6_prefix_ipp, ge_ipp, le_ipp'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, prefix_list=prefix_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_route_get(self, rbridge_id=None, route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type route: dest
    :param route: Keyword argument tuple.

    :type dest: unicode
    :param dest: **route** tuple argument:  IPv6Address/prefix.;; Destination IPv6 address-prefix

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.ipv6route.route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static_route_oif', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.ipv6route.route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static_route_oif', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.ipv6route.route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static_route_oif', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.ipv6.ipv6route.route', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static_route_oif', u'route-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static_route_oif', u'route-attributes'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static_route_oif', u'route-attributes')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route', 'keyval': 'dest', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route=route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_route_static_bfd_get(self, rbridge_id=None, bfd_ipv6_link_local_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type bfd_ipv6_link_local_static_route: bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name
    :param bfd_ipv6_link_local_static_route: Keyword argument tuple.

    :type bfd_ipv6_link_local_dest: unicode
    :param bfd_ipv6_link_local_dest: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Destination IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_ipv6_link_local_src: unicode
    :param bfd_ipv6_link_local_src: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Source IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_interface_type: unicode
    :param bfd_interface_type: **bfd_ipv6_link_local_static_route** tuple argument:  Outgoing interface type

        * enumeration restriction: ::

            ['ve',
            'fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'null']

    :type bfd_interface_name: unicode
    :param bfd_interface_name: **bfd_ipv6_link_local_static_route** tuple argument.

        * length restriction: ::

            ['1..16']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_link_local_static_route', 'keyval': 'bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_get(self, rbridge_id=None, ospf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'distance'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.distribute_list', u'route-map'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'log'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.distribute_list', u'prefix-list'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'summary-address'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'area'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-bgp'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'global-default-information-originate'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-static'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'auto-cost'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.log', u'log-adjacency'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'external-lsa'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.timers', u'spf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.graceful_restart', u'helper'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.max_metric', u'router-lsa'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.log', u'log-bad-packet'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-connected'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.distribute_list', u'route-map'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'log'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.timers', u'spf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-static'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.log', u'log-adjacency'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-bgp'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.log', u'log-bad-packet'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.max_metric', u'router-lsa'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'global-default-information-originate'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'summary-address'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'auto-cost'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.graceful_restart', u'helper'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-connected'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.distribute_list', u'prefix-list'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'distance'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'external-lsa'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'area'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-bgp'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'auto-cost'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'global-default-information-originate'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.log', u'log-adjacency'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.timers', u'spf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-static'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'distance'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.max_metric', u'router-lsa'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'summary-address'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.distribute_list', u'route-map'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'log'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.distribute_list', u'prefix-list'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.max_metric.router_lsa', u'external-lsa'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.redistribute', u'redistribute-connected'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.log', u'log-bad-packet'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'area'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.graceful_restart', u'helper')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_area_get(self, rbridge_id=None, ospf=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.nssa', u'metric'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'nssa'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'virtual-link'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.nssa', u'area-default-information-originate'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'stub'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'area-range'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.nssa', u'area-default-information-originate'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'virtual-link'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'nssa'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'area-range'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'stub'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.nssa', u'metric'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'area-range'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.nssa', u'metric'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'nssa'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.nssa', u'area-default-information-originate'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'virtual-link'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'stub')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_area_range_get(self, rbridge_id=None, ospf=None, area=None, area_range=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type area_range: range_address, range_effect, range_cost
    :param area_range: Keyword argument tuple.

    :type range_address: unicode
    :param range_address: **area_range** tuple argument:  A:B::C:D/LEN;; IPv6 address to match

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type range_effect: unicode
    :param range_effect: **area_range** tuple argument:  Advertise/Do not advertise this type-3 summarization

        * enumeration restriction: ::

            ['advertise', 'not-advertise']

    :type range_cost: long
    :param range_cost: **area_range** tuple argument:  Configure area range cost

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.area_range', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.area_range', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.area_range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area_range', 'keyval': 'range_address', 'extra_keyval': 'range_address, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, area_range=area_range)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_area_virtual_link_get(self, rbridge_id=None, ospf=None, area=None, virtual_link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type virtual_link: virtual_link_neighbor
    :param virtual_link: Keyword argument tuple.

    :type virtual_link_neighbor: unicode
    :param virtual_link_neighbor: **virtual_link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area', u'area'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.virtual_link', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.virtual_link', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.virtual_link', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.virtual_link.link_properties.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.area.virtual_link.link_properties', u'link-interval-properties'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.virtual_link.link_properties.authentication', u'ipsec-auth-key-config'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.area.virtual_link.link_properties', u'link-interval-properties'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.virtual_link.link_properties', u'link-interval-properties'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.area.virtual_link.link_properties.authentication', u'ipsec-auth-key-config')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virtual_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_distance_get(self, rbridge_id=None, ospf=None, distance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type distance: route_type
    :param distance: Keyword argument tuple.

    :type route_type: unicode
    :param route_type: **distance** tuple argument:  The type of route propagation

        * enumeration restriction: ::

            ['intra-area', 'external', 'inter-area']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.distance', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.distance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.distance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, distance=distance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ipv6_router_ospf_summary_address_get(self, rbridge_id=None, ospf=None, summary_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  OSPF instance for the VRF 

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type summary_address: summary_address_value
    :param summary_address: Keyword argument tuple.

    :type summary_address_value: unicode
    :param summary_address_value: **summary_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ipv6.router.ospf.summary_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ipv6.router.ospf.summary_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ipv6.router.ospf.summary_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'summary_address_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, summary_address=summary_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_linecard_get(self, rbridge_id=None, linecards=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type linecards: linecardName, linecardType
    :param linecards: Keyword argument tuple.

    :type linecardName: unicode
    :param linecardName: **linecards** tuple argument.

        * pattern restriction: ::

            '([1-9]|[1][0-6])'

    :type linecardType: unicode
    :param linecardType: **linecards** tuple argument.

        * enumeration restriction: ::

            ['LC27X40G',
            'LC48X10G',
            'LC6X100G',
            'LC48X10GT',
            'LC12X40G',
            'LC48X1G']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.global_lc_holder.linecard.linecards', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.global_lc_holder.linecard.linecards', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.global_lc_holder.linecard.linecards', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'linecards', 'keyval': 'linecardName', 'extra_keyval': 'linecardName, linecardType'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, linecards=linecards)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_maps_email_get(self, rbridge_id=None, email_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type email_list: email
    :param email_list: Keyword argument tuple.

    :type email: unicode
    :param email: **email_list** tuple argument:  <email:string>  e-mail address for MAPS alerts

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.maps.email.email_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.maps.email.email_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.email.email_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps.email.email_list', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, email_list=email_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_maps_group_get(self, rbridge_id=None, logicalgroup=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type logicalgroup: logicalgroupname, elementtype, members
    :param logicalgroup: Keyword argument tuple.

    :type logicalgroupname: unicode
    :param logicalgroupname: **logicalgroup** tuple argument:  Configure group name

    :type elementtype: unicode
    :param elementtype: **logicalgroup** tuple argument.

        * enumeration restriction: ::

            ['interface', 'sfp']

    :type members: unicode
    :param members: **logicalgroup** tuple argument:  Configure memberlist

        * length restriction: ::

            ['1..253']

        * pattern restriction: ::

            '(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?'
            '(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]['
            '0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(('
            '(,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-'
            '9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9]['
            '0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]'
            '))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|['
            '1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-'
            '9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))'
            '/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-'
            '([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])('
            '-([1-4]))))))*)(,(((([1-9]|[1-9][0-9]|1[0-9][0-9'
            ']|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9]'
            '[0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9'
            '][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9]['
            '0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})'
            '+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)'
            '?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|'
            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))'
            '?){1})+)|([1-4])(-([1-4]))))))*))*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.logicalgroup', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.logicalgroup', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'logicalgroup', 'keyval': 'logicalgroupname', 'extra_keyval': 'logicalgroupname, elementtype, members'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logicalgroup=logicalgroup)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_maps_policy_get(self, rbridge_id=None, policy=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type policy: policyname
    :param policy: Keyword argument tuple.

    :type policyname: unicode
    :param policyname: **policy** tuple argument:  Configure policy name

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.policy', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.policy', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.maps.policy', u'ruleaction'), ('pybind.nos.v7_0_1a.rbridge_id.maps.policy', u'ruleaction')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'policy', 'keyval': 'policyname', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_maps_policy_rule_get(self, rbridge_id=None, policy=None, ruleaction=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type policy: policyname
    :param policy: Keyword argument tuple.

    :type policyname: unicode
    :param policyname: **policy** tuple argument:  Configure policy name

    **Instance Keyword Argument Tuple**:

    :type ruleaction: policyrule, policyaction
    :param ruleaction: Keyword argument tuple.

    :type policyrule: unicode
    :param policyrule: **ruleaction** tuple argument:  rule name

    :type policyaction: unicode
    :param policyaction: **ruleaction** tuple argument:  rule actions

        * enumeration restriction: ::

            ['NONE',
            'SNMP',
            'RASLOG',
            'SW_CRITICAL',
            'SFP_MARGINAL',
            'EMAIL',
            'SW_MARGINAL']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.maps.policy', u'policy'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.maps.policy', u'policy')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.policy.ruleaction', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.policy.ruleaction', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policyname', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policyname', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ruleaction', 'keyval': 'policyrule', 'extra_keyval': 'policyrule, policyaction'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, ruleaction=ruleaction)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_maps_relay_get(self, rbridge_id=None, relay=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type relay: hostip
    :param relay: Keyword argument tuple.

    :type hostip: unicode
    :param hostip: **relay** tuple argument:  <IP:Address> IP address of Relay Host

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.maps.relay', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.maps.relay', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.relay', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.maps.relay', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'relay', 'keyval': 'hostip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, relay=relay)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_maps_rule_get(self, rbridge_id=None, rule=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type rule: rulename, targetgroup, monitor, timebase, op, threshold
    :param rule: Keyword argument tuple.

    :type rulename: unicode
    :param rulename: **rule** tuple argument:  Configure rule name

    :type targetgroup: unicode
    :param targetgroup: **rule** tuple argument:  target group for rule

    :type monitor: unicode
    :param monitor: **rule** tuple argument.

        * enumeration restriction: ::

            ['MEMORY_USAGE',
            'FLASH_USAGE',
            'HA_SYNC',
            'BAD_PWR',
            'ETH_MGMT_PORT_STATE',
            'BAD_FAN',
            'CPU',
            'SFP_TEMP',
            'SEC_TELNET',
            'TXP',
            'TEMP',
            'RX_SYM_ERR',
            'CRCALN',
            'VOLTAGE',
            'SFP_STATE',
            'WWN_DOWN',
            'FAN_STATE',
            'CURRENT',
            'RX_ABN_FRAME',
            'RXP',
            'FAULTY_BLADE',
            'WWN',
            'BAD_TEMP',
            'PS_STATE',
            'SEC_LV',
            'BLADE_STATE',
            'DOWN_SFM']

    :type timebase: unicode
    :param timebase: **rule** tuple argument.

        * enumeration restriction: ::

            ['none', 'day', 'hour', 'min']

    :type op: unicode
    :param op: **rule** tuple argument.

        * enumeration restriction: ::

            ['gt', 'lt', 'le', 'eq', 'ge']

    :type threshold: unicode
    :param threshold: **rule** tuple argument:  threshold value

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.maps.rule', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.maps.rule', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rule', 'keyval': 'rulename', 'extra_keyval': 'rulename, targetgroup, monitor, timebase, op, threshold'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rule=rule)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_openflow_logical_instance_get(self, rbridge_id=None, logical_instance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type logical_instance: instance_id
    :param logical_instance: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **logical_instance** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', u'controller'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', u'version'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance.passive', u'no-ssl'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', u'version'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', u'controller'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance.passive', u'no-ssl'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', u'controller'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', u'version'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance.passive', u'no-ssl')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'logical_instance', 'keyval': 'instance_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logical_instance=logical_instance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_openflow_logical_instance_controller_get(self, rbridge_id=None, logical_instance=None, controller=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type logical_instance: instance_id
    :param logical_instance: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **logical_instance** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type controller: controller_name
    :param controller: Keyword argument tuple.

    :type controller_name: unicode
    :param controller_name: **controller** tuple argument:  OpenFlow controller name

        * pattern restriction: ::

            '[-_a-zA-Z0-9]{1,32}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', u'logical_instance')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance.controller', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance.controller', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance.controller', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'controller', 'keyval': 'controller_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logical_instance=logical_instance, controller=controller)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_openflow_logical_instance_version_get(self, rbridge_id=None, logical_instance=None, version=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type logical_instance: instance_id
    :param logical_instance: Keyword argument tuple.

    :type instance_id: long
    :param instance_id: **logical_instance** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type version: version_name
    :param version: Keyword argument tuple.

    :type version_name: unicode
    :param version_name: **version** tuple argument.

        * enumeration restriction: ::

            ['ofv130']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance', u'logical_instance'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance', u'logical_instance')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.openflow.logical_instance.version', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.openflow.logical_instance.version', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.openflow.logical_instance.version', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'instance_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'version', 'keyval': 'version_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, logical_instance=logical_instance, version=version)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_route_map_get(self, rbridge_id=None, route_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.route_map.content', u'match'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'local-preference'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match', u'metric'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match', u'route-type'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'weight'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.ip', u'address'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.extcommunity', u'soo'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.ip', u'route-source'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'metric'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'community'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.ip', u'next-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.next_ip', u'next-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.ipv6', u'address'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip', u'dscp'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6', u'interface'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'origin'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'comm-list'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'as-path'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.ipv6', u'route-source'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'dampening'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'tag'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'metric-type'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.extcommunity', u'rt'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'distance'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match', u'community'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'automatic-tag'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match', u'extcommunity'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match', u'as-path'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content', u'continue-holder'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match', u'next-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_', u'route-type'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip', u'next-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.match.ipv6', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'metric'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.extcommunity', u'soo'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content', u'match'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.ip', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.ipv6', u'address'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip', u'interface'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'local-preference'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match', u'as-path'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'distance'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'weight'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match', u'route-type'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.ip', u'route-source'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'comm-list'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'tag'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content', u'continue-holder'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'automatic-tag'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match', u'extcommunity'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'as-path'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.extcommunity', u'rt'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'metric-type'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'dampening'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match', u'community'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'route-type'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.next_ip', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.ipv6', u'route-source'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip', u'dscp'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'origin'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_', u'community'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.ipv6', u'next-hop'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match.ip', u'address'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.match', u'metric'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.ip', u'route-source'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.extcommunity', u'soo'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'origin'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match', u'route-type'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match', u'metric'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'tag'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'automatic-tag'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.ipv6', u'address'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.ipv6', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.ip', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.next_ip', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'local-preference'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'metric-type'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'weight'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'as-path'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'community'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match', u'extcommunity'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'dampening'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'distance'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.ip', u'address'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip', u'interface'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content', u'match'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'metric'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip', u'dscp'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'comm-list'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match', u'as-path'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match', u'community'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.extcommunity', u'rt'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_', u'route-type'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip', u'next-hop'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content', u'continue-holder'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.match.ipv6', u'route-source')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_map', 'keyval': 'name, action_rm, instance', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_route_map_set_ip_get(self, rbridge_id=None, route_map=None, next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_hop: next_hop
    :param next_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_hop** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_vrf_list', 'keyval': 'vrf, next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_hop=next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_route_map_set_ip_global_get(self, rbridge_id=None, route_map=None, next_global_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_global_hop: next_hop
    :param next_global_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_global_hop** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_route_map_set_ipv6_get(self, rbridge_id=None, route_map=None, next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_hop: next_hop
    :param next_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_hop** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_hop=next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_route_map_set_ipv6_global_get(self, rbridge_id=None, route_map=None, next_global_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_global_hop: next_hop
    :param next_global_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_global_hop** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.route_map', u'route_map'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.route_map', u'route_map'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_aggregate_address_get(self, rbridge_id=None, aggregate_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type aggregate_address: aggregate_ip_prefix
    :param aggregate_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, aggregate_address=aggregate_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_neighbor_get(self, rbridge_id=None, af_ipv4_neighbor_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type af_ipv4_neighbor_address: af_ipv4_neighbor_address
    :param af_ipv4_neighbor_address: Keyword argument tuple.

    :type af_ipv4_neighbor_address: unicode
    :param af_ipv4_neighbor_address: **af_ipv4_neighbor_address** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'unsuppress-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.additional_paths', u'advertise'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'default-originate'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'maximum-prefix'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.additional_paths', u'advertise'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'send-community'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'default-originate'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'unsuppress-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'maximum-prefix'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'send-community'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'maximum-prefix'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'unsuppress-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'default-originate'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.additional_paths', u'advertise'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'default-originate'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'maximum-prefix'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.additional_paths', u'advertise')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_peergroup', 'keyval': 'af_ipv4_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv4_neighbor_address=af_ipv4_neighbor_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_network_get(self, rbridge_id=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv4_address
    :param network: Keyword argument tuple.

    :type network_ipv4_address: unicode
    :param network_ipv4_address: **network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_static_network_get(self, rbridge_id=None, static_network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_network: static_network_address
    :param static_network: Keyword argument tuple.

    :type static_network_address: unicode
    :param static_network_address: **static_network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, static_network=static_network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_get(self, rbridge_id=None, af_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'network'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'aggregate-address'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.dampening', u'values'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'static-network'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'dampening'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'multipath'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'listen-range'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder', u'af-ipv4-neighbor-addr'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'maximum-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'table-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'dampening'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'multipath'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.dampening', u'values'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'maximum-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'static-network'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'table-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'aggregate-address'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder', u'af-ipv4-neighbor-addr'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'maximum-paths'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'network'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'table-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'dampening'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder', u'af-ipv4-neighbor-addr'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'aggregate-address'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'static-network'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.dampening', u'values'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'multipath'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_vrf', 'keyval': 'af_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_aggregate_address_get(self, rbridge_id=None, af_vrf=None, aggregate_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type aggregate_address: aggregate_ip_prefix
    :param aggregate_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, aggregate_address=aggregate_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_listen_range_get(self, rbridge_id=None, af_vrf=None, listen_range=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type listen_range: listen_range_prefix, peer_group, limit
    :param listen_range: Keyword argument tuple.

    :type listen_range_prefix: unicode
    :param listen_range_prefix: **listen_range** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type peer_group: unicode
    :param peer_group: **listen_range** tuple argument:  Peer group name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\\\\@#\+\*\(\)=\{~\}%<>=$'
            '_\[\]\|]{0,62})'

    :type limit: long
    :param limit: **listen_range** tuple argument:  Limit the neighbor

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.listen_range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'listen_range', 'keyval': 'listen_range_prefix, peer_group', 'extra_keyval': 'listen_range_prefix, peer_group, limit'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, listen_range=listen_range)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_neighbor_get(self, rbridge_id=None, af_vrf=None, af_ipv4_neighbor_addr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type af_ipv4_neighbor_addr: af_ipv4_neighbor_address
    :param af_ipv4_neighbor_addr: Keyword argument tuple.

    :type af_ipv4_neighbor_address: unicode
    :param af_ipv4_neighbor_address: **af_ipv4_neighbor_addr** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'next-hop-self'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'maximum-prefix'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'advertisement-interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.additional_paths', u'advertise'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'shutdown'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'enforce-first-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'update-source'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'local-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'unsuppress-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'update-source'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'local-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'shutdown'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'enforce-first-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.additional_paths', u'advertise'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'default-originate'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'advertisement-interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'next-hop-self'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'shutdown'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'update-source'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'advertisement-interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'send-community'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'default-originate'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'next-hop-self'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'unsuppress-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'local-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'enforce-first-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'maximum-prefix'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-in')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_addr', 'keyval': 'af_ipv4_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, af_ipv4_neighbor_addr=af_ipv4_neighbor_addr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_network_get(self, rbridge_id=None, af_vrf=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv4_address
    :param network: Keyword argument tuple.

    :type network_ipv4_address: unicode
    :param network_ipv4_address: **network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv4_unicast_vrf_static_network_get(self, rbridge_id=None, af_vrf=None, static_network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type static_network: static_network_address
    :param static_network: Keyword argument tuple.

    :type static_network_address: unicode
    :param static_network_address: **static_network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_vrf=af_vrf, static_network=static_network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_aggregate_address_get(self, rbridge_id=None, aggregate_ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type aggregate_ipv6_address: aggregate_ip_prefix
    :param aggregate_ipv6_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_ipv6_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_neighbor_get(self, rbridge_id=None, af_ipv6_neighbor_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type af_ipv6_neighbor_address: af_ipv6_neighbor_address
    :param af_ipv6_neighbor_address: Keyword argument tuple.

    :type af_ipv6_neighbor_address: unicode
    :param af_ipv6_neighbor_address: **af_ipv6_neighbor_address** tuple argument:  A:B::C:D;;Neighbor IPV6 Address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'unsuppress-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'send-community'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'default-originate'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'maximum-prefix'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.additional_paths', u'advertise'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'maximum-prefix'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'default-originate'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.additional_paths', u'advertise'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'unsuppress-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.additional_paths', u'advertise'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'default-originate'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'unsuppress-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.additional_paths', u'advertise'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.af_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'send-community'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'unsuppress-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'maximum-prefix'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'default-originate')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_peergroup', 'keyval': 'af_ipv6_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_neighbor_address=af_ipv6_neighbor_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_network_get(self, rbridge_id=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv6_address
    :param network: Keyword argument tuple.

    :type network_ipv6_address: unicode
    :param network_ipv6_address: **network** tuple argument:  A:B::C:D/M IPV6 address in dotted decimal/Mask

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_get(self, rbridge_id=None, af_ipv6_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.dampening', u'values'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'aggregate-ipv6-address'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'dampening'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'network'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'maximum-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'table-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'multipath'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder', u'af-ipv6-neighbor-addr'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder', u'af-ipv6-neighbor-addr'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'dampening'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'network'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'multipath'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'table-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'maximum-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.dampening', u'values'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'aggregate-ipv6-address'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'dampening'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'multipath'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'maximum-paths'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'network'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'table-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder', u'af-ipv6-neighbor-addr'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.dampening', u'values'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'aggregate-ipv6-address')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_vrf', 'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_aggregate_address_get(self, rbridge_id=None, af_ipv6_vrf=None, aggregate_ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type aggregate_ipv6_address: aggregate_ip_prefix
    :param aggregate_ipv6_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_ipv6_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_neighbor_get(self, rbridge_id=None, af_ipv6_vrf=None, af_ipv6_neighbor_addr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type af_ipv6_neighbor_addr: af_ipv6_neighbor_address
    :param af_ipv6_neighbor_addr: Keyword argument tuple.

    :type af_ipv6_neighbor_address: unicode
    :param af_ipv6_neighbor_address: **af_ipv6_neighbor_addr** tuple argument:  A:B::C:D;;Neighbor Ipv6 Address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'shutdown'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'next-hop-self'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'unsuppress-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'enforce-first-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'advertisement-interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'local-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.additional_paths', u'advertise'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'maximum-prefix'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'update-source'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'shutdown'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'local-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.additional_paths', u'advertise'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'advertisement-interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'next-hop-self'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'default-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'maximum-prefix'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'update-source'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability', u'additional-paths'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'unsuppress-map'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'enforce-first-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'shutdown'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'default-originate'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'send-community'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'next-hop-self'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'enforce-first-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'update-source'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'advertisement-interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'unsuppress-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-out'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'local-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'maximum-prefix'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_addr', 'keyval': 'af_ipv6_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf, af_ipv6_neighbor_addr=af_ipv6_neighbor_addr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_ipv6_unicast_vrf_network_get(self, rbridge_id=None, af_ipv6_vrf=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv6_address
    :param network: Keyword argument tuple.

    :type network_ipv6_address: unicode
    :param network_ipv6_address: **network** tuple argument:  A:B::C:D/M IPV6 address in dotted decimal/Mask

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, af_ipv6_vrf=af_ipv6_vrf, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_address_family_l2vpn_evpn_neighbor_get(self, rbridge_id=None, evpn_neighbor_ipv4=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type evpn_neighbor_ipv4: evpn_neighbor_ipv4_address
    :param evpn_neighbor_ipv4: Keyword argument tuple.

    :type evpn_neighbor_ipv4_address: unicode
    :param evpn_neighbor_ipv4_address: **evpn_neighbor_ipv4** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4.route_map', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4.route_map', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6.route_map', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6.route_map', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6.route_map', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv6.route_map', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group', u'send-community'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group.route_map', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group.route_map', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4.route_map', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4.route_map', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_neighbor_ipv4', u'send-community'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group.route_map', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group.route_map', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.address_family.l2vpn.evpn.neighbor.evpn_peer_group', u'send-community')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'evpn_peer_group', 'keyval': 'evpn_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, evpn_neighbor_ipv4=evpn_neighbor_ipv4)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_listen_range_get(self, rbridge_id=None, listen_range=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type listen_range: listen_range_prefix, peer_group, limit
    :param listen_range: Keyword argument tuple.

    :type listen_range_prefix: unicode
    :param listen_range_prefix: **listen_range** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type peer_group: unicode
    :param peer_group: **listen_range** tuple argument:  Peer group name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\\\\@#\+\*\(\)=\{~\}%<>=$'
            '_\[\]\|]{0,62})'

    :type limit: long
    :param limit: **listen_range** tuple argument:  Limit the neighbor

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.listen_range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'listen_range', 'keyval': 'listen_range_prefix, peer_group', 'extra_keyval': 'listen_range_prefix, peer_group, limit'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, listen_range=listen_range)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_bgp_neighbor_get(self, rbridge_id=None, neighbor_addr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type neighbor_addr: router_bgp_neighbor_address
    :param neighbor_addr: Keyword argument tuple.

    :type router_bgp_neighbor_address: unicode
    :param router_bgp_neighbor_address: **neighbor_addr** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'update-source'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'local-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'enforce-first-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'advertisement-interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'next-hop-self'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'shutdown'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.af_neighbor_capability', u'as4'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'shutdown'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.update_source', u'ethernet-interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'soft-reconfiguration'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'local-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'ebgp-multihop'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.af_neighbor_capability', u'as4'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'advertisement-interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'enforce-first-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'update-source'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'next-hop-self'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.maxas_limit', u'in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'ebgp-multihop'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'update-source'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'shutdown'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.af_neighbor_capability', u'as4'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'advertisement-interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'local-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'alternate-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'soft-reconfiguration'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'next-hop-self'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.update_source', u'ethernet-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'enforce-first-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.af_neighbor_capability', u'as4'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'enforce-first-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'soft-reconfiguration'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'local-as'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.bfd', u'interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'update-source'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'ebgp-multihop'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'next-hop-self'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.maxas_limit', u'in'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'advertisement-interval'), ('pybind.nos.v7_1_0.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'shutdown'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'local-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'shutdown'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'enforce-first-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.af_neighbor_capability', u'as4'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'advertisement-interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'update-source'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'next-hop-self'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'soft-reconfiguration'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'enforce-first-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'update-source'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'local-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.af_neighbor_capability', u'as4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'next-hop-self'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'ebgp-multihop'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.update_source', u'ethernet-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'advertisement-interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'shutdown'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'ebgp-multihop'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'advertisement-interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'local-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'shutdown'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'soft-reconfiguration'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.af_neighbor_capability', u'as4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'update-source'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'enforce-first-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'next-hop-self'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'next-hop-self'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'shutdown'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'enforce-first-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'ebgp-multihop'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.update_source', u'ethernet-interface'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'advertisement-interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.bfd', u'interval'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'soft-reconfiguration'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.maxas_limit', u'in'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'update-source'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'local-as'), ('pybind.nos.v6_0_2b.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.af_neighbor_capability', u'as4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'next-hop-self'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'soft-reconfiguration'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.update_source', u'ethernet-interface'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'advertisement-interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'enforce-first-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'ebgp-multihop'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.bfd', u'interval'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'update-source'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.af_neighbor_capability', u'as4'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.maxas_limit', u'in'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'local-as'), ('pybind.nos.v7_0_1a.rbridge_id.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'shutdown')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor_ipv6_addr', 'keyval': 'router_bgp_neighbor_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, neighbor_addr=neighbor_addr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_get(self, rbridge_id=None, ospf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'external-lsa-onstartup'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.log', u'adjacency'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.permit', u'redistribute'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'summary-lsa-onstartup'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'timers'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.distribute_list', u'route-map'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'log'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'distance'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.redistribute', u'bgp'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'graceful-restart'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.log', u'bad-packet'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric', u'router-lsa'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.auto_cost', u'reference-bandwidth'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'summary-address'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'rfc1583-compatibility'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa', u'external-lsa'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'default-information-originate'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'global-bfd'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.deny', u'redistribute'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa', u'link'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.redistribute', u'connected'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.timers.throttle', u'spf'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'neighbor'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.redistribute', u'static'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'area'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'link-onstartup'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'summary-address'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'timers'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.deny', u'redistribute'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa', u'external-lsa'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.distribute_list', u'route-map'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.timers.throttle', u'spf'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.redistribute', u'bgp'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'distance'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'summary-lsa-onstartup'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'neighbor'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'log'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.redistribute', u'connected'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.log', u'adjacency'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'link-onstartup'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.auto_cost', u'reference-bandwidth'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'default-information-originate'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'external-lsa-onstartup'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa', u'link'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'graceful-restart'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'global-bfd'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'area'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'rfc1583-compatibility'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.log', u'bad-packet'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.redistribute', u'static'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.max_metric', u'router-lsa'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.permit', u'redistribute'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'default-information-originate'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.redistribute', u'connected'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric', u'router-lsa'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'area'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'global-bfd'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.redistribute', u'static'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.permit', u'redistribute'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'timers'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.timers.throttle', u'spf'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'neighbor'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.distribute_list', u'route-map'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'graceful-restart'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.log', u'bad-packet'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'rfc1583-compatibility'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.log', u'adjacency'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'external-lsa-onstartup'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'log'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'link-onstartup'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.deny', u'redistribute'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'summary-address'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.redistribute', u'bgp'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'distance'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.auto_cost', u'reference-bandwidth'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa', u'link'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa.on_startup', u'summary-lsa-onstartup'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.max_metric.router_lsa', u'external-lsa')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_area_get(self, rbridge_id=None, ospf=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.nssa', u'metric'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'nssa'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'range'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.stub', u'metric'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'virtual-link'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.prefix_list', u'direction-out'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.nssa', u'default-information-metric'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.stub', u'metric'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.prefix_list', u'direction-in'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'range'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.nssa', u'metric'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'nssa'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'virtual-link'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.nssa', u'default-information-metric'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.nssa', u'metric'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'virtual-link'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.prefix_list', u'direction-out'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'range'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.prefix_list', u'direction-in'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.stub', u'metric'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'nssa')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_area_range_get(self, rbridge_id=None, ospf=None, area=None, range=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type range: range_address, range_mask, range_effect, range_cost
    :param range: Keyword argument tuple.

    :type range_address: unicode
    :param range_address: **range** tuple argument:  A.B.C.D   IP address to match

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type range_mask: unicode
    :param range_mask: **range** tuple argument:  A.B.C.D   IP mask for address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type range_effect: unicode
    :param range_effect: **range** tuple argument:  Advertise/Do not advertise this type-3 summarization

        * enumeration restriction: ::

            ['advertise', 'not-advertise']

    :type range_cost: long
    :param range_cost: **range** tuple argument:  Configure area range cost

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.range', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.range', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.range', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'range', 'keyval': 'range_address, range_mask', 'extra_keyval': 'range_address, range_mask, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, range=range)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_area_virtual_link_get(self, rbridge_id=None, ospf=None, area=None, virtual_link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type virtual_link: virt_link_neighbor
    :param virtual_link: Keyword argument tuple.

    :type virt_link_neighbor: unicode
    :param virt_link_neighbor: **virtual_link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area', u'area'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area', u'area')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link', u'md5-authentication'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link.authentication_key', u'auth-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link.md5_authentication', u'key-table'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.area.virtual_link.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link.md5_authentication', u'key-table'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link.authentication_key', u'auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link', u'md5-authentication'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.area.virtual_link.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link.md5_authentication', u'no-encrypt-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link.authentication_key', u'auth-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link', u'md5-authentication'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf.area.virtual_link.md5_authentication', u'key-table')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virt_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_deny_redistribute_get(self, rbridge_id=None, ospf=None, redistribute=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type redistribute: redist_value, route_option, address, mask, set_metric_val, match_metric_val
    :param redistribute: Keyword argument tuple.

    :type redist_value: long
    :param redist_value: **redistribute** tuple argument:  Number

        * range restriction: ::

            ['0..4294967295']

    :type route_option: unicode
    :param route_option: **redistribute** tuple argument:  OSPF route option

        * enumeration restriction: ::

            ['connected', 'all', 'static']

    :type address: unicode
    :param address: **redistribute** tuple argument:  IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mask: unicode
    :param mask: **redistribute** tuple argument:  Subnet Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type set_metric_val: long
    :param set_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type match_metric_val: long
    :param match_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.deny.redistribute', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.deny.redistribute', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.deny.redistribute', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, redistribute=redistribute)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_distance_get(self, rbridge_id=None, ospf=None, distance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type distance: route_type
    :param distance: Keyword argument tuple.

    :type route_type: unicode
    :param route_type: **distance** tuple argument:  The type of route propogation

        * enumeration restriction: ::

            ['intra-area', 'external', 'inter-area']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.distance', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.distance', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.distance', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, distance=distance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_neighbor_get(self, rbridge_id=None, ospf=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type neighbor: neighbor_addr
    :param neighbor: Keyword argument tuple.

    :type neighbor_addr: unicode
    :param neighbor_addr: **neighbor** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.neighbor', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.neighbor', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.neighbor', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'neighbor_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_permit_redistribute_get(self, rbridge_id=None, ospf=None, redistribute=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type redistribute: redist_value, route_option, address, mask, set_metric_val, match_metric_val
    :param redistribute: Keyword argument tuple.

    :type redist_value: long
    :param redist_value: **redistribute** tuple argument:  Number

        * range restriction: ::

            ['0..4294967295']

    :type route_option: unicode
    :param route_option: **redistribute** tuple argument:  OSPF route option

        * enumeration restriction: ::

            ['connected', 'all', 'static']

    :type address: unicode
    :param address: **redistribute** tuple argument:  IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mask: unicode
    :param mask: **redistribute** tuple argument:  Subnet Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type set_metric_val: long
    :param set_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type match_metric_val: long
    :param match_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.permit.redistribute', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.permit.redistribute', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.permit.redistribute', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, redistribute=redistribute)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_ospf_summary_address_get(self, rbridge_id=None, ospf=None, summary_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type summary_address: sum_address, sum_address_mask
    :param summary_address: Keyword argument tuple.

    :type sum_address: unicode
    :param sum_address: **summary_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type sum_address_mask: unicode
    :param sum_address_mask: **summary_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.router.ospf', u'ospf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf', u'ospf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.ospf.summary_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.ospf.summary_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.ospf.summary_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'sum_address, sum_address_mask', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, ospf=ospf, summary_address=summary_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_pim_bsr_candidate_interface_get(self, rbridge_id=None, bsr_cand_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type bsr_cand_interface: bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority
    :param bsr_cand_interface: Keyword argument tuple.

    :type bsr_cand_intf_type: unicode
    :param bsr_cand_intf_type: **bsr_cand_interface** tuple argument.

        * enumeration restriction: ::

            ['port-channel',
            've',
            'fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet']

    :type bsr_cand_intf_id: unicode
    :param bsr_cand_intf_id: **bsr_cand_interface** tuple argument:  String;;Interface ID

    :type hash_mask_length: int
    :param hash_mask_length: **bsr_cand_interface** tuple argument:  BSR hash mask

        * range restriction: ::

            ['0..65535']

    :type bsr_cand_priority: long
    :param bsr_cand_priority: **bsr_cand_interface** tuple argument:  BSR priority

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bsr_cand_interface', 'keyval': 'bsr_cand_intf_type, bsr_cand_intf_id', 'extra_keyval': 'bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, bsr_cand_interface=bsr_cand_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_pim_rp_address_get(self, rbridge_id=None, rp_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type rp_address: rp_ip_addr, prefix_list
    :param rp_address: Keyword argument tuple.

    :type rp_ip_addr: unicode
    :param rp_ip_addr: **rp_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type prefix_list: unicode
    :param prefix_list: **rp_address** tuple argument:  Prefix list

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_address', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_address', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_address', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_address', 'keyval': 'rp_ip_addr', 'extra_keyval': 'rp_ip_addr, prefix_list'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_address=rp_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_pim_rp_candidate_get(self, rbridge_id=None, rp_cand_grp_prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type rp_cand_grp_prefix: rp_cand_grp_prefix_action, rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length
    :param rp_cand_grp_prefix: Keyword argument tuple.

    :type rp_cand_grp_prefix_action: unicode
    :param rp_cand_grp_prefix_action: **rp_cand_grp_prefix** tuple argument.

        * enumeration restriction: ::

            ['add', 'delete']

    :type rp_cand_grp_prefix_ip: unicode
    :param rp_cand_grp_prefix_ip: **rp_cand_grp_prefix** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type rp_cand_grp_prefix_length: int
    :param rp_cand_grp_prefix_length: **rp_cand_grp_prefix** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_cand_grp_prefix', 'keyval': 'rp_cand_grp_prefix_action, rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length', 'extra_keyval': 'rp_cand_grp_prefix_action, rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_cand_grp_prefix=rp_cand_grp_prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_pim_rp_candidate_group_range_get(self, rbridge_id=None, rp_cand_grp_prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type rp_cand_grp_prefix: rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length
    :param rp_cand_grp_prefix: Keyword argument tuple.

    :type rp_cand_grp_prefix_ip: unicode
    :param rp_cand_grp_prefix_ip: **rp_cand_grp_prefix** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type rp_cand_grp_prefix_length: int
    :param rp_cand_grp_prefix_length: **rp_cand_grp_prefix** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_cand_grp_prefix', 'keyval': 'rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length', 'extra_keyval': 'rp_cand_grp_prefix_ip, rp_cand_grp_prefix_length'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_cand_grp_prefix=rp_cand_grp_prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_router_pim_rp_candidate_interface_get(self, rbridge_id=None, rp_cand_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type rp_cand_interface: rp_cand_intf_type, rp_cand_intf_id
    :param rp_cand_interface: Keyword argument tuple.

    :type rp_cand_intf_type: unicode
    :param rp_cand_intf_type: **rp_cand_interface** tuple argument.

        * enumeration restriction: ::

            ['port-channel',
            've',
            'fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet']

    :type rp_cand_intf_id: unicode
    :param rp_cand_intf_id: **rp_cand_interface** tuple argument:  Interface ID

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'rp_cand_interface', 'keyval': 'rp_cand_intf_type, rp_cand_intf_id', 'extra_keyval': 'rp_cand_intf_type, rp_cand_intf_id'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, rp_cand_interface=rp_cand_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_secpolicy_active_policy_get(self, rbridge_id=None, policies=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies', u'member-entry'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies', u'member-entry'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies', u'member-entry')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_secpolicy_active_policy_member_entry_get(self, rbridge_id=None, policies=None, member_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    **Instance Keyword Argument Tuple**:

    :type member_entry: member
    :param member_entry: Keyword argument tuple.

    :type member: unicode
    :param member: **member_entry** tuple argument:  WWN of the switch

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies, member_entry=member_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_secpolicy_defined_policy_get(self, rbridge_id=None, policies=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies', u'member-entry'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies', u'member-entry'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies', u'member-entry')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_secpolicy_defined_policy_member_entry_get(self, rbridge_id=None, policies=None, member_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    **Instance Keyword Argument Tuple**:

    :type member_entry: member
    :param member_entry: Keyword argument tuple.

    :type member: unicode
    :param member: **member_entry** tuple argument:  WWN of the switch

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policies=policies, member_entry=member_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_snmp_server_user_get(self, rbridge_id=None, user=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type user: username, groupname, auth, auth_password, priv, priv_password, encrypted
    :param user: Keyword argument tuple.

    :type username: unicode
    :param username: **user** tuple argument.

        * length restriction: ::

            ['1 .. 25']

    :type groupname: unicode
    :param groupname: **user** tuple argument.

    :type auth: unicode
    :param auth: **user** tuple argument:  Authorization protocol for username(Default=noauth)

        * enumeration restriction: ::

            ['sha', 'noauth', 'md5']

    :type auth_password: unicode
    :param auth_password: **user** tuple argument:  Authorization password associated withusername

    :type priv: unicode
    :param priv: **user** tuple argument:  Privacy protocol for username (Default=nopriv)

        * enumeration restriction: ::

            ['AES128', 'DES', 'nopriv']

    :type priv_password: unicode
    :param priv_password: **user** tuple argument:  Privacy password associated with username

    :type encrypted: YANGBool
    :param encrypted: **user** tuple argument:  This flag is used to enter the auth/privpasswords as encrypted.(Default=disable)

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.snmp_server.user', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server.user', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server.user', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'user', 'keyval': 'username', 'extra_keyval': 'username, groupname, auth, auth_password, priv, priv_password, encrypted'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, user=user)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_snmp_server_v3host_get(self, rbridge_id=None, v3host=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type v3host: hostip, username
    :param v3host: Keyword argument tuple.

    :type hostip: unicode
    :param hostip: **v3host** tuple argument:  ipv4/ipv6/dns address of the notification recipientassociated with username. Notificationswill be sent to this host

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type username: unicode
    :param username: **v3host** tuple argument:  Username associated with notification type.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.snmp_server.v3host', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.snmp_server.v3host', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.snmp_server.v3host', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'v3host', 'keyval': 'hostip, username', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, v3host=v3host)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_ssh_server_use_vrf_get(self, rbridge_id=None, use_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type use_vrf: use_vrf_name, ssh_vrf_shutdown
    :param use_vrf: Keyword argument tuple.

    :type use_vrf_name: unicode
    :param use_vrf_name: **use_vrf** tuple argument.

        * length restriction: ::

            ['0 .. max']

    :type ssh_vrf_shutdown: YANGBool
    :param ssh_vrf_shutdown: **use_vrf** tuple argument:  Shutdown SSH server on given vrf

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, ssh_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, use_vrf=use_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_telnet_server_use_vrf_get(self, rbridge_id=None, use_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type use_vrf: use_vrf_name, telnet_vrf_shutdown
    :param use_vrf: Keyword argument tuple.

    :type use_vrf_name: unicode
    :param use_vrf_name: **use_vrf** tuple argument.

        * length restriction: ::

            ['0 .. max']

    :type telnet_vrf_shutdown: YANGBool
    :param telnet_vrf_shutdown: **use_vrf** tuple argument:  Shutdown telnet server on given vrf

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, telnet_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, use_vrf=use_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_threshold_monitor_interface_policy_get(self, rbridge_id=None, policy=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type policy: policy_name
    :param policy: Keyword argument tuple.

    :type policy_name: unicode
    :param policy_name: **policy** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type area: type, area_value
    :param area: Keyword argument tuple.

    :type type: unicode
    :param type: **area** tuple argument:  Interface types that can be configured independent of speed

        * enumeration restriction: ::

            ['Ethernet']

    :type area_value: unicode
    :param area_value: **area** tuple argument.

        * enumeration restriction: ::

            ['MissingTerminationCharacter',
            'CRCAlignErrors',
            'IFG',
            'SymbolErrors']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy.area', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy.area.alert', u'above'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.interface.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.interface.policy.area.alert', u'above')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_threshold_monitor_security_policy_get(self, rbridge_id=None, policy=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type policy: sec_policy_name
    :param policy: Keyword argument tuple.

    :type sec_policy_name: unicode
    :param sec_policy_name: **policy** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type area: sec_area_value
    :param area: Keyword argument tuple.

    :type sec_area_value: unicode
    :param sec_area_value: **area** tuple argument:  Security Areas

        * enumeration restriction: ::

            ['telnet-violation', 'login-violation']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy.area', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.security.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.security.policy.area', u'threshold'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.security.policy.area', u'threshold')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'sec_area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_threshold_monitor_sfp_policy_get(self, rbridge_id=None, policy=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type policy: policy_name
    :param policy: Keyword argument tuple.

    :type policy_name: unicode
    :param policy_name: **policy** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type area: type, area_value
    :param area: Keyword argument tuple.

    :type type: unicode
    :param type: **area** tuple argument:  SFP types that can be configured

        * enumeration restriction: ::

            ['10GLR',
            '1GLR',
            '100GSR',
            '10GUSR',
            '1GSR',
            '10GSR',
            'QSFP']

    :type area_value: unicode
    :param area_value: **area** tuple argument.

        * enumeration restriction: ::

            ['Current',
            'RXP',
            'TXP',
            'Voltage',
            'Temperature']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy', u'policy'), ('pybind.slxos.v16r_1_00b.rbridge_id', 'rbridge_id'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy.area', 'pybind.slxos.v16r_1_00b.brocade_rbridge', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'above'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.rbridge_id.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v6_0_2b.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.slxos.v16r_1_00b.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.nos.v7_0_1a.rbridge_id.threshold_monitor.sfp.policy.area.alert', u'above')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, policy=policy, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_get(self, rbridge_id=None, vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6', u'unicast'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-oif'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast', u'route-target'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast', u'arp-entry'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip', u'unicast'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.import_', u'routes'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-nh'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-oif-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd', u'bfd-static-route'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_', u'routes'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast', u'route-target'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-oif'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'route-target'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-nh-vrf'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'ip'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'ip'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast', u'export'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast', u'arp-entry'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast', u'import'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-oif'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd', u'bfd-static-route'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_', u'routes'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-oif'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.import_', u'routes'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-nh'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-oif-vrf'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast', u'import'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast', u'route-target'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast', u'export'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast', u'route-target'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-nh-vrf'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip', u'unicast'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'route-target'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6', u'unicast'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_', u'routes'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6', u'unicast'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'ip'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast', u'arp-entry'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd', u'bfd-static-route'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip', u'unicast'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.import_', u'routes'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-nh'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'route-target'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-oif'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-nh-vrf'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-oif'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route', u'static-route-oif-vrf')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vrf', 'keyval': 'vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_arp_get(self, rbridge_id=None, vrf=None, arp_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type arp_entry: arp_ip_address, mac_address_value, interfacename, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve
    :param arp_entry: Keyword argument tuple.

    :type arp_ip_address: unicode
    :param arp_ip_address: **arp_entry** tuple argument:  A.B.C.D;; IP address of the ARP entry

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mac_address_value: unicode
    :param mac_address_value: **arp_entry** tuple argument.

    :type interfacename: unicode
    :param interfacename: **arp_entry** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type GigabitEthernet: unicode
    :param GigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type TenGigabitEthernet: unicode
    :param TenGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type FortyGigabitEthernet: unicode
    :param FortyGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type HundredGigabitEthernet: unicode
    :param HundredGigabitEthernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?('
            '([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0'
            '-9])(:[1-4])?)'

    :type Ve: long
    :param Ve: **arp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.arp_entry', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.arp_entry', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.arp_entry', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Port_channel, GigabitEthernet, TenGigabitEthernet, FortyGigabitEthernet, HundredGigabitEthernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, arp_entry=arp_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_ip_import_routes_get(self, rbridge_id=None, vrf=None, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_ip_route_get(self, rbridge_id=None, vrf=None, static_route_nh_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type static_route_nh_vrf: static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop
    :param static_route_nh_vrf: Keyword argument tuple.

    :type static_route_next_vrf_dest: unicode
    :param static_route_next_vrf_dest: **static_route_nh_vrf** tuple argument:  A.B.C.D/L ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type next_hop_vrf: unicode
    :param next_hop_vrf: **static_route_nh_vrf** tuple argument:  Next Hop Vrf Name

    :type static_route_next_hop: unicode
    :param static_route_next_hop: **static_route_nh_vrf** tuple argument:  A.B.C.D ;; Next hop IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_nh_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_ip_route_static_bfd_get(self, rbridge_id=None, vrf=None, bfd_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type bfd_static_route: bfd_static_route_dest, bfd_static_route_src
    :param bfd_static_route: Keyword argument tuple.

    :type bfd_static_route_dest: unicode
    :param bfd_static_route_dest: **bfd_static_route** tuple argument:  A.B.C.D ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type bfd_static_route_src: unicode
    :param bfd_static_route_src: **bfd_static_route** tuple argument:  A.B.C.D ;; Source IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', u'bfd-interval-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', u'bfd-interval-attributes')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, bfd_static_route=bfd_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv4_unicast_route_target_get(self, rbridge_id=None, vrf=None, route_target=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type route_target: action, target_community
    :param route_target: Keyword argument tuple.

    :type action: unicode
    :param action: **route_target** tuple argument.

        * enumeration restriction: ::

            ['import', 'export', 'both']

    :type target_community: unicode
    :param target_community: **route_target** tuple argument:  ASN:nn;; Target VPN Extended Community

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ip.unicast.route_target', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ip.unicast.route_target', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, route_target=route_target)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_import_routes_get(self, rbridge_id=None, vrf=None, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_get(self, rbridge_id=None, vrf=None, ipv6_static_route_oif_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type ipv6_static_route_oif_vrf: static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name
    :param ipv6_static_route_oif_vrf: Keyword argument tuple.

    :type static_route_next_vrf_dest: unicode
    :param static_route_next_vrf_dest: **ipv6_static_route_oif_vrf** tuple argument:  A:B::C:D/LEN ;; Destination IPv6 Prefix

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type next_hop_vrf: unicode
    :param next_hop_vrf: **ipv6_static_route_oif_vrf** tuple argument:  Next Hop Vrf Name

    :type static_route_oif_type: unicode
    :param static_route_oif_type: **ipv6_static_route_oif_vrf** tuple argument:  Outgoing interface type

        * enumeration restriction: ::

            ['fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            've']

    :type static_route_oif_name: unicode
    :param static_route_oif_name: **ipv6_static_route_oif_vrf** tuple argument.

        * length restriction: ::

            ['1..16']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', u'route-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', u'route-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', u'route-attributes')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_nh_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, ipv6_static_route_oif_vrf=ipv6_static_route_oif_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_bfd_get(self, rbridge_id=None, vrf=None, bfd_ipv6_link_local_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type bfd_ipv6_link_local_static_route: bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name
    :param bfd_ipv6_link_local_static_route: Keyword argument tuple.

    :type bfd_ipv6_link_local_dest: unicode
    :param bfd_ipv6_link_local_dest: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Destination IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_ipv6_link_local_src: unicode
    :param bfd_ipv6_link_local_src: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Source IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_interface_type: unicode
    :param bfd_interface_type: **bfd_ipv6_link_local_static_route** tuple argument:  Outgoing interface type

        * enumeration restriction: ::

            ['ve',
            'fortygigabitethernet',
            'gigabitethernet',
            'tengigabitethernet',
            'hundredgigabitethernet',
            'null']

    :type bfd_interface_name: unicode
    :param bfd_interface_name: **bfd_ipv6_link_local_static_route** tuple argument.

        * length restriction: ::

            ['1..16']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v6_0_2b.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes')]
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_link_local_static_route', 'keyval': 'bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_address_family_ipv6_unicast_route_target_get(self, rbridge_id=None, vrf=None, route_target=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type route_target: action, target_community
    :param route_target: Keyword argument tuple.

    :type action: unicode
    :param action: **route_target** tuple argument.

        * enumeration restriction: ::

            ['import', 'export', 'both']

    :type target_community: unicode
    :param target_community: **route_target** tuple argument:  ASN:nn;; Target VPN Extended Community

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v7_0_1a.rbridge_id.vrf.address_family.ipv6.unicast.route_target', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.address_family.ipv6.unicast.route_target', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, route_target=route_target)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rbridge_id_vrf_route_target_get(self, rbridge_id=None, vrf=None, route_target=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: long
    :param rbridge_id: **rbridge_id** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type route_target: action, target_community
    :param route_target: Keyword argument tuple.

    :type action: unicode
    :param action: **route_target** tuple argument.

        * enumeration restriction: ::

            ['import', 'export', 'both']

    :type target_community: unicode
    :param target_community: **route_target** tuple argument:  ASN:nn;; Target VPN Extended Community

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.rbridge_id', 'rbridge_id'), ('pybind.nos.v6_0_2b.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_0_1a.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_0_1a.rbridge_id.vrf', u'vrf'), ('pybind.nos.v7_1_0.rbridge_id', 'rbridge_id'), ('pybind.nos.v7_1_0.rbridge_id.vrf', u'vrf')]
    bindings_list = [('pybind.nos.v6_0_2b.rbridge_id.vrf.route_target', 'pybind.nos.v6_0_2b.brocade_rbridge', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rbridge_id.vrf.route_target', 'pybind.nos.v7_0_1a.brocade_rbridge', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rbridge_id.vrf.route_target', 'pybind.nos.v7_1_0.brocade_rbridge', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}, {'keyval': 'rbridge_id', 'extra_keyval': ''}, {'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id, vrf=vrf, route_target=route_target)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rmon_alarm_get(self, alarm_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type alarm_entry: alarm_index, snmp_oid, alarm_interval, alarm_sample, alarm_rising_threshold, alarm_rising_event_index, alarm_falling_threshold, alarm_falling_event_index, alarm_owner
    :param alarm_entry: Keyword argument tuple.

    :type alarm_index: long
    :param alarm_index: **alarm_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type snmp_oid: unicode
    :param snmp_oid: **alarm_entry** tuple argument.

        * length restriction: ::

            ['min .. 35']

    :type alarm_interval: long
    :param alarm_interval: **alarm_entry** tuple argument:  Alarm sample interval

        * range restriction: ::

            ['0..4294967295']

    :type alarm_sample: unicode
    :param alarm_sample: **alarm_entry** tuple argument.

        * enumeration restriction: ::

            ['absolute', 'delta']

    :type alarm_rising_threshold: long
    :param alarm_rising_threshold: **alarm_entry** tuple argument:  Alarm rising threshold

        * range restriction: ::

            ['0..4294967295']

    :type alarm_rising_event_index: long
    :param alarm_rising_event_index: **alarm_entry** tuple argument:  Event for rising alarm

        * range restriction: ::

            ['-2147483648..2147483647']

    :type alarm_falling_threshold: long
    :param alarm_falling_threshold: **alarm_entry** tuple argument:  Alarm falling threshold

        * range restriction: ::

            ['0..4294967295']

    :type alarm_falling_event_index: long
    :param alarm_falling_event_index: **alarm_entry** tuple argument:  Event for falling alarm

        * range restriction: ::

            ['-2147483648..2147483647']

    :type alarm_owner: unicode
    :param alarm_owner: **alarm_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rmon.alarm_entry', 'pybind.nos.v6_0_2b.brocade_rmon', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rmon.alarm_entry', 'pybind.nos.v7_0_1a.brocade_rmon', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rmon.alarm_entry', 'pybind.nos.v7_1_0.brocade_rmon', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rmon.alarm_entry', 'pybind.slxos.v16r_1_00b.brocade_rmon', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'alarm_entry', 'keyval': 'alarm_index', 'extra_keyval': 'alarm_index, snmp_oid, alarm_interval, alarm_sample, alarm_rising_threshold, alarm_rising_event_index, alarm_falling_threshold, alarm_falling_event_index, alarm_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alarm_entry=alarm_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rmon_event_get(self, event_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type event_entry: event_index, event_description, log, event_community, event_owner
    :param event_entry: Keyword argument tuple.

    :type event_index: long
    :param event_index: **event_entry** tuple argument.

        * range restriction: ::

            ['-2147483648..2147483647']

    :type event_description: unicode
    :param event_description: **event_entry** tuple argument:  Event description

        * length restriction: ::

            ['min .. 127']

    :type log: YANGBool
    :param log: **event_entry** tuple argument:  Log the event

    :type event_community: unicode
    :param event_community: **event_entry** tuple argument:  Send trap for the event

        * length restriction: ::

            ['1 .. 127']

    :type event_owner: unicode
    :param event_owner: **event_entry** tuple argument:  Owner identity

        * length restriction: ::

            ['1 .. 15']

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,14})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rmon.event_entry', 'pybind.nos.v6_0_2b.brocade_rmon', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rmon.event_entry', 'pybind.nos.v7_0_1a.brocade_rmon', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rmon.event_entry', 'pybind.nos.v7_1_0.brocade_rmon', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rmon.event_entry', 'pybind.slxos.v16r_1_00b.brocade_rmon', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'event_entry', 'keyval': 'event_index', 'extra_keyval': 'event_index, event_description, log, event_community, event_owner'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, event_entry=event_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def role_name_get(self, name=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type name: name, desc
    :param name: Keyword argument tuple.

    :type name: unicode
    :param name: **name** tuple argument.

        * length restriction: ::

            ['4 .. 32']

    :type desc: unicode
    :param desc: **name** tuple argument:  Description of the role (default='')

        * length restriction: ::

            ['0 .. 64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.role.name', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.role.name', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.role.name', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.role.name', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'name', 'keyval': 'name', 'extra_keyval': 'name, desc'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, name=name)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def route_map_get(self, route_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip', u'interface'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'distance'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.extcommunity', u'rt'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'route-type'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.ip', u'route-source'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'metric'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'comm-list'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.ip', u'address'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match', u'as-path'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match', u'extcommunity'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'tag'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match', u'metric'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'origin'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip', u'dscp'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.ip', u'next-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'weight'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.next_ip', u'next-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'local-preference'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'automatic-tag'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match', u'route-type'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.ipv6', u'address'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'as-path'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip', u'next-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'metric-type'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match', u'community'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'community'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match', u'next-hop'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content', u'match'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.ipv6', u'route-source'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.extcommunity', u'soo'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6', u'interface'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content', u'continue-holder'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_', u'dampening'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.match.ipv6', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match', u'extcommunity'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'comm-list'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip', u'dscp'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content', u'continue-holder'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'tag'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'automatic-tag'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match', u'metric'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'community'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.extcommunity', u'soo'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'route-type'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.ip', u'address'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.ipv6', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'dampening'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.ip', u'route-source'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.ipv6', u'route-source'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match', u'route-type'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.next_ip', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match', u'as-path'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'metric'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6', u'interface'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.ip', u'next-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'metric-type'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'distance'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'origin'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip', u'interface'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'weight'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.extcommunity', u'rt'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match.ipv6', u'address'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'local-preference'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.match', u'community'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_', u'as-path'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6', u'interface'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.ip', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'distance'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content', u'continue-holder'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match', u'extcommunity'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match', u'community'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'local-preference'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'community'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'tag'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'metric-type'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.ipv6', u'route-source'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'as-path'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'route-type'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match', u'as-path'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.ip', u'route-source'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.ip', u'next-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.next_hop', u'next-hop-list'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'comm-list'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip', u'next-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'metric'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip', u'dscp'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip', u'interface'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'origin'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match', u'next-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.ipv6', u'next-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'dampening'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match', u'metric'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.ipv6', u'address'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'weight'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_', u'automatic-tag'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match', u'route-type'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.extcommunity', u'rt'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.extcommunity', u'soo'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match', u'metric'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'origin'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'as-path'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.global_', u'next-global-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'comm-list'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.ipv6', u'next-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.global_', u'next-global-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'metric'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.next_ip', u'next-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match', u'extcommunity'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.ip', u'next-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.extcommunity', u'rt'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.next_ip', u'next-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match', u'route-type'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match', u'as-path'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'weight'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content', u'match'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'local-preference'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match', u'community'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6', u'interface'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.ipv6', u'route-source'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'metric-type'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip', u'next-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'community'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'dampening'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match', u'next-hop'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.extcommunity', u'soo'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip', u'dscp'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'automatic-tag'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.protocol', u'protocol-static-container'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'tag'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content', u'continue-holder'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'distance'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.protocol', u'bgp-protocol-container'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.ip', u'address'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_', u'route-type'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.ip', u'route-source'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.next_vrf', u'next-vrf-list'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.match.ipv6', u'address'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip', u'interface')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'route_map', 'keyval': 'name, action_rm, instance', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def route_map_set_ip_get(self, route_map=None, next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_hop: next_hop
    :param next_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_hop** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.next_vrf.next_vrf_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_hop=next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def route_map_set_ip_global_get(self, route_map=None, next_global_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_global_hop: next_hop
    :param next_global_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_global_hop** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ip.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.global_.next_global_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def route_map_set_ip_next_hop_get(self, route_map=None, next_hop_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_hop_list: next_hop_addr
    :param next_hop_list: Keyword argument tuple.

    :type next_hop_addr: unicode
    :param next_hop_addr: **next_hop_list** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ip.next_hop.next_hop_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_hop_list', 'keyval': 'next_hop_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_hop_list=next_hop_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def route_map_set_ipv6_get(self, route_map=None, next_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_hop: next_hop
    :param next_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_hop** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.next_ip.next_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.next_vrf.next_vrf_list', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_vrf_list', 'keyval': 'vrf, next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_hop=next_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def route_map_set_ipv6_global_get(self, route_map=None, next_global_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type route_map: name, action_rm, instance
    :param route_map: Keyword argument tuple.

    :type name: unicode
    :param name: **route_map** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type action_rm: unicode
    :param action_rm: **route_map** tuple argument.

        * enumeration restriction: ::

            ['deny', 'permit']

    :type instance: int
    :param instance: **route_map** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type next_global_hop: next_hop
    :param next_global_hop: Keyword argument tuple.

    :type next_hop: unicode
    :param next_hop: **next_global_hop** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map', u'route_map'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map', u'route_map'), ('pybind.slxos.v16r_1_00b.routing_system.route_map', u'route_map'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map', u'route_map')]
    bindings_list = [('pybind.nos.v6_0_2b.hide_routemap_holder.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v6_0_2b.brocade_ip_policy', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.hide_routemap_holder.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_0_1a.brocade_ip_policy', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.hide_routemap_holder.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.nos.v7_1_0.brocade_ip_policy', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.routing_system.route_map.content.set_.ipv6.global_.next_global_hop', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}, {'keyval': 'name, action_rm, instance', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'next_global_hop', 'keyval': 'next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, route_map=route_map, next_global_hop=next_global_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_evpn_neighbor_get(self, af_evpn_neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type af_evpn_neighbor: af_evpn_neighbor_address
    :param af_evpn_neighbor: Keyword argument tuple.

    :type af_evpn_neighbor_address: unicode
    :param af_evpn_neighbor_address: **af_evpn_neighbor** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.evpn.af_evpn_neighbor_address_holder.af_evpn_neighbor', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_evpn_neighbor', 'keyval': 'af_evpn_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_evpn_neighbor=af_evpn_neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_aggregate_address_get(self, aggregate_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type aggregate_address: aggregate_ip_prefix
    :param aggregate_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.aggregate_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, aggregate_address=aggregate_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_neighbor_get(self, af_ipv4_neighbor_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type af_ipv4_neighbor_address: af_ipv4_neighbor_address
    :param af_ipv4_neighbor_address: Keyword argument tuple.

    :type af_ipv4_neighbor_address: unicode
    :param af_ipv4_neighbor_address: **af_ipv4_neighbor_address** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'unsuppress-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'maximum-prefix'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'default-originate'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_peergroup_holder.af_ipv4_neighbor_peergroup', u'send-community'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'unsuppress-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.prefix_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'send-community'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.filter_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'default-originate'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address', u'maximum-prefix'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.neighbor.af_ipv4_neighbor_address_holder.af_ipv4_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_address', 'keyval': 'af_ipv4_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv4_neighbor_address=af_ipv4_neighbor_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_network_get(self, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv4_address
    :param network: Keyword argument tuple.

    :type network_ipv4_address: unicode
    :param network_ipv4_address: **network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_static_network_get(self, static_network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type static_network: static_network_address
    :param static_network: Keyword argument tuple.

    :type static_network_address: unicode
    :param static_network_address: **static_network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.static_network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, static_network=static_network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_get(self, af_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'static-network'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'table-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.maxas_limit', u'in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.dampening', u'values'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'dampening'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'multipath'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'network'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af-ipv4-uc-and-vrf-cmds-call-point-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder', u'af-ipv4-neighbor-addr'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'maximum-paths'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'aggregate-address')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_vrf', 'keyval': 'af_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_aggregate_address_get(self, af_vrf=None, aggregate_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type aggregate_address: aggregate_ip_prefix
    :param aggregate_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.aggregate_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, aggregate_address=aggregate_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_neighbor_get(self, af_vrf=None, af_ipv4_neighbor_addr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type af_ipv4_neighbor_addr: af_ipv4_neighbor_address
    :param af_ipv4_neighbor_addr: Keyword argument tuple.

    :type af_ipv4_neighbor_address: unicode
    :param af_ipv4_neighbor_address: **af_ipv4_neighbor_addr** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'maximum-prefix'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'update-source'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'advertisement-interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'shutdown'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'enforce-first-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'unsuppress-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'local-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'send-community'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'default-originate'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'next-hop-self'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.filter_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'ebgp-multihop'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.maxas_limit', u'in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr', u'soft-reconfiguration'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.neighbor.af_ipv4_vrf_neighbor_address_holder.af_ipv4_neighbor_addr.prefix_list', u'direction-out')]
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv4_neighbor_addr', 'keyval': 'af_ipv4_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, af_ipv4_neighbor_addr=af_ipv4_neighbor_addr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_network_get(self, af_vrf=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv4_address
    :param network: Keyword argument tuple.

    :type network_ipv4_address: unicode
    :param network_ipv4_address: **network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv4_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv4_unicast_vrf_static_network_get(self, af_vrf=None, static_network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_vrf: af_vrf_name
    :param af_vrf: Keyword argument tuple.

    :type af_vrf_name: unicode
    :param af_vrf_name: **af_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type static_network: static_network_address
    :param static_network: Keyword argument tuple.

    :type static_network_address: unicode
    :param static_network_address: **static_network** tuple argument:  A.B.C.D/M IP address in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf', u'af_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.af_vrf.static_network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_network', 'keyval': 'static_network_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_vrf=af_vrf, static_network=static_network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_aggregate_address_get(self, aggregate_ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type aggregate_ipv6_address: aggregate_ip_prefix
    :param aggregate_ipv6_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_ipv6_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.aggregate_ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_neighbor_get(self, af_ipv6_neighbor_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type af_ipv6_neighbor_address: af_ipv6_neighbor_address
    :param af_ipv6_neighbor_address: Keyword argument tuple.

    :type af_ipv6_neighbor_address: unicode
    :param af_ipv6_neighbor_address: **af_ipv6_neighbor_address** tuple argument:  A:B::C:D;;Neighbor IPV6 Address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'send-community'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.af_neighbor_capability.orf', u'prefixlist'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'unsuppress-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.maximum_prefix', u'threshold-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.filter_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'default-originate'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address', u'maximum-prefix'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_address_holder.af_ipv6_neighbor_address.prefix_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.af_neighbor_capability.orf', u'prefixlist'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'unsuppress-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'maximum-prefix'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.maximum_prefix', u'threshold-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'send-community'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup.filter_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.neighbor.af_ipv6_neighbor_peergroup_holder.af_ipv6_neighbor_peergroup', u'default-originate')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_peergroup', 'keyval': 'af_ipv6_neighbor_peergroup_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_neighbor_address=af_ipv6_neighbor_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_network_get(self, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv6_address
    :param network: Keyword argument tuple.

    :type network_ipv6_address: unicode
    :param network_ipv6_address: **network** tuple argument:  A:B::C:D/M IPV6 address in dotted decimal/Mask

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_get(self, af_ipv6_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'aggregate-ipv6-address'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'table-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af-ipv6-uc-and-vrf-cmds-call-point-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'network'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder', u'af-ipv6-neighbor-addr'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'dampening'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'bgp'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'connected'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'static'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'multipath'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.dampening', u'values'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'maximum-paths')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_vrf', 'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_aggregate_address_get(self, af_ipv6_vrf=None, aggregate_ipv6_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type aggregate_ipv6_address: aggregate_ip_prefix
    :param aggregate_ipv6_address: Keyword argument tuple.

    :type aggregate_ip_prefix: unicode
    :param aggregate_ip_prefix: **aggregate_ipv6_address** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.aggregate_ipv6_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'aggregate_ipv6_address', 'keyval': 'aggregate_ip_prefix', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf, aggregate_ipv6_address=aggregate_ipv6_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_neighbor_get(self, af_ipv6_vrf=None, af_ipv6_neighbor_addr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type af_ipv6_neighbor_addr: af_ipv6_neighbor_address
    :param af_ipv6_neighbor_addr: Keyword argument tuple.

    :type af_ipv6_neighbor_address: unicode
    :param af_ipv6_neighbor_address: **af_ipv6_neighbor_addr** tuple argument:  A:B::C:D;;Neighbor Ipv6 Address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'unsuppress-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.update_source', u'ethernet-interface'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'advertisement-interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.prefix_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'update-source'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maxas_limit', u'in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'send-community'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'next-hop-self'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability.orf', u'prefixlist'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.af_vrf_neighbor_capability', u'as4'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'local-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.maximum_prefix', u'threshold-holder'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'shutdown'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'soft-reconfiguration'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'enforce-first-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.filter_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'default-originate'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr.neighbor_route_map', u'neighbor-route-map-direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'maximum-prefix'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.neighbor.af_ipv6_vrf_neighbor_address_holder.af_ipv6_neighbor_addr', u'ebgp-multihop')]
    compositions_keyval_list = [{'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'af_ipv6_neighbor_addr', 'keyval': 'af_ipv6_neighbor_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf, af_ipv6_neighbor_addr=af_ipv6_neighbor_addr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_address_family_ipv6_unicast_vrf_network_get(self, af_ipv6_vrf=None, network=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type af_ipv6_vrf: af_ipv6_vrf_name
    :param af_ipv6_vrf: Keyword argument tuple.

    :type af_ipv6_vrf_name: unicode
    :param af_ipv6_vrf_name: **af_ipv6_vrf** tuple argument:  VRF name

        * length restriction: ::

            ['1..255']

    **Instance Keyword Argument Tuple**:

    :type network: network_ipv6_address
    :param network: Keyword argument tuple.

    :type network_ipv6_address: unicode
    :param network_ipv6_address: **network** tuple argument:  A:B::C:D/M IPV6 address in dotted decimal/Mask

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf', u'af_ipv6_vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.af_ipv6_vrf.network', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'af_ipv6_vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'network', 'keyval': 'network_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, af_ipv6_vrf=af_ipv6_vrf, network=network)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_bgp_neighbor_get(self, neighbor_addr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type neighbor_addr: router_bgp_neighbor_address
    :param neighbor_addr: Keyword argument tuple.

    :type router_bgp_neighbor_address: unicode
    :param router_bgp_neighbor_address: **neighbor_addr** tuple argument:  A.B.C.D;;Neighbor Address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'update-source'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'local-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.af_neighbor_capability', u'as4'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'shutdown'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'advertisement-interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.update_source', u'ethernet-interface'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'ebgp-multihop'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'enforce-first-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'next-hop-self'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp', u'soft-reconfiguration'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.peer_grps.neighbor_peer_grp.maxas_limit', u'in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.maxas_limit', u'in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'ebgp-multihop'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'shutdown'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'update-source'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'next-hop-self'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.update_source', u'ethernet-interface'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.af_neighbor_capability', u'as4'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'local-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'advertisement-interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'soft-reconfiguration'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ips.neighbor_addr', u'enforce-first-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'soft-reconfiguration'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.maxas_limit', u'in'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'ebgp-multihop'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'next-hop-self'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'advertisement-interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'bfd'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.bfd', u'interval'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.update_source', u'ethernet-interface'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'update-source'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'enforce-first-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'local-as'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr.af_neighbor_capability', u'as4'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.router_bgp_attributes.neighbor.neighbor_ipv6s.neighbor_ipv6_addr', u'shutdown')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'neighbor_ipv6_addr', 'keyval': 'router_bgp_neighbor_ipv6_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, neighbor_addr=neighbor_addr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_isis_address_family_ipv4_unicast_summary_address_get(self, summary_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type summary_address: summary_ip, summary_ip_mask, summary_ip_level1, summary_ip_level2
    :param summary_address: Keyword argument tuple.

    :type summary_ip: unicode
    :param summary_ip: **summary_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type summary_ip_mask: unicode
    :param summary_ip_mask: **summary_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type summary_ip_level1: YANGBool
    :param summary_ip_level1: **summary_address** tuple argument:  For Level-1

    :type summary_ip_level2: YANGBool
    :param summary_ip_level2: **summary_address** tuple argument:  For Level-2

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv4.af_ipv4_unicast.af_ipv4_attributes.summary_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'summary_ip, summary_ip_mask', 'extra_keyval': 'summary_ip, summary_ip_mask, summary_ip_level1, summary_ip_level2'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_address=summary_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_isis_address_family_ipv6_unicast_spf_interval_get(self, spf6_interval=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type spf6_interval: spf6_interval_level, spf6_interval_max_hold_time, spf6_interval_initial_delay, spf6_interval_hold_time
    :param spf6_interval: Keyword argument tuple.

    :type spf6_interval_level: unicode
    :param spf6_interval_level: **spf6_interval** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type spf6_interval_max_hold_time: long
    :param spf6_interval_max_hold_time: **spf6_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type spf6_interval_initial_delay: long
    :param spf6_interval_initial_delay: **spf6_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type spf6_interval_hold_time: long
    :param spf6_interval_hold_time: **spf6_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.spf6_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'spf6_interval', 'keyval': 'spf6_interval_level', 'extra_keyval': 'spf6_interval_level, spf6_interval_max_hold_time, spf6_interval_initial_delay, spf6_interval_hold_time'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf6_interval=spf6_interval)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_isis_address_family_ipv6_unicast_summary_prefix_get(self, summary_prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type summary_prefix: summary_prefix_ipv6
    :param summary_prefix: Keyword argument tuple.

    :type summary_prefix_ipv6: unicode
    :param summary_prefix_ipv6: **summary_prefix** tuple argument.

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.summary_prefix', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'summary_prefix', 'keyval': 'summary_prefix_ipv6', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, summary_prefix=summary_prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_isis_net_get(self, net=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type net: net_cmd
    :param net: Keyword argument tuple.

    :type net_cmd: unicode
    :param net_cmd: **net** tuple argument.

        * pattern restriction: ::

            '([0-9a-fA-F]{2}((\.[0-9a-fA-F]{4}){3,9})\.00)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.net', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'net', 'keyval': 'net_cmd', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, net=net)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_isis_spf_interval_get(self, spf_interval=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type spf_interval: spf_interval_level, spf_interval_max_hold_time, spf_interval_initial_delay, spf_interval_hold_time
    :param spf_interval: Keyword argument tuple.

    :type spf_interval_level: unicode
    :param spf_interval_level: **spf_interval** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1']

    :type spf_interval_max_hold_time: long
    :param spf_interval_max_hold_time: **spf_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type spf_interval_initial_delay: long
    :param spf_interval_initial_delay: **spf_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type spf_interval_hold_time: long
    :param spf_interval_hold_time: **spf_interval** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.router_isis_attributes.spf_interval', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'spf_interval', 'keyval': 'spf_interval_level', 'extra_keyval': 'spf_interval_level, spf_interval_max_hold_time, spf_interval_initial_delay, spf_interval_hold_time'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_interval=spf_interval)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_autobw_template_get(self, autobw_template=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type autobw_template: autobw_template_name
    :param autobw_template: Keyword argument tuple.

    :type autobw_template_name: unicode
    :param autobw_template_name: **autobw_template** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.autobw_template', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'autobw_template', 'keyval': 'autobw_template_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, autobw_template=autobw_template)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_autobw_threshold_table_bandwidth_get(self, autobw_threshold_table_bandwidth=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type autobw_threshold_table_bandwidth: bandwidth_value, autobw_threshold_table_threshold
    :param autobw_threshold_table_bandwidth: Keyword argument tuple.

    :type bandwidth_value: long
    :param bandwidth_value: **autobw_threshold_table_bandwidth** tuple argument:  DECIMAL;;Bandwidth upto which threshold will apply

        * range restriction: ::

            ['0..4294967295']

    :type autobw_threshold_table_threshold: long
    :param autobw_threshold_table_threshold: **autobw_threshold_table_bandwidth** tuple argument:  DECIMAL;;Absolute threshold value for the bandwidth

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.autobw_threshold_table.autobw_threshold_table_bandwidth', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'autobw_threshold_table_bandwidth', 'keyval': 'bandwidth_value', 'extra_keyval': 'bandwidth_value, autobw_threshold_table_threshold'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, autobw_threshold_table_bandwidth=autobw_threshold_table_bandwidth)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_bypass_lsp_get(self, bypass_lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bypass_lsp: bypass_lsp_name
    :param bypass_lsp: Keyword argument tuple.

    :type bypass_lsp_name: unicode
    :param bypass_lsp_name: **bypass_lsp** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', u'exclude-interface'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', u'lsp-traffic-engineering'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', u'priority')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bypass_lsp', 'keyval': 'bypass_lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bypass_lsp=bypass_lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_bypass_lsp_exclude_interface_get(self, bypass_lsp=None, exclude_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bypass_lsp: bypass_lsp_name
    :param bypass_lsp: Keyword argument tuple.

    :type bypass_lsp_name: unicode
    :param bypass_lsp_name: **bypass_lsp** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type exclude_interface: bypass_exclude_interface_type, bypass_exclude_interface_name
    :param exclude_interface: Keyword argument tuple.

    :type bypass_exclude_interface_type: unicode
    :param bypass_exclude_interface_type: **exclude_interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 've']

    :type bypass_exclude_interface_name: unicode
    :param bypass_exclude_interface_name: **exclude_interface** tuple argument:  The Interface value.

        * length restriction: ::

            ['1..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6])/([1-9]|[1-9][0-9]|[1-9][0-9]['
            '0-9])(:[1-4])?)|([0-9]([0-9])?([0-9])?([0-9])?))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp', u'bypass_lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.bypass_lsp.exclude_interface', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bypass_lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'exclude_interface', 'keyval': 'bypass_exclude_interface_type, bypass_exclude_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bypass_lsp=bypass_lsp, exclude_interface=exclude_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_cspf_group_get(self, cspf_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cspf_group: cspf_group_name
    :param cspf_group: Keyword argument tuple.

    :type cspf_group_name: unicode
    :param cspf_group_name: **cspf_group** tuple argument:  ASCII string;;Name (up to 128 characters)

        * length restriction: ::

            ['1..128']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf-group-subnet'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf-group-node'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf-group-penalty-n'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf-group-ip'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf-group-link')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cspf_group', 'keyval': 'cspf_group_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_cspf_group_from_get(self, cspf_group=None, cspf_group_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cspf_group: cspf_group_name
    :param cspf_group: Keyword argument tuple.

    :type cspf_group_name: unicode
    :param cspf_group_name: **cspf_group** tuple argument:  ASCII string;;Name (up to 128 characters)

        * length restriction: ::

            ['1..128']

    **Instance Keyword Argument Tuple**:

    :type cspf_group_ip: cspf_group_ip_address
    :param cspf_group_ip: Keyword argument tuple.

    :type cspf_group_ip_address: unicode
    :param cspf_group_ip_address: **cspf_group_ip** tuple argument:  A.B.C.D;;ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_ip', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_ip', 'keyval': 'cspf_group_ip_address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_ip=cspf_group_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_cspf_group_link_get(self, cspf_group=None, cspf_group_link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cspf_group: cspf_group_name
    :param cspf_group: Keyword argument tuple.

    :type cspf_group_name: unicode
    :param cspf_group_name: **cspf_group** tuple argument:  ASCII string;;Name (up to 128 characters)

        * length restriction: ::

            ['1..128']

    **Instance Keyword Argument Tuple**:

    :type cspf_group_link: cspf_group_link_from, cspf_group_link_to
    :param cspf_group_link: Keyword argument tuple.

    :type cspf_group_link_from: unicode
    :param cspf_group_link_from: **cspf_group_link** tuple argument:  A.B.C.D;;from ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type cspf_group_link_to: unicode
    :param cspf_group_link_to: **cspf_group_link** tuple argument:  A.B.C.D;;to ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_link', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_link', 'keyval': 'cspf_group_link_from, cspf_group_link_to', 'extra_keyval': 'cspf_group_link_from, cspf_group_link_to'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_link=cspf_group_link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_cspf_group_node_get(self, cspf_group=None, cspf_group_node=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cspf_group: cspf_group_name
    :param cspf_group: Keyword argument tuple.

    :type cspf_group_name: unicode
    :param cspf_group_name: **cspf_group** tuple argument:  ASCII string;;Name (up to 128 characters)

        * length restriction: ::

            ['1..128']

    **Instance Keyword Argument Tuple**:

    :type cspf_group_node: cspf_group_node_ip
    :param cspf_group_node: Keyword argument tuple.

    :type cspf_group_node_ip: unicode
    :param cspf_group_node_ip: **cspf_group_node** tuple argument:  A.B.C.D;;node ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_node', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_node', 'keyval': 'cspf_group_node_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_node=cspf_group_node)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_cspf_group_subnet_get(self, cspf_group=None, cspf_group_subnet=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cspf_group: cspf_group_name
    :param cspf_group: Keyword argument tuple.

    :type cspf_group_name: unicode
    :param cspf_group_name: **cspf_group** tuple argument:  ASCII string;;Name (up to 128 characters)

        * length restriction: ::

            ['1..128']

    **Instance Keyword Argument Tuple**:

    :type cspf_group_subnet: cspf_group_subnet_ip
    :param cspf_group_subnet: Keyword argument tuple.

    :type cspf_group_subnet_ip: unicode
    :param cspf_group_subnet_ip: **cspf_group_subnet** tuple argument:  A.B.C.D/M;;Subnet address (with host part zero) in dotted decimal/Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group', u'cspf_group')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.cspf_group.cspf_group_subnet', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cspf_group_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'cspf_group_subnet', 'keyval': 'cspf_group_subnet_ip', 'extra_keyval': 'cspf_group_subnet_ip'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cspf_group=cspf_group, cspf_group_subnet=cspf_group_subnet)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_ldp_session_get(self, ldp_session=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_session: ldp_session_ip
    :param ldp_session: Keyword argument tuple.

    :type ldp_session_ip: unicode
    :param ldp_session_ip: **ldp_session** tuple argument:  Define LDP peer ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.ldp.ldp_holder.ldp_session', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_session', 'keyval': 'ldp_session_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_session=ldp_session)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_ldp_targeted_peer_get(self, ldp_targeted_peer=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ldp_targeted_peer: ldp_targeted_peer_ip
    :param ldp_targeted_peer: Keyword argument tuple.

    :type ldp_targeted_peer_ip: unicode
    :param ldp_targeted_peer_ip: **ldp_targeted_peer** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.ldp.ldp_holder.ldp_targeted_peer', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ldp_targeted_peer', 'keyval': 'ldp_targeted_peer_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ldp_targeted_peer=ldp_targeted_peer)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_lsp_get(self, lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'lsp-select-path'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'lsp-traffic-engineering'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.lsp_frr', u'lsp-frr-revertive'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'lsp-auto-bandwidth'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.lsp_frr', u'lsp-frr-priority'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'secondary-path'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'lsp-frr'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.lsp_frr', u'lsp-frr-bandwidth'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'priority')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'lsp', 'keyval': 'lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_lsp_secondary_path_get(self, lsp=None, secondary_path=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type lsp: lsp_name
    :param lsp: Keyword argument tuple.

    :type lsp_name: unicode
    :param lsp_name: **lsp** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type secondary_path: secpath_name
    :param secondary_path: Keyword argument tuple.

    :type secpath_name: unicode
    :param secpath_name: **secondary_path** tuple argument:  Set secondary explicit path

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp', u'lsp')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.secondary_path', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.secondary_path', u'lsp-secpath-auto-bandwidth'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.secondary_path', u'priority'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.lsp.secondary_path', u'lsp-traffic-engineering')]
    compositions_keyval_list = [{'keyval': 'lsp_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'secondary_path', 'keyval': 'secpath_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, lsp=lsp, secondary_path=secondary_path)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_mpls_interface_get(self, mpls_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type mpls_interface: interface_type, interface_name
    :param mpls_interface: Keyword argument tuple.

    :type interface_type: unicode
    :param interface_type: **mpls_interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 've']

    :type interface_name: unicode
    :param interface_name: **mpls_interface** tuple argument:  The Interface value.

        * length restriction: ::

            ['1..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6])/([1-9]|[1-9][0-9]|[1-9][0-9]['
            '0-9])(:[1-4])?)|([0-9]([0-9])?([0-9])?([0-9])?))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.interface_dynamic_bypass.mpls_interface_dynamic_bypass_sub_cmds', u'traffic-eng'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.ldp_params', u'ldp-param-cmds'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.rsvp', u'interface-reliable-messaging'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.rsvp', u'rsvp-reservable-bandwidth'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.rsvp', u'interface-refresh-reduction'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.rsvp', u'interface-rsvp-hello'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.rsvp', u'rsvp-authentication'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.interface_dynamic_bypass.mpls_interface_dynamic_bypass_sub_cmds', u'priority'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.rsvp.interface_refresh_reduction', u'bundle-message'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface.interface_dynamic_bypass', u'mpls-interface-dynamic-bypass-sub-cmds'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.mpls_interface', u'rsvp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'mpls_interface', 'keyval': 'interface_type, interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mpls_interface=mpls_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_path_get(self, path=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type path: path_name
    :param path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **path** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', u'path-hop'), ('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', u'path-insert')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'path', 'keyval': 'path_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_path_hop_get(self, path=None, path_hop=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type path: path_name
    :param path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **path** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type path_hop: path_hop_ip, path_hop_type
    :param path_hop: Keyword argument tuple.

    :type path_hop_ip: unicode
    :param path_hop_ip: **path_hop** tuple argument:  A.B.C.D;;path hop ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type path_hop_type: unicode
    :param path_hop_type: **path_hop** tuple argument:  path hop type

        * enumeration restriction: ::

            ['strict', 'loose']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path.path_hop', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_hop', 'keyval': 'path_hop_ip', 'extra_keyval': 'path_hop_ip, path_hop_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_hop=path_hop)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_path_insert_get(self, path=None, path_insert=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type path: path_name
    :param path: Keyword argument tuple.

    :type path_name: unicode
    :param path_name: **path** tuple argument:  ASCII string;;Name (up to 64 characters)

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type path_insert: path_insert_ip
    :param path_insert: Keyword argument tuple.

    :type path_insert_ip: unicode
    :param path_insert_ip: **path_insert** tuple argument:  A.B.C.D;;path hop ip address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path', u'path')]
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.path.path_insert', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'path_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'path_insert', 'keyval': 'path_insert_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, path=path, path_insert=path_insert)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_mpls_policy_admin_group_get(self, policy_admin_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type policy_admin_group: admin_group_name, admin_group_number
    :param policy_admin_group: Keyword argument tuple.

    :type admin_group_name: unicode
    :param admin_group_name: **policy_admin_group** tuple argument.

        * length restriction: ::

            ['1..32']

    :type admin_group_number: long
    :param admin_group_number: **policy_admin_group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.mpls_config.router.mpls.mpls_cmds_holder.policy.policy_admin_group', 'pybind.slxos.v16r_1_00b.brocade_mpls', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'policy_admin_group', 'keyval': 'admin_group_name, admin_group_number', 'extra_keyval': 'admin_group_name, admin_group_number'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy_admin_group=policy_admin_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_get(self, ospf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'log'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.permit', u'redistribute'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'graceful-restart'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.redistribute', u'connected'), ('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv4.af_ipv4_unicast.af_ipv4_attributes.af_common_attributes.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'rfc1583-compatibility'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'distance'), ('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv4.af_ipv4_unicast.af_ipv4_attributes.af_common_attributes.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'area'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv4.ipv4_unicast.default_vrf.af_ipv4_uc_and_vrf_cmds_call_point_holder.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa.on_startup', u'external-lsa-onstartup'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'default-information-originate'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.redistribute', u'redistribute-ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.log', u'bad-packet'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa', u'on-startup'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.distribute_list', u'route-map'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa.on_startup', u'link-onstartup'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa', u'summary-lsa'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric', u'router-lsa'), ('pybind.slxos.v16r_1_00b.routing_system.ipv6.router', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.af_common_attributes.redistribute', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'global-bfd'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'neighbor'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.auto_cost', u'reference-bandwidth'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'timers'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa', u'link'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa.on_startup', u'summary-lsa-onstartup'), ('pybind.slxos.v16r_1_00b.routing_system.router.isis.router_isis_cmds_holder.address_family.ipv6.af_ipv6_unicast.af_ipv6_attributes.af_common_attributes.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.timers.throttle', u'spf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.redistribute', u'bgp'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ldp-sync'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.deny', u'redistribute'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.redistribute', u'static'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.log', u'adjacency'), ('pybind.slxos.v16r_1_00b.routing_system.router.router_bgp.address_family.ipv6.ipv6_unicast.default_vrf.af_ipv6_uc_and_vrf_cmds_call_point_holder.redistribute.ospf', u'match'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.redistribute', u'isis'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'summary-address'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.max_metric.router_lsa', u'external-lsa')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'ospf', 'keyval': 'vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_area_get(self, ospf=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.stub', u'metric'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.prefix_list', u'direction-out'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.prefix_list', u'direction-in'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'nssa'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'range'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'virtual-link'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.nssa', u'metric')]
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'area_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_area_range_get(self, ospf=None, area=None, range=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type range: range_address, range_mask, range_effect, range_cost
    :param range: Keyword argument tuple.

    :type range_address: unicode
    :param range_address: **range** tuple argument:  A.B.C.D   IP address to match

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type range_mask: unicode
    :param range_mask: **range** tuple argument:  A.B.C.D   IP mask for address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type range_effect: unicode
    :param range_effect: **range** tuple argument:  Advertise/Do not advertise this type-3 summarization

        * enumeration restriction: ::

            ['advertise', 'not-advertise']

    :type range_cost: long
    :param range_cost: **range** tuple argument:  Configure area range cost

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.range', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'range', 'keyval': 'range_address, range_mask', 'extra_keyval': 'range_address, range_mask, range_effect, range_cost'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, range=range)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_area_virtual_link_get(self, ospf=None, area=None, virtual_link=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    :type area: area_id
    :param area: Keyword argument tuple.

    :type area_id: unicode
    :param area_id: **area** tuple argument.

        * pattern restriction: ::

            '((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0'
            '-5])\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9'
            ']|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2['
            '0-4][0-9]|25[0-5]))|(([0-9])|([1-9]([0-9]{1,8}))'
            '|([1]([0-9]{1,9}))|([2][0]([0-9]{1,8}))|([2][1]['
            '0-3]([0-9]{1,7}))|([2][1][4][0-6]([0-9]{1,6}))|('
            '[2][1][4][7][0-3]([0-9]{1,5}))|([2][1][4][7][4]['
            '0-7]([0-9]{1,4}))|([2][1][4][7][4][8][0-2]([0-9]'
            '{1,3}))|([2][1][4][7][4][8][3][0-5]([0-9]{1,2}))'
            '|([2][1][4][7][4][8][3][6][0-3][0-9])|([2][1][4]'
            '[7][4][8][3][6][4][0-7]))'

    **Instance Keyword Argument Tuple**:

    :type virtual_link: virt_link_neighbor
    :param virtual_link: Keyword argument tuple.

    :type virt_link_neighbor: unicode
    :param virt_link_neighbor: **virtual_link** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area', u'area')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link.authentication_key', u'no-encrypt-auth-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link', u'md5-authentication'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link.authentication_key', u'auth-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link.md5_authentication', u'no-encrypt-key-table'), ('pybind.slxos.v16r_1_00b.routing_system.router.ospf.area.virtual_link.md5_authentication', u'key-table')]
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}, {'keyval': 'area_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'virtual_link', 'keyval': 'virt_link_neighbor', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, area=area, virtual_link=virtual_link)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_deny_redistribute_get(self, ospf=None, redistribute=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type redistribute: redist_value, route_option, address, mask, set_metric_val, match_metric_val
    :param redistribute: Keyword argument tuple.

    :type redist_value: long
    :param redist_value: **redistribute** tuple argument:  Number

        * range restriction: ::

            ['0..4294967295']

    :type route_option: unicode
    :param route_option: **redistribute** tuple argument:  OSPF route option

        * enumeration restriction: ::

            ['connected', 'all', 'static']

    :type address: unicode
    :param address: **redistribute** tuple argument:  IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mask: unicode
    :param mask: **redistribute** tuple argument:  Subnet Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type set_metric_val: long
    :param set_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type match_metric_val: long
    :param match_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.deny.redistribute', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, redistribute=redistribute)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_distance_get(self, ospf=None, distance=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type distance: route_type
    :param distance: Keyword argument tuple.

    :type route_type: unicode
    :param route_type: **distance** tuple argument:  The type of route propogation

        * enumeration restriction: ::

            ['intra-area', 'external', 'inter-area']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.distance', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'distance', 'keyval': 'route_type', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, distance=distance)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_neighbor_get(self, ospf=None, neighbor=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type neighbor: neighbor_addr
    :param neighbor: Keyword argument tuple.

    :type neighbor_addr: unicode
    :param neighbor_addr: **neighbor** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.neighbor', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'neighbor', 'keyval': 'neighbor_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, neighbor=neighbor)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_permit_redistribute_get(self, ospf=None, redistribute=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type redistribute: redist_value, route_option, address, mask, set_metric_val, match_metric_val
    :param redistribute: Keyword argument tuple.

    :type redist_value: long
    :param redist_value: **redistribute** tuple argument:  Number

        * range restriction: ::

            ['0..4294967295']

    :type route_option: unicode
    :param route_option: **redistribute** tuple argument:  OSPF route option

        * enumeration restriction: ::

            ['connected', 'all', 'static']

    :type address: unicode
    :param address: **redistribute** tuple argument:  IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mask: unicode
    :param mask: **redistribute** tuple argument:  Subnet Mask

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type set_metric_val: long
    :param set_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type match_metric_val: long
    :param match_metric_val: **redistribute** tuple argument:  Metric value

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.permit.redistribute', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'redistribute', 'keyval': 'redist_value, route_option', 'extra_keyval': 'redist_value, route_option, address, mask, set_metric_val, match_metric_val'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, redistribute=redistribute)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_ospf_summary_address_get(self, ospf=None, summary_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type ospf: vrf
    :param ospf: Keyword argument tuple.

    :type vrf: unicode
    :param vrf: **ospf** tuple argument:  Create a VRF

        * length restriction: ::

            ['1..64']

    **Instance Keyword Argument Tuple**:

    :type summary_address: sum_address, sum_address_mask
    :param summary_address: Keyword argument tuple.

    :type sum_address: unicode
    :param sum_address: **summary_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type sum_address_mask: unicode
    :param sum_address_mask: **summary_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf', u'ospf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.ospf.summary_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'summary_address', 'keyval': 'sum_address, sum_address_mask', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, ospf=ospf, summary_address=summary_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_pim_anycast_rp_get(self, anycast_rp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type anycast_rp: anycast_ip_addr, anycast_prefix_list
    :param anycast_rp: Keyword argument tuple.

    :type anycast_ip_addr: unicode
    :param anycast_ip_addr: **anycast_rp** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type anycast_prefix_list: unicode
    :param anycast_prefix_list: **anycast_rp** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.anycast_rp', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'anycast_rp', 'keyval': 'anycast_ip_addr', 'extra_keyval': 'anycast_ip_addr, anycast_prefix_list'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, anycast_rp=anycast_rp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_pim_anycast_rp_ip_get(self, anycast_rp_ip=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type anycast_rp_ip: anycast_rp_ip_addr
    :param anycast_rp_ip: Keyword argument tuple.

    :type anycast_rp_ip_addr: unicode
    :param anycast_rp_ip_addr: **anycast_rp_ip** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.anycast_rp_ip', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'anycast_rp_ip', 'keyval': 'anycast_rp_ip_addr', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, anycast_rp_ip=anycast_rp_ip)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_pim_bsr_candidate_interface_get(self, bsr_cand_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bsr_cand_interface: bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority
    :param bsr_cand_interface: Keyword argument tuple.

    :type bsr_cand_intf_type: unicode
    :param bsr_cand_intf_type: **bsr_cand_interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel', 've', 'loopback']

    :type bsr_cand_intf_id: unicode
    :param bsr_cand_intf_id: **bsr_cand_interface** tuple argument:  Interface name in slot/port format for ethernet or port-channel/ve/loopback interface number

    :type hash_mask_length: int
    :param hash_mask_length: **bsr_cand_interface** tuple argument:  BSR hash mask

        * range restriction: ::

            ['0..65535']

    :type bsr_cand_priority: long
    :param bsr_cand_priority: **bsr_cand_interface** tuple argument:  BSR priority

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.bsr_candidate.bsr_cand_interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bsr_cand_interface', 'keyval': 'bsr_cand_intf_type, bsr_cand_intf_id', 'extra_keyval': 'bsr_cand_intf_type, bsr_cand_intf_id, hash_mask_length, bsr_cand_priority'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bsr_cand_interface=bsr_cand_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_pim_rp_address_get(self, rp_address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rp_address: rp_ip_addr, rp_addr_prefix_list
    :param rp_address: Keyword argument tuple.

    :type rp_ip_addr: unicode
    :param rp_ip_addr: **rp_address** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type rp_addr_prefix_list: unicode
    :param rp_addr_prefix_list: **rp_address** tuple argument:  Prefix list

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.rp_address', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rp_address', 'keyval': 'rp_ip_addr', 'extra_keyval': 'rp_ip_addr, rp_addr_prefix_list'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rp_address=rp_address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_pim_rp_candidate_interface_get(self, rp_cand_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rp_cand_interface: rp_cand_intf_type, rp_cand_intf_id
    :param rp_cand_interface: Keyword argument tuple.

    :type rp_cand_intf_type: unicode
    :param rp_cand_intf_type: **rp_cand_interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel', 've', 'loopback']

    :type rp_cand_intf_id: unicode
    :param rp_cand_intf_id: **rp_cand_interface** tuple argument:  Interface name in slot/port format for ethernet or port-channel/ve/loopback interface number

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.rp_candidate.rp_cand_interface', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rp_cand_interface', 'keyval': 'rp_cand_intf_type, rp_cand_intf_id', 'extra_keyval': 'rp_cand_intf_type, rp_cand_intf_id'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rp_cand_interface=rp_cand_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def router_pim_rp_candidate_prefix_get(self, rp_cand_grp_prefix=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rp_cand_grp_prefix: rp_cand_prefix_name
    :param rp_cand_grp_prefix: Keyword argument tuple.

    :type rp_cand_prefix_name: unicode
    :param rp_cand_prefix_name: **rp_cand_grp_prefix** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.routing_system.router.hide_pim_holder.pim.rp_candidate.rp_cand_grp_prefix', 'pybind.slxos.v16r_1_00b.brocade_common_def', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rp_cand_grp_prefix', 'keyval': 'rp_cand_prefix_name', 'extra_keyval': 'rp_cand_prefix_name'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rp_cand_grp_prefix=rp_cand_grp_prefix)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def rule_get(self, rule=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type rule: index, action, operation, role
    :param rule: Keyword argument tuple.

    :type index: long
    :param index: **rule** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type action: unicode
    :param action: **rule** tuple argument:  Action for the command

        * enumeration restriction: ::

            ['accept', 'reject']

    :type operation: unicode
    :param operation: **rule** tuple argument:  Operation for the command

        * enumeration restriction: ::

            ['read-write', 'read-only']

    :type role: unicode
    :param role: **rule** tuple argument:  One of the existing roles

        * length restriction: ::

            ['4 .. 32']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.rule', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.rule', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.rule', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.rule', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.rule.command.interface_fe_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_loopback_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_he_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_management_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_vlan_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule', u'command'), ('pybind.nos.v6_0_2b.vlan.classifier', u'rule'), ('pybind.nos.v6_0_2b.rule.command.interface_ge_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_te_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_fcoe_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_ve_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_pc_leaf', u'interface'), ('pybind.nos.v6_0_2b.rule.command.interface_fc_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule', u'command'), ('pybind.slxos.v16r_1_00b.rule.command.interface_vlan_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule.command.interface_management_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule.command.interface_loopback_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule.command.interface_fc_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule.command.interface_pc_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule.command.interface_eth_leaf', u'interface'), ('pybind.slxos.v16r_1_00b.rule.command.interface_ve_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_loopback_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_fcoe_leaf', u'interface'), ('pybind.nos.v7_1_0.vlan.classifier', u'rule'), ('pybind.nos.v7_1_0.rule.command.interface_vlan_leaf', u'interface'), ('pybind.nos.v7_1_0.rule', u'command'), ('pybind.nos.v7_1_0.rule.command.interface_ge_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_te_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_fe_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_he_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_pc_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_management_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_ve_leaf', u'interface'), ('pybind.nos.v7_1_0.rule.command.interface_fc_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule', u'command'), ('pybind.nos.v7_0_1a.rule.command.interface_ve_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_vlan_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_te_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_pc_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_loopback_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_fcoe_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_ge_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_fc_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_management_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_fe_leaf', u'interface'), ('pybind.nos.v7_0_1a.rule.command.interface_he_leaf', u'interface'), ('pybind.nos.v7_0_1a.vlan.classifier', u'rule')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'rule', 'keyval': 'index', 'extra_keyval': 'index, action, operation, role'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rule=rule)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def secpolicy_active_policy_get(self, policies=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies', u'member-entry'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies', u'member-entry'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies', u'member-entry'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies', u'member-entry')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def secpolicy_active_policy_member_entry_get(self, policies=None, member_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    **Instance Keyword Argument Tuple**:

    :type member_entry: member
    :param member_entry: Keyword argument tuple.

    :type member: unicode
    :param member: **member_entry** tuple argument:  WWN of the switch

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies', u'policies'), ('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies', u'policies'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.active_policy.policies.member_entry', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies, member_entry=member_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def secpolicy_defined_policy_get(self, policies=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies', u'member-entry'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies', u'member-entry'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies', u'member-entry'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies', u'member-entry')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'policies', 'keyval': 'policy', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def secpolicy_defined_policy_member_entry_get(self, policies=None, member_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type policies: policy
    :param policies: Keyword argument tuple.

    :type policy: unicode
    :param policy: **policies** tuple argument.

        * pattern restriction: ::

            'SCC_POLICY'

    **Instance Keyword Argument Tuple**:

    :type member_entry: member
    :param member_entry: Keyword argument tuple.

    :type member: unicode
    :param member: **member_entry** tuple argument:  WWN of the switch

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies', u'policies'), ('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies', u'policies'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies', u'policies')]
    bindings_list = [('pybind.nos.v6_0_2b.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v6_0_2b.brocade_fc_auth', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_0_1a.brocade_fc_auth', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.nos.v7_1_0.brocade_fc_auth', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.secpolicy_sa.secpolicy.defined_policy.policies.member_entry', 'pybind.slxos.v16r_1_00b.brocade_fc_auth', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}, {'keyval': 'policy', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'member', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policies=policies, member_entry=member_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sflow_collector_get(self, collector=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type collector: collector_ip_address, collector_port_number, use_vrf
    :param collector: Keyword argument tuple.

    :type collector_ip_address: unicode
    :param collector_ip_address: **collector** tuple argument:  <ipv4/v6 address>; The IPv4/IPv6 address of the Sflow collector

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type collector_port_number: long
    :param collector_port_number: **collector** tuple argument:  <1-65535> The port number used by the Sflow collector (default = 6343)

        * range restriction: ::

            ['0..4294967295']

    :type use_vrf: unicode
    :param use_vrf: **collector** tuple argument:  Vrf to use for sending data to the collector (default = mgmt-vrf)

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.sflow.collector', 'pybind.nos.v6_0_2b.brocade_sflow', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.sflow.collector', 'pybind.nos.v7_0_1a.brocade_sflow', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.sflow.collector', 'pybind.nos.v7_1_0.brocade_sflow', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.sflow.collector', 'pybind.slxos.v16r_1_00b.brocade_sflow', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'collector', 'keyval': 'collector_ip_address, collector_port_number, use_vrf', 'extra_keyval': 'collector_ip_address, collector_port_number, use_vrf'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, collector=collector)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sflow_profile_get(self, sflow_profile=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type sflow_profile: profile_name, profile_sampling_rate
    :param sflow_profile: Keyword argument tuple.

    :type profile_name: unicode
    :param profile_name: **sflow_profile** tuple argument.

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9_]{0,63})'

    :type profile_sampling_rate: long
    :param profile_sampling_rate: **sflow_profile** tuple argument:  Sflow profile sampling-rate

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.sflow_profile', 'pybind.nos.v6_0_2b.brocade_sflow', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.sflow_profile', 'pybind.nos.v7_0_1a.brocade_sflow', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.sflow_profile', 'pybind.nos.v7_1_0.brocade_sflow', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.sflow_profile', 'pybind.slxos.v16r_1_00b.brocade_sflow', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'sflow_profile', 'keyval': 'profile_name', 'extra_keyval': 'profile_name, profile_sampling_rate'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, sflow_profile=sflow_profile)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_connectivity_get(self, connectivity=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type connectivity: connectivity_sfmid
    :param connectivity: Keyword argument tuple.

    :type connectivity_sfmid: long
    :param connectivity_sfmid: **connectivity** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.connectivity', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'connectivity', 'keyval': 'connectivity_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, connectivity=connectivity)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_links_get(self, links=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type links: links_sfmid
    :param links: Keyword argument tuple.

    :type links_sfmid: long
    :param links_sfmid: **links** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.links', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'links', 'keyval': 'links_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, links=links)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_mcast_get(self, mcast=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type mcast: mcastid
    :param mcast: Keyword argument tuple.

    :type mcastid: long
    :param mcastid: **mcast** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.mcast', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'mcast', 'keyval': 'mcastid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, mcast=mcast)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_queue_get(self, queue=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type queue: queue_sfmid
    :param queue: Keyword argument tuple.

    :type queue_sfmid: long
    :param queue_sfmid: **queue** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.queue', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'queue', 'keyval': 'queue_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, queue=queue)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_serdesmode_get(self, serdesmode=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type serdesmode: serdesmode_sfmid
    :param serdesmode: Keyword argument tuple.

    :type serdesmode_sfmid: long
    :param serdesmode_sfmid: **serdesmode** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.serdesmode', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'serdesmode', 'keyval': 'serdesmode_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, serdesmode=serdesmode)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_statistics_get(self, statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type statistics: statistics_sfmid
    :param statistics: Keyword argument tuple.

    :type statistics_sfmid: long
    :param statistics_sfmid: **statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.statistics', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'statistics', 'keyval': 'statistics_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, statistics=statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sfm_state_thresholds_get(self, thresholds=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type thresholds: thresholds_sfmid
    :param thresholds: Keyword argument tuple.

    :type thresholds_sfmid: long
    :param thresholds_sfmid: **thresholds** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sfm_state.thresholds', 'pybind.slxos.v16r_1_00b.brocade_sysmgr_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'thresholds', 'keyval': 'thresholds_sfmid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, thresholds=thresholds)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def show_client_id_df_info_state_get(self, show_client_id_df_info_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type show_client_id_df_info_state: cluster_id, client_id
    :param show_client_id_df_info_state: Keyword argument tuple.

    :type cluster_id: long
    :param cluster_id: **show_client_id_df_info_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type client_id: long
    :param client_id: **show_client_id_df_info_state** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.show_client_id_df_info_state', 'pybind.slxos.v16r_1_00b.brocade_mct_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.show_client_id_df_info_state', u'df-vlans')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'show_client_id_df_info_state', 'keyval': 'cluster_id, client_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, show_client_id_df_info_state=show_client_id_df_info_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_community_get(self, community=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type community: community, groupname, ipv4_acl, ipv6_acl
    :param community: Keyword argument tuple.

    :type community: unicode
    :param community: **community** tuple argument.

    :type groupname: unicode
    :param groupname: **community** tuple argument:  Groupname associated with community string

    :type ipv4_acl: unicode
    :param ipv4_acl: **community** tuple argument:  standard IPv4 Access list name (or) ID associated with community strings.

        * length restriction: ::

            ['0 .. 63']

    :type ipv6_acl: unicode
    :param ipv6_acl: **community** tuple argument:  standard IPv6 Access list name (or) ID associated with community strings.

        * length restriction: ::

            ['0 .. 63']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.community', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.community', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.community', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.community', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'community', 'keyval': 'community', 'extra_keyval': 'community, groupname'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, community=community)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_context_get(self, context=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type context: context_name
    :param context: Keyword argument tuple.

    :type context_name: unicode
    :param context_name: **context** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.context', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.context', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.context', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.context', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'context', 'keyval': 'context_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, context=context)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_group_get(self, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type group: group_name, group_version, group_auth_mode, read, write, notify
    :param group: Keyword argument tuple.

    :type group_name: unicode
    :param group_name: **group** tuple argument.

        * length restriction: ::

            ['1 .. 32']

    :type group_version: unicode
    :param group_version: **group** tuple argument.

        * enumeration restriction: ::

            ['v2c', 'v1', 'v3']

    :type group_auth_mode: unicode
    :param group_auth_mode: **group** tuple argument.

        * enumeration restriction: ::

            ['noauth', 'auth', 'priv']

    :type read: unicode
    :param read: **group** tuple argument:  read	Specify a read view for the group

        * length restriction: ::

            ['1 .. 32']

    :type write: unicode
    :param write: **group** tuple argument:  write	Specify a write view for the group

        * length restriction: ::

            ['1 .. 32']

    :type notify: unicode
    :param notify: **group** tuple argument:  notify	Specify a notify view for the group

        * length restriction: ::

            ['1 .. 32']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.group', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.group', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.group', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.group', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'group_name, group_version', 'extra_keyval': 'group_name, group_version, group_auth_mode, read, write, notify'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_host_get(self, host=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type host: ip, community
    :param host: Keyword argument tuple.

    :type ip: unicode
    :param ip: **host** tuple argument:  ipv4/ipv6/dns address of the trap recipient associated with community strings.  Traps will be sent to this host

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type community: unicode
    :param community: **host** tuple argument:  Community string associated with traps.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.host', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.host', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.host', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.host', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.snmp_server.host', u'source-interface'), ('pybind.nos.v6_0_2b.snmp_server.host', u'source-interface'), ('pybind.nos.v7_1_0.snmp_server.host', u'source-interface')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'ip, community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_mib_community_map_get(self, community_map=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type community_map: community, context
    :param community_map: Keyword argument tuple.

    :type community: unicode
    :param community: **community_map** tuple argument:  Community string to map with the context name

    :type context: unicode
    :param context: **community_map** tuple argument:  Context Name.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v7_0_1a.snmp_server.mib.community_map', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.mib.community_map', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.mib.community_map', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'community_map', 'keyval': 'community', 'extra_keyval': 'community, context'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, community_map=community_map)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_user_get(self, user=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type user: username, groupname, auth, auth_password, priv, priv_password, encrypted, ipv4_acl, ipv6_acl
    :param user: Keyword argument tuple.

    :type username: unicode
    :param username: **user** tuple argument.

        * length restriction: ::

            ['1 .. 25']

    :type groupname: unicode
    :param groupname: **user** tuple argument.

    :type auth: unicode
    :param auth: **user** tuple argument:  Authorization protocol for username(Default=noauth)

        * enumeration restriction: ::

            ['sha', 'noauth', 'md5']

    :type auth_password: unicode
    :param auth_password: **user** tuple argument:  Authorization password associated withusername

    :type priv: unicode
    :param priv: **user** tuple argument:  Privacy protocol for username (Default=nopriv)

        * enumeration restriction: ::

            ['AES128', 'DES', 'nopriv']

    :type priv_password: unicode
    :param priv_password: **user** tuple argument:  Privacy password associated with username

    :type encrypted: YANGBool
    :param encrypted: **user** tuple argument:  This flag is used to enter the auth/privpasswords as encrypted.(Default=disable)

    :type ipv4_acl: unicode
    :param ipv4_acl: **user** tuple argument:  standard IPv4 Access list name (or) ID associated with SNMP v3 user strings.

        * length restriction: ::

            ['0 .. 63']

    :type ipv6_acl: unicode
    :param ipv6_acl: **user** tuple argument:  standard IPv6 Access list name (or) ID associated with SNMP V3 user strings.

        * length restriction: ::

            ['0 .. 63']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.user', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.user', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.user', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.user', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'user', 'keyval': 'username', 'extra_keyval': 'username, groupname, auth, auth_password, priv, priv_password, encrypted, ipv4_acl, ipv6_acl'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, user=user)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_v3host_get(self, v3host=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type v3host: hostip, username
    :param v3host: Keyword argument tuple.

    :type hostip: unicode
    :param hostip: **v3host** tuple argument:  ipv4/ipv6/dns address of the notification recipientassociated with username. Notificationswill be sent to this host

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type username: unicode
    :param username: **v3host** tuple argument:  Username associated with notification type.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.v3host', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.v3host', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.v3host', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.v3host', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.snmp_server.v3host', u'source-interface'), ('pybind.nos.v7_0_1a.snmp_server.v3host', u'source-interface'), ('pybind.nos.v6_0_2b.snmp_server.v3host', u'source-interface')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'v3host', 'keyval': 'hostip, username', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, v3host=v3host)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def snmp_server_view_get(self, view=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type view: viewname, mibtree
    :param view: Keyword argument tuple.

    :type viewname: unicode
    :param viewname: **view** tuple argument.

        * length restriction: ::

            ['1 .. 32']

    :type mibtree: unicode
    :param mibtree: **view** tuple argument.

        * length restriction: ::

            ['1 .. 256']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.snmp_server.view', 'pybind.nos.v6_0_2b.brocade_snmp', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.snmp_server.view', 'pybind.nos.v7_0_1a.brocade_snmp', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.snmp_server.view', 'pybind.nos.v7_1_0.brocade_snmp', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.snmp_server.view', 'pybind.slxos.v16r_1_00b.brocade_snmp', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'view', 'keyval': 'viewname, mibtree', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, view=view)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def spf_log_state_get(self, spf_log_state=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type spf_log_state: spf_log_version
    :param spf_log_state: Keyword argument tuple.

    :type spf_log_version: unicode
    :param spf_log_version: **spf_log_state** tuple argument.

        * enumeration restriction: ::

            ['isis-ipv6-unicast-safi',
            'isis-ipv4-unicast-safi']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.spf_log_state', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.spf_log_state', u'spf-log-levels')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'spf_log_state', 'keyval': 'spf_log_version', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_log_state=spf_log_state)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def spf_log_state_spf_log_levels_get(self, spf_log_state=None, spf_log_levels=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type spf_log_state: spf_log_version
    :param spf_log_state: Keyword argument tuple.

    :type spf_log_version: unicode
    :param spf_log_version: **spf_log_state** tuple argument.

        * enumeration restriction: ::

            ['isis-ipv6-unicast-safi',
            'isis-ipv4-unicast-safi']

    **Instance Keyword Argument Tuple**:

    :type spf_log_levels: level
    :param spf_log_levels: Keyword argument tuple.

    :type level: unicode
    :param level: **spf_log_levels** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1-2', 'level-1']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.spf_log_state', 'spf_log_state')]
    bindings_list = [('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels', u'spf-log-events')]
    compositions_keyval_list = [{'keyval': 'spf_log_version', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'spf_log_levels', 'keyval': 'level', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_log_state=spf_log_state, spf_log_levels=spf_log_levels)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def spf_log_state_spf_log_levels_spf_log_events_get(self, spf_log_state=None, spf_log_levels=None, spf_log_events=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type spf_log_state: spf_log_version
    :param spf_log_state: Keyword argument tuple.

    :type spf_log_version: unicode
    :param spf_log_version: **spf_log_state** tuple argument.

        * enumeration restriction: ::

            ['isis-ipv6-unicast-safi',
            'isis-ipv4-unicast-safi']

    :type spf_log_levels: level
    :param spf_log_levels: Keyword argument tuple.

    :type level: unicode
    :param level: **spf_log_levels** tuple argument.

        * enumeration restriction: ::

            ['level-2', 'level-1-2', 'level-1']

    **Instance Keyword Argument Tuple**:

    :type spf_log_events: spf_log_index
    :param spf_log_events: Keyword argument tuple.

    :type spf_log_index: int
    :param spf_log_index: **spf_log_events** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.spf_log_state', 'spf_log_state'), ('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels', u'spf_log_levels')]
    bindings_list = [('pybind.slxos.v16r_1_00b.spf_log_state.spf_log_levels.spf_log_events', 'pybind.slxos.v16r_1_00b.brocade_isis_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'spf_log_version', 'extra_keyval': ''}, {'keyval': 'level', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'spf_log_events', 'keyval': 'spf_log_index', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, spf_log_state=spf_log_state, spf_log_levels=spf_log_levels, spf_log_events=spf_log_events)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def ssh_server_use_vrf_get(self, use_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type use_vrf: use_vrf_name, ssh_vrf_shutdown
    :param use_vrf: Keyword argument tuple.

    :type use_vrf_name: unicode
    :param use_vrf_name: **use_vrf** tuple argument.

        * length restriction: ::

            ['0 .. max']

    :type ssh_vrf_shutdown: YANGBool
    :param ssh_vrf_shutdown: **use_vrf** tuple argument:  Shutdown SSH server on given vrf

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_sec_services', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_sec_services', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_sec_services', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.ssh_sa.ssh.server.ssh_vrf_cont.use_vrf', 'pybind.slxos.v16r_1_00b.brocade_sec_services', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, ssh_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, use_vrf=use_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sub_interface_statistics_state_bridge_domain_statistics_get(self, bridge_domain_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type bridge_domain_statistics: bd_id
    :param bridge_domain_statistics: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics', u'lif-statistics')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'bridge_domain_statistics', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_statistics=bridge_domain_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sub_interface_statistics_state_bridge_domain_statistics_lif_statistics_get(self, bridge_domain_statistics=None, lif_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type bridge_domain_statistics: bd_id
    :param bridge_domain_statistics: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **bridge_domain_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type lif_statistics: lif_id
    :param lif_statistics: Keyword argument tuple.

    :type lif_id: long
    :param lif_id: **lif_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics', u'bridge_domain_statistics')]
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.bridge_domain_statistics.lif_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'bd_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'lif_statistics', 'keyval': 'lif_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, bridge_domain_statistics=bridge_domain_statistics, lif_statistics=lif_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sub_interface_statistics_state_vlan_statistics_get(self, vlan_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vlan_statistics: vlan_id
    :param vlan_statistics: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **vlan_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics', u'port-statistics')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan_statistics', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan_statistics=vlan_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def sub_interface_statistics_state_vlan_statistics_port_statistics_get(self, vlan_statistics=None, port_statistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan_statistics: vlan_id
    :param vlan_statistics: Keyword argument tuple.

    :type vlan_id: long
    :param vlan_id: **vlan_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type port_statistics: port_id
    :param port_statistics: Keyword argument tuple.

    :type port_id: long
    :param port_id: **port_statistics** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics', u'vlan_statistics')]
    bindings_list = [('pybind.slxos.v16r_1_00b.sub_interface_statistics_state.vlan_statistics.port_statistics', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vlan_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'port_statistics', 'keyval': 'port_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan_statistics=vlan_statistics, port_statistics=port_statistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def switch_attributes_get(self, rbridge_id=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type rbridge_id: rbridge_id
    :param rbridge_id: Keyword argument tuple.

    :type rbridge_id: unicode
    :param rbridge_id: **rbridge_id** tuple argument.

        * length restriction: ::

            ['1..3']

        * pattern restriction: ::

            '[1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9]'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system.switch_attributes.rbridge_id', 'pybind.nos.v6_0_2b.brocade_ras', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system.switch_attributes.rbridge_id', 'pybind.nos.v7_0_1a.brocade_ras', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system.switch_attributes.rbridge_id', 'pybind.nos.v7_1_0.brocade_ras', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rbridge_id', 'keyval': 'rbridge_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rbridge_id=rbridge_id)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def system_monitor_mail_fru_get(self, email_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type email_list: email
    :param email_list: Keyword argument tuple.

    :type email: unicode
    :param email: **email_list** tuple argument:  <email:string>  e-mail address for FRU alerts

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.fru.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.fru.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.fru.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.fru.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def system_monitor_mail_interface_get(self, email_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type email_list: email
    :param email_list: Keyword argument tuple.

    :type email: unicode
    :param email: **email_list** tuple argument:  <email:string>  e-mail address for Interface alerts

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.interface.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.interface.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.interface.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.interface.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def system_monitor_mail_relay_get(self, relay=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type relay: host_ip
    :param relay: Keyword argument tuple.

    :type host_ip: unicode
    :param host_ip: **relay** tuple argument.

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.relay', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.relay', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.relay', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.relay', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'relay', 'keyval': 'host_ip', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, relay=relay)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def system_monitor_mail_security_get(self, email_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type email_list: email
    :param email_list: Keyword argument tuple.

    :type email: unicode
    :param email: **email_list** tuple argument:  <email:string>  e-mail address for Security alerts

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.security.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.security.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.security.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.security.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def system_monitor_mail_sfp_get(self, email_list=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type email_list: email
    :param email_list: Keyword argument tuple.

    :type email: unicode
    :param email: **email_list** tuple argument:  <email:string>  e-mail address for SFP alerts

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.system_monitor_mail.sfp.email_list', 'pybind.nos.v6_0_2b.brocade_system_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.system_monitor_mail.sfp.email_list', 'pybind.nos.v7_0_1a.brocade_system_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.system_monitor_mail.sfp.email_list', 'pybind.nos.v7_1_0.brocade_system_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.system_monitor_mail.sfp.email_list', 'pybind.slxos.v16r_1_00b.brocade_system_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'email_list', 'keyval': 'email', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, email_list=email_list)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tacacs_server_host_get(self, host=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type host: hostname
    :param host: Keyword argument tuple.

    :type hostname: unicode
    :param hostname: **host** tuple argument:  INETADDRESS   Domain name or IP Address of this TACACS+ server

        * length restriction: ::

            ['0..max']

        * pattern restriction: ::

            '\p{IsBasicLatin}{0,255}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.tacacs_server.host', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.tacacs_server.host', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.tacacs_server.host', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.tacacs_server.host', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.tacacs_server.host', u'tacacs-server-options')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'host', 'keyval': 'hostname, use_vrf', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, host=host)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def telnet_server_use_vrf_get(self, use_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type use_vrf: use_vrf_name, telnet_vrf_shutdown
    :param use_vrf: Keyword argument tuple.

    :type use_vrf_name: unicode
    :param use_vrf_name: **use_vrf** tuple argument.

        * length restriction: ::

            ['0 .. max']

    :type telnet_vrf_shutdown: YANGBool
    :param telnet_vrf_shutdown: **use_vrf** tuple argument:  Shutdown telnet server on given vrf

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v6_0_2b.brocade_sec_services', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_0_1a.brocade_sec_services', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.nos.v7_1_0.brocade_sec_services', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.telnet_sa.telnet.server.telnet_vrf_cont.use_vrf', 'pybind.slxos.v16r_1_00b.brocade_sec_services', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'use_vrf', 'keyval': 'use_vrf_name', 'extra_keyval': 'use_vrf_name, telnet_vrf_shutdown'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, use_vrf=use_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def threshold_monitor_interface_policy_get(self, policy=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type policy: policy_name
    :param policy: Keyword argument tuple.

    :type policy_name: unicode
    :param policy_name: **policy** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type area: type, area_value
    :param area: Keyword argument tuple.

    :type type: unicode
    :param type: **area** tuple argument:  Interface types that can be configured independent of speed

        * enumeration restriction: ::

            ['Ethernet']

    :type area_value: unicode
    :param area_value: **area** tuple argument.

        * enumeration restriction: ::

            ['MissingTerminationCharacter',
            'CRCAlignErrors',
            'IFG',
            'SymbolErrors']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.nos.v6_0_2b.brocade_threshold_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.nos.v7_0_1a.brocade_threshold_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.nos.v7_1_0.brocade_threshold_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy.area', 'pybind.slxos.v16r_1_00b.brocade_threshold_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'above'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'above'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy.area', u'threshold'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.interface.policy.area.alert', u'above')]
    compositions_keyval_list = [{'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy=policy, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def threshold_monitor_security_policy_get(self, policy=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type policy: sec_policy_name
    :param policy: Keyword argument tuple.

    :type sec_policy_name: unicode
    :param sec_policy_name: **policy** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type area: sec_area_value
    :param area: Keyword argument tuple.

    :type sec_area_value: unicode
    :param sec_area_value: **area** tuple argument:  Security Areas

        * enumeration restriction: ::

            ['telnet-violation', 'login-violation']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.nos.v6_0_2b.brocade_threshold_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.nos.v7_0_1a.brocade_threshold_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.nos.v7_1_0.brocade_threshold_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy.area', 'pybind.slxos.v16r_1_00b.brocade_threshold_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.security.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy.area', u'threshold'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.security.policy.area', u'threshold'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy.area', u'threshold'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.security.policy.area.alert', u'below')]
    compositions_keyval_list = [{'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}, {'keyval': 'sec_policy_name', 'extra_keyval': 'sec_policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'sec_area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy=policy, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def threshold_monitor_sfp_policy_get(self, policy=None, area=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type policy: policy_name
    :param policy: Keyword argument tuple.

    :type policy_name: unicode
    :param policy_name: **policy** tuple argument.

    **Instance Keyword Argument Tuple**:

    :type area: type, area_value
    :param area: Keyword argument tuple.

    :type type: unicode
    :param type: **area** tuple argument:  SFP types that can be configured

        * enumeration restriction: ::

            ['10GLR',
            '1GLR',
            '100GSR',
            '10GUSR',
            '1GSR',
            '10GSR',
            'QSFP']

    :type area_value: unicode
    :param area_value: **area** tuple argument.

        * enumeration restriction: ::

            ['Current',
            'RXP',
            'TXP',
            'Voltage',
            'Temperature']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy', u'policy')]
    bindings_list = [('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.nos.v6_0_2b.brocade_threshold_monitor', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_0_1a.brocade_threshold_monitor', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.nos.v7_1_0.brocade_threshold_monitor', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', 'pybind.slxos.v16r_1_00b.brocade_threshold_monitor', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v7_0_1a.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'above'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'above'), ('pybind.nos.v6_0_2b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'above'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.slxos.v16r_1_00b.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'below'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy.area', u'threshold'), ('pybind.nos.v7_1_0.threshold_monitor_hidden.threshold_monitor.sfp.policy.area.alert', u'above')]
    compositions_keyval_list = [{'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}, {'keyval': 'policy_name', 'extra_keyval': 'policy_name'}]
    bindings_keyval = {'kwargs_key_name': u'area', 'keyval': 'type, area_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, policy=policy, area=area)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_non_empty_voq_get(self, non_empty_voq=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type non_empty_voq: slot_port
    :param non_empty_voq: Keyword argument tuple.

    :type slot_port: unicode
    :param slot_port: **non_empty_voq** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.non_empty_voq', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'non_empty_voq', 'keyval': 'slot_port', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, non_empty_voq=non_empty_voq)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tm_max_buff_util_data_get(self, tm_max_buff_util_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tm_max_buff_util_data: slot, tower
    :param tm_max_buff_util_data: Keyword argument tuple.

    :type slot: int
    :param slot: **tm_max_buff_util_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type tower: int
    :param tower: **tm_max_buff_util_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tm_max_buff_util_data', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tm_max_buff_util_data', 'keyval': 'slot, tower', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tm_max_buff_util_data=tm_max_buff_util_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tm_top_discard_pkt_data_get(self, tm_top_discard_pkt_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tm_top_discard_pkt_data: slot, tower, id
    :param tm_top_discard_pkt_data: Keyword argument tuple.

    :type slot: int
    :param slot: **tm_top_discard_pkt_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type tower: int
    :param tower: **tm_top_discard_pkt_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type id: int
    :param id: **tm_top_discard_pkt_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tm_top_discard_pkt_data', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tm_top_discard_pkt_data', 'keyval': 'slot, tower, id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tm_top_discard_pkt_data=tm_top_discard_pkt_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tm_top_max_queue_depth_data_get(self, tm_top_max_queue_depth_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tm_top_max_queue_depth_data: slot, tower, id
    :param tm_top_max_queue_depth_data: Keyword argument tuple.

    :type slot: int
    :param slot: **tm_top_max_queue_depth_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type tower: int
    :param tower: **tm_top_max_queue_depth_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type id: int
    :param id: **tm_top_max_queue_depth_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tm_top_max_queue_depth_data', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tm_top_max_queue_depth_data', 'keyval': 'slot, tower, id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tm_top_max_queue_depth_data=tm_top_max_queue_depth_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tmcpustatsslot_get(self, tmcpustatsslot=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tmcpustatsslot: slot_id, cpugroup_id
    :param tmcpustatsslot: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **tmcpustatsslot** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type cpugroup_id: int
    :param cpugroup_id: **tmcpustatsslot** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmcpustatsslot', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmcpustatsslot', 'keyval': 'slot_id, cpugroup_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmcpustatsslot=tmcpustatsslot)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tmcpustatsslotallgrp_get(self, tmcpustatsslotallgrp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tmcpustatsslotallgrp: slot_id
    :param tmcpustatsslotallgrp: Keyword argument tuple.

    :type slot_id: int
    :param slot_id: **tmcpustatsslotallgrp** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmcpustatsslotallgrp', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmcpustatsslotallgrp', 'keyval': 'slot_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmcpustatsslotallgrp=tmcpustatsslotallgrp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tmdevicestataggr_get(self, tmdevicestataggr=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tmdevicestataggr: slot, tower
    :param tmdevicestataggr: Keyword argument tuple.

    :type slot: int
    :param slot: **tmdevicestataggr** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type tower: int
    :param tower: **tmdevicestataggr** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmdevicestataggr', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmdevicestataggr', 'keyval': 'slot, tower', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmdevicestataggr=tmdevicestataggr)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def tm_state_tmvoqstatistics_get(self, tmvoqstatistics=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type tmvoqstatistics: ing_slot, ing_tower, egr_voqid
    :param tmvoqstatistics: Keyword argument tuple.

    :type ing_slot: int
    :param ing_slot: **tmvoqstatistics** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type ing_tower: int
    :param ing_tower: **tmvoqstatistics** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type egr_voqid: int
    :param egr_voqid: **tmvoqstatistics** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.tm_state.tmvoqstatistics', 'pybind.slxos.v16r_1_00b.brocade_sysdiag_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'tmvoqstatistics', 'keyval': 'ing_slot, ing_tower, egr_voqid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, tmvoqstatistics=tmvoqstatistics)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def topology_group_get(self, topology_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type topology_group: topology_group_id
    :param topology_group: Keyword argument tuple.

    :type topology_group_id: long
    :param topology_group_id: **topology_group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group', 'pybind.slxos.v16r_1_00b.brocade_topology_group', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.topology_group', u'member-vlan'), ('pybind.slxos.v16r_1_00b.topology_group', u'member-bridge-domain')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'topology_group', 'keyval': 'topology_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group=topology_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def topology_group_state_topology_group_data_get(self, topology_group_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type topology_group_data: topology_group_id
    :param topology_group_data: Keyword argument tuple.

    :type topology_group_id: int
    :param topology_group_id: **topology_group_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'member-vlan'), ('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'member-bd'), ('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'master-vlan')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'topology_group_data', 'keyval': 'topology_group_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group_data=topology_group_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def topology_group_state_topology_group_data_member_bd_get(self, topology_group_data=None, member_bd=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type topology_group_data: topology_group_id
    :param topology_group_data: Keyword argument tuple.

    :type topology_group_id: int
    :param topology_group_id: **topology_group_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type member_bd: bd_id
    :param member_bd: Keyword argument tuple.

    :type bd_id: long
    :param bd_id: **member_bd** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'topology_group_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data.member_bd', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'topology_group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_bd', 'keyval': 'bd_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group_data=topology_group_data, member_bd=member_bd)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def topology_group_state_topology_group_data_member_vlan_get(self, topology_group_data=None, member_vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type topology_group_data: topology_group_id
    :param topology_group_data: Keyword argument tuple.

    :type topology_group_id: int
    :param topology_group_id: **topology_group_data** tuple argument.

        * range restriction: ::

            ['0..65535']

    **Instance Keyword Argument Tuple**:

    :type member_vlan: vlan_id
    :param member_vlan: Keyword argument tuple.

    :type vlan_id: int
    :param vlan_id: **member_vlan** tuple argument.

        * range restriction: ::

            ['0..65535']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data', u'topology_group_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.topology_group_state.topology_group_data.member_vlan', 'pybind.slxos.v16r_1_00b.brocade_nsm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'topology_group_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_vlan', 'keyval': 'vlan_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, topology_group_data=topology_group_data, member_vlan=member_vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def traffic_class_exp_state_qos_mpls_get(self, qos_mpls=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type qos_mpls: map_name
    :param qos_mpls: Keyword argument tuple.

    :type map_name: unicode
    :param map_name: **qos_mpls** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.traffic_class_exp_state.qos_mpls', 'pybind.slxos.v16r_1_00b.brocade_qos_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'qos_mpls', 'keyval': 'map_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, qos_mpls=qos_mpls)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def username_get(self, username=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type username: name, user_password, encryption_level, role, desc, enable, expire
    :param username: Keyword argument tuple.

    :type name: unicode
    :param name: **username** tuple argument.

        * length restriction: ::

            ['1 .. 40']

    :type user_password: unicode
    :param user_password: **username** tuple argument:  Password of the user

        * length restriction: ::

            ['1..40']

    :type encryption_level: unicode
    :param encryption_level: **username** tuple argument:  Level of encryption of the password(default=0)

        * enumeration restriction: ::

            ['0', '7']

    :type role: unicode
    :param role: **username** tuple argument:  Role of the user

        * length restriction: ::

            ['4 .. 32']

    :type desc: unicode
    :param desc: **username** tuple argument:  Description of the user (default='')

        * length restriction: ::

            ['0 .. 64']

    :type enable: YANGBool
    :param enable: **username** tuple argument:  Represents whether the user account is enabled(default=true)

    :type expire: unicode
    :param expire: **username** tuple argument:  Date until when the password will remain valid after being updated(default=never)

        * length restriction: ::

            ['0 .. 10']

        * pattern restriction: ::

            '((19(0[2-9]|[1-9][0-9])|20([012][0-9]|3[0-7]))-('
            '0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))|never'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.username', 'pybind.nos.v6_0_2b.brocade_aaa', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.username', 'pybind.nos.v7_0_1a.brocade_aaa', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.username', 'pybind.nos.v7_1_0.brocade_aaa', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.username', 'pybind.slxos.v16r_1_00b.brocade_aaa', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'username', 'keyval': 'name', 'extra_keyval': 'name, user_password, encryption_level, role, desc, enable, expire, access_time, end_time'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, username=username)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vc_peer_state_vc_peer_data_get(self, vc_peer_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vc_peer_data: vc_id
    :param vc_peer_data: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **vc_peer_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', u'vc-proto-tnnl'), ('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', u'vc-assigned-lsp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vc_peer_data', 'keyval': 'vc_id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc_peer_data=vc_peer_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vc_peer_state_vc_peer_data_vc_assigned_lsp_get(self, vc_peer_data=None, vc_assigned_lsp=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vc_peer_data: vc_id
    :param vc_peer_data: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **vc_peer_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vc_assigned_lsp: vc_lsp_name
    :param vc_assigned_lsp: Keyword argument tuple.

    :type vc_lsp_name: unicode
    :param vc_lsp_name: **vc_assigned_lsp** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', u'vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data.vc_assigned_lsp', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_assigned_lsp', 'keyval': 'vc_lsp_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc_peer_data=vc_peer_data, vc_assigned_lsp=vc_assigned_lsp)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vc_peer_state_vc_peer_data_vc_proto_tnnl_get(self, vc_peer_data=None, vc_proto_tnnl=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vc_peer_data: vc_id
    :param vc_peer_data: Keyword argument tuple.

    :type vc_id: long
    :param vc_id: **vc_peer_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type vc_proto_tnnl: vc_proto_name
    :param vc_proto_tnnl: Keyword argument tuple.

    :type vc_proto_name: unicode
    :param vc_proto_name: **vc_proto_tnnl** tuple argument.

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data', u'vc_peer_data')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vc_peer_state.vc_peer_data.vc_proto_tnnl', 'pybind.slxos.v16r_1_00b.brocade_pwm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vc_id', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'vc_proto_tnnl', 'keyval': 'vc_proto_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vc_peer_data=vc_peer_data, vc_proto_tnnl=vc_proto_tnnl)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vcenter_get(self, vcenter=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vcenter: id
    :param vcenter: Keyword argument tuple.

    :type id: unicode
    :param id: **vcenter** tuple argument:  NAME;;vCenter name (Max Size - 32)

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,31})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vcenter', 'pybind.nos.v6_0_2b.brocade_vswitch', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vcenter', 'pybind.nos.v7_0_1a.brocade_vswitch', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vcenter', 'pybind.nos.v7_1_0.brocade_vswitch', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.vcenter', 'pybind.slxos.v16r_1_00b.brocade_vswitch', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.vcenter', u'credentials'), ('pybind.nos.v6_0_2b.vcenter.discovery', u'ignore-delete-all-response'), ('pybind.nos.v7_0_1a.vcenter.discovery', u'ignore-delete-all-response'), ('pybind.nos.v7_0_1a.vcenter', u'credentials'), ('pybind.nos.v7_1_0.vcenter.discovery', u'ignore-delete-all-response'), ('pybind.nos.v7_1_0.vcenter', u'credentials'), ('pybind.slxos.v16r_1_00b.vcenter.discovery', u'ignore-delete-all-response'), ('pybind.slxos.v16r_1_00b.vcenter', u'credentials')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'vcenter', 'keyval': 'id', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vcenter=vcenter)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vcs_virtual_ip_address_get(self, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type address: address
    :param address: Keyword argument tuple.

    :type address: unicode
    :param address: **address** tuple argument:  Virtual IP address (IPv4 Address/Prefix)

        * pattern restriction: ::

            '((0|(1[0-9]{0,2})|(2(([0-4][0-9]?)|(5[0-5]?)|([6'
            '-9]?)))|([3-9][0-9]?))\.){3}(0|(1[0-9]{0,2})|(2('
            '([0-4][0-9]?)|(5[0-5]?)|([6-9]?)))|([3-9][0-9]?)'
            ')/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vcs.virtual.ip.address', 'pybind.nos.v6_0_2b.brocade_vcs', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vcs.virtual.ip.address', 'pybind.nos.v7_0_1a.brocade_vcs', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vcs.virtual.ip.address', 'pybind.nos.v7_1_0.brocade_vcs', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.vcs.virtual.ip.address', 'pybind.slxos.v16r_1_00b.brocade_vcs', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.vcs.virtual.ip.address.inband', u'interface'), ('pybind.slxos.v16r_1_00b.vcs.virtual.ip.address.inband', u'interface'), ('pybind.nos.v7_0_1a.vcs.virtual.ip.address.inband', u'interface'), ('pybind.nos.v6_0_2b.vcs.virtual.ip.address.inband', u'interface')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vcs_virtual_ipv6_address_get(self, address=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type address: ipv6address
    :param address: Keyword argument tuple.

    :type ipv6address: unicode
    :param ipv6address: **address** tuple argument:  Virtual IPV6 address (IPv6 Address/Prefix)

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vcs.virtual.ipv6.address', 'pybind.nos.v6_0_2b.brocade_vcs', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vcs.virtual.ipv6.address', 'pybind.nos.v7_0_1a.brocade_vcs', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vcs.virtual.ipv6.address', 'pybind.nos.v7_1_0.brocade_vcs', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.vcs.virtual.ipv6.address', 'pybind.slxos.v16r_1_00b.brocade_vcs', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'address', 'keyval': 'ipv6address', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, address=address)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_get(self, vlan=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', 'pybind.nos.v6_0_2b.brocade_interface', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', 'pybind.nos.v7_0_1a.brocade_interface', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', 'pybind.nos.v7_1_0.brocade_interface', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter', u'interface'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp', u'static-group'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan', u'snooping'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'suppress-arp'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp', u'snooping'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmpPIM', u'snooping'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp.snooping', u'querier'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan', u'static-group'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6', u'mldvlan'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldPIM', u'snooping'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'spanning-tree'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'private-vlan'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.mac', u'access-group'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan', u'suppress-nd'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.arp.inspection', u'logging'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.private_vlan', u'association'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip', u'igmp'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.arp.inspection', u'filter'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ipv6.mldVlan.snooping', u'querier'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter', u'interface'), ('pybind.nos.v7_0_1a.interface_vlan.interface.vlan.ip.arp', u'inspection'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan', u'snooping'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpPIM', u'snooping'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping', u'igmps_static-group'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'spanning-tree'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.arp.inspection', u'logging'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'router-interface'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping.igmps_mrouter', u'igmps-interface'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping', u'igmps-querier'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.arp', u'inspection'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.arp.inspection', u'filter'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping', u'static-group'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping', u'querier'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping.mrouter', u'interface'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldPIM', u'snooping'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan', u'snooping'), ('pybind.slxos.v16r_1_00b.interface_vlan.vlan.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.private_vlan', u'association'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'spanning-tree'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp', u'static-group'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.mac', u'access-group'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.arp.inspection', u'filter'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan', u'private-vlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter', u'interface'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan.snooping', u'querier'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6', u'mldvlan'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.arp.inspection', u'logging'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter', u'interface'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp.snooping', u'querier'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip', u'igmp'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan', u'static-group'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.igmp', u'snooping'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ipv6.mldVlan', u'snooping'), ('pybind.nos.v6_0_2b.interface_vlan.interface.vlan.ip.arp', u'inspection'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan.snooping.mrouter', u'interface'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.arp.inspection', u'logging'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'suppress-nd'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.mac', u'access-group'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmpPIM', u'snooping'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp.snooping.mrouter', u'interface'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip', u'igmp'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan.snooping', u'querier'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp', u'static-group'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp', u'snooping'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldPIM', u'snooping'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6', u'mldvlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.private_vlan', u'association'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan', u'snooping'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.arp.inspection', u'filter'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.arp', u'inspection'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ipv6.mldVlan', u'static-group'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan.ip.igmp.snooping', u'querier'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'spanning-tree'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'private-vlan'), ('pybind.nos.v7_1_0.interface_vlan.interface.vlan', u'suppress-arp')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'vlan', 'keyval': 'name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_classifier_group_get(self, group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type group: groupid, oper, rule_name, ruleid
    :param group: Keyword argument tuple.

    :type groupid: long
    :param groupid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type oper: unicode
    :param oper: **group** tuple argument:  Add/Delete Rule.

        * enumeration restriction: ::

            ['add', 'delete']

    :type rule_name: unicode
    :param rule_name: **group** tuple argument.

        * enumeration restriction: ::

            ['rule']

    :type ruleid: long
    :param ruleid: **group** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vlan.classifier.group', 'pybind.nos.v6_0_2b.brocade_vlan', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vlan.classifier.group', 'pybind.nos.v7_0_1a.brocade_vlan', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vlan.classifier.group', 'pybind.nos.v7_1_0.brocade_vlan', 'pybind.nos.v7_1_0')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'group', 'keyval': 'groupid, oper, rule_name, ruleid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, group=group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_classifier_rule_get(self, rule=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0    

    **Instance Keyword Argument Tuple**:

    :type rule: ruleid
    :param rule: Keyword argument tuple.

    :type ruleid: long
    :param ruleid: **rule** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.vlan.classifier.rule', 'pybind.nos.v6_0_2b.brocade_vlan', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.vlan.classifier.rule', 'pybind.nos.v7_0_1a.brocade_vlan', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.vlan.classifier.rule', 'pybind.nos.v7_1_0.brocade_vlan', 'pybind.nos.v7_1_0')]
    composed_child_list = [('pybind.nos.v7_0_1a.vlan.classifier.rule', u'mac'), ('pybind.nos.v7_0_1a.vlan.classifier.rule', u'proto'), ('pybind.nos.v6_0_2b.vlan.classifier.rule', u'mac'), ('pybind.nos.v6_0_2b.vlan.classifier.rule', u'proto'), ('pybind.nos.v7_1_0.vlan.classifier.rule', u'mac'), ('pybind.nos.v7_1_0.vlan.classifier.rule', u'proto')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'rule', 'keyval': 'ruleid', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, rule=rule)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_ip_igmp_snooping_mrouter_interface_get(self, vlan=None, igmps_interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type igmps_interface: igmps_if_type, igmps_value
    :param igmps_interface: Keyword argument tuple.

    :type igmps_if_type: unicode
    :param igmps_if_type: **igmps_interface** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type igmps_value: unicode
    :param igmps_value: **igmps_interface** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping.igmps_mrouter.igmps_interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmps_interface', 'keyval': 'igmps_if_type, igmps_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, igmps_interface=igmps_interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_ip_igmp_snooping_static_group_get(self, vlan=None, igmps_static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type igmps_static_group: igmps_mcast_address, igmps_interface, igmps_if_type, igmps_value
    :param igmps_static_group: Keyword argument tuple.

    :type igmps_mcast_address: unicode
    :param igmps_mcast_address: **igmps_static_group** tuple argument:  Multicast Address to be Joined in the format A.B.C.D

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type igmps_interface: unicode
    :param igmps_interface: **igmps_static_group** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type igmps_if_type: unicode
    :param igmps_if_type: **igmps_static_group** tuple argument.

        * enumeration restriction: ::

            ['ethernet', 'port-channel']

    :type igmps_value: unicode
    :param igmps_value: **igmps_static_group** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ip.igmpVlan.snooping.igmps_static_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'igmps_static_group', 'keyval': 'igmps_mcast_address, igmps_interface, igmps_if_type, igmps_value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, igmps_static_group=igmps_static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_ipv6_mld_snooping_mrouter_interface_get(self, vlan=None, interface=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type interface: if_type, value
    :param interface: Keyword argument tuple.

    :type if_type: unicode
    :param if_type: **interface** tuple argument.

        * enumeration restriction: ::

            ['Ethernet', 'Port-channel']

    :type value: unicode
    :param value: **interface** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping.mrouter.interface', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'interface', 'keyval': 'if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, interface=interface)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_ipv6_mld_snooping_static_group_get(self, vlan=None, static_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type static_group: mcast_address, interface, if_type, value
    :param static_group: Keyword argument tuple.

    :type mcast_address: unicode
    :param mcast_address: **static_group** tuple argument:  Multicast Address to be Joined in format xxxx:xxxx/ml, xxxx:xxxx::/ml

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type interface: unicode
    :param interface: **static_group** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type if_type: unicode
    :param if_type: **static_group** tuple argument.

        * enumeration restriction: ::

            ['Ethernet', 'Port-channel']

    :type value: unicode
    :param value: **static_group** tuple argument.

        * length restriction: ::

            ['1..10']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.ipv6.mldVlan.snooping.static_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_group', 'keyval': 'mcast_address, interface, if_type, value', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, static_group=static_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vlan_mac_access_group_get(self, vlan=None, access_group=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vlan: name
    :param vlan: Keyword argument tuple.

    :type name: long
    :param name: **vlan** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    **Instance Keyword Argument Tuple**:

    :type access_group: mac_access_list, mac_direction, traffic_type
    :param access_group: Keyword argument tuple.

    :type mac_access_list: unicode
    :param mac_access_list: **access_group** tuple argument:  ACL_NAME;; Access List Name (Max 63)

        * length restriction: ::

            ['1..63']

        * pattern restriction: ::

            '[a-zA-Z0-9]{1}([-a-zA-Z0-9_]{0,62})'

    :type mac_direction: unicode
    :param mac_direction: **access_group** tuple argument.

        * enumeration restriction: ::

            ['in', 'out']

    :type traffic_type: unicode
    :param traffic_type: **access_group** tuple argument.

        * enumeration restriction: ::

            ['switched', 'routed']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan', u'vlan')]
    bindings_list = [('pybind.slxos.v16r_1_00b.interface_vlan.vlan.mac.access_group', 'pybind.slxos.v16r_1_00b.brocade_interface', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'access_group', 'keyval': 'mac_access_list, mac_direction', 'extra_keyval': 'mac_access_list, mac_direction, traffic_type'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vlan=vlan, access_group=access_group)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_get(self, vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast', u'arp-entry'), ('pybind.slxos.v16r_1_00b.vrf', u'route-target'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route', u'static-route-nh'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.import_', u'routes'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-static-route'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route', u'static-route-oif-vrf'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-oif'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh-vrf'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh-vrf'), ('pybind.slxos.v16r_1_00b.vrf', u'ip'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route', u'static-route-nh-vrf'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip', u'unicast'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route', u'link-local-static-route-nh'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6', u'unicast'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static', u'bfd'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.import_', u'routes'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd', u'bfd-ipv6-link-local-static-route'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route', u'static-route-nh'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static.bfd', u'bfd-static-route'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route', u'static-route-oif'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route', u'ipv6-static-route-oif-vrf'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static', u'bfd')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': 'vrf', 'keyval': 'vrf_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_arp_get(self, vrf=None, arp_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type arp_entry: arp_ip_address, mac_address_value, interfacename, Ethernet, Ve
    :param arp_entry: Keyword argument tuple.

    :type arp_ip_address: unicode
    :param arp_ip_address: **arp_entry** tuple argument:  A.B.C.D;; IP address of the ARP entry

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type mac_address_value: unicode
    :param mac_address_value: **arp_entry** tuple argument.

    :type interfacename: unicode
    :param interfacename: **arp_entry** tuple argument.

        * enumeration restriction: ::

            ['interface']

    :type Ethernet: unicode
    :param Ethernet: **arp_entry** tuple argument.

        * length restriction: ::

            ['3..16']

        * pattern restriction: ::

            '((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9]'
            '[0-9])(:[1-4])?)'

    :type Ve: long
    :param Ve: **arp_entry** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.arp_entry', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'arp_entry', 'keyval': 'arp_ip_address', 'extra_keyval': 'arp_ip_address, mac_address_value, interfacename, Ethernet, Ve'}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, arp_entry=arp_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_ip_import_routes_get(self, vrf=None, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_ip_route_get(self, vrf=None, static_route_nh_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type static_route_nh_vrf: static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop
    :param static_route_nh_vrf: Keyword argument tuple.

    :type static_route_next_vrf_dest: unicode
    :param static_route_next_vrf_dest: **static_route_nh_vrf** tuple argument:  A.B.C.D/L ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'

    :type next_hop_vrf: unicode
    :param next_hop_vrf: **static_route_nh_vrf** tuple argument:  Next Hop Vrf Name

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type static_route_next_hop: unicode
    :param static_route_next_hop: **static_route_nh_vrf** tuple argument:  A.B.C.D ;; Next hop IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_nh_vrf', 'keyval': 'static_route_next_vrf_dest, next_hop_vrf, static_route_next_hop', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, static_route_nh_vrf=static_route_nh_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv4_unicast_ip_route_static_bfd_get(self, vrf=None, bfd_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type bfd_static_route: bfd_static_route_dest, bfd_static_route_src
    :param bfd_static_route: Keyword argument tuple.

    :type bfd_static_route_dest: unicode
    :param bfd_static_route_dest: **bfd_static_route** tuple argument:  A.B.C.D ;; Destination IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type bfd_static_route_src: unicode
    :param bfd_static_route_src: **bfd_static_route** tuple argument:  A.B.C.D ;; Source IP address

        * pattern restriction: ::

            '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-'
            '5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-'
            '9]|25[0-5])(%[\p{N}\p{L}]+)?'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ip.unicast.ip.route.static.bfd.bfd_static_route', u'bfd-interval-attributes')]
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_static_route', 'keyval': 'bfd_static_route_dest, bfd_static_route_src', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, bfd_static_route=bfd_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv6_unicast_ipv6_import_routes_get(self, vrf=None, routes=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type routes: src_vrf, route_map
    :param routes: Keyword argument tuple.

    :type src_vrf: unicode
    :param src_vrf: **routes** tuple argument:  ASCII string;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type route_map: unicode
    :param route_map: **routes** tuple argument:  Word:1-63;;Route map name

        * pattern restriction: ::

            '[a-zA-Z]{1}([-a-zA-Z0-9\.\\\\@#\+\*\(\)=\{~\}%<>'
            '=$_\[\]\|]{0,62})'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.import_.routes', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'routes', 'keyval': 'src_vrf, route_map', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, routes=routes)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv6_unicast_ipv6_route_get(self, vrf=None, ipv6_static_route_oif_vrf=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type ipv6_static_route_oif_vrf: static_route_next_vrf_dest, next_hop_vrf, static_route_oif_type, static_route_oif_name
    :param ipv6_static_route_oif_vrf: Keyword argument tuple.

    :type static_route_next_vrf_dest: unicode
    :param static_route_next_vrf_dest: **ipv6_static_route_oif_vrf** tuple argument:  A:B::C:D/LEN ;; Destination IPv6 Prefix

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-'
            '9]{2})|(1[0-1][0-9])|(12[0-8])))'

    :type next_hop_vrf: unicode
    :param next_hop_vrf: **ipv6_static_route_oif_vrf** tuple argument:  Next Hop Vrf Name

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    :type static_route_oif_type: unicode
    :param static_route_oif_type: **ipv6_static_route_oif_vrf** tuple argument:  Outgoing interface type

        * enumeration restriction: ::

            ['ethernet', 'null', 've']

    :type static_route_oif_name: unicode
    :param static_route_oif_name: **ipv6_static_route_oif_vrf** tuple argument.

        * length restriction: ::

            ['1..16']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.ipv6_static_route_oif_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.link_local_static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static_route_nh_vrf', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static_route_oif', u'route-attributes')]
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'static_route_oif', 'keyval': 'static_route_dest, static_route_oif_type, static_route_oif_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, ipv6_static_route_oif_vrf=ipv6_static_route_oif_vrf)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_address_family_ipv6_unicast_ipv6_route_static_bfd_get(self, vrf=None, bfd_ipv6_link_local_static_route=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type bfd_ipv6_link_local_static_route: bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name
    :param bfd_ipv6_link_local_static_route: Keyword argument tuple.

    :type bfd_ipv6_link_local_dest: unicode
    :param bfd_ipv6_link_local_dest: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Destination IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_ipv6_link_local_src: unicode
    :param bfd_ipv6_link_local_src: **bfd_ipv6_link_local_static_route** tuple argument:  A:B::C:D ;; Source IPv6 address

        * pattern restriction: ::

            '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}('
            '(([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25'
            '[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5'
            ']|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+'
            ')?'

    :type bfd_interface_type: unicode
    :param bfd_interface_type: **bfd_ipv6_link_local_static_route** tuple argument:  Outgoing interface type

        * enumeration restriction: ::

            ['ethernet', 'null', 've']

    :type bfd_interface_name: unicode
    :param bfd_interface_name: **bfd_ipv6_link_local_static_route** tuple argument.

        * length restriction: ::

            ['1..16']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_static_route', u'bfd-ipv6-interval-attributes'), ('pybind.slxos.v16r_1_00b.vrf.address_family.ipv6.unicast.ipv6.route.static.bfd.bfd_ipv6_link_local_static_route', u'bfd-ipv6-interval-attributes')]
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'bfd_ipv6_link_local_static_route', 'keyval': 'bfd_ipv6_link_local_dest, bfd_ipv6_link_local_src, bfd_interface_type, bfd_interface_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, bfd_ipv6_link_local_static_route=bfd_ipv6_link_local_static_route)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vrf_route_target_get(self, vrf=None, route_target=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type vrf: vrf_name
    :param vrf: Keyword argument tuple.

    :type vrf_name: unicode
    :param vrf_name: **vrf** tuple argument:  <WORD:1-32>;;Name of VRF

        * length restriction: ::

            ['1..32']

        * pattern restriction: ::

            '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-'
            '9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA'
            '-Z0-9]\.?)|\.'

    **Instance Keyword Argument Tuple**:

    :type route_target: action, target_community
    :param route_target: Keyword argument tuple.

    :type action: unicode
    :param action: **route_target** tuple argument.

        * enumeration restriction: ::

            ['import', 'export', 'both']

    :type target_community: unicode
    :param target_community: **route_target** tuple argument:  ASN:nn;; Target VPN Extended Community

        * pattern restriction: ::

            '((\s*(((([1-9][0-9]{0,8})|(4[0-1][0-9]{8})|(42[0'
            '-8][0-9]{7})|(429[0-3][0-9]{6})|(4294[0-8][0-9]{'
            '5})|(42949[0-5][0-9]{4})|(429496[0-6][0-9]{3})|('
            '4294967[0-1][0-9]{2})|(42949672[0-8][0-9])|(4294'
            '96729[0-5])):(([1-9][0-9]{0,3})|([1-5][0-9]{4})|'
            '(6[0-4][0-9]{3})|(65[0-4][0-9]{2})|(655[0-2][0-9'
            '])|(6553[0-5])))|(((([1-9]|[1-9][0-9]|1[0-9]{2}|'
            '2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9]'
            '{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|'
            '1[0-9]{2}|2[0-4][0-9]|25[0-5])):(([1-9][0-9]{0,3'
            '})|([1-5][0-9]{4})|(6[0-4][0-9]{3})|(65[0-4][0-9'
            ']{2})|(655[0-2][0-9])|(6553[0-5])))))*)'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.slxos.v16r_1_00b.vrf', 'vrf')]
    bindings_list = [('pybind.slxos.v16r_1_00b.vrf.route_target', 'pybind.slxos.v16r_1_00b.brocade_vrf', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'vrf_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'route_target', 'keyval': 'action, target_community', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, vrf=vrf, route_target=route_target)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def vxlan_stats_acl_state_extended_stats_data_get(self, extended_stats_data=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type extended_stats_data: acl_name, seq_num
    :param extended_stats_data: Keyword argument tuple.

    :type acl_name: unicode
    :param acl_name: **extended_stats_data** tuple argument.

    :type seq_num: long
    :param seq_num: **extended_stats_data** tuple argument.

        * range restriction: ::

            ['0..4294967295']

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.slxos.v16r_1_00b.vxlan_stats_acl_state.extended_stats_data', 'pybind.slxos.v16r_1_00b.brocade_ssm_operational', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'extended_stats_data', 'keyval': 'acl_name, seq_num', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, extended_stats_data=extended_stats_data)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def zoning_defined_configuration_alias_get(self, alias=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type alias: alias_name
    :param alias: Keyword argument tuple.

    :type alias_name: unicode
    :param alias_name: **alias** tuple argument:  <WORD>;;Alias-Name

        * length restriction: ::

            ['1..64']

        * pattern restriction: ::

            '[0-9a-zA-Z_]{1,64}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.alias', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.alias', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.alias', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.zoning.defined_configuration.alias', u'member-entry'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.alias', u'member-entry'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.alias', u'member-entry'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias', u'member-entry')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'alias', 'keyval': 'alias_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alias=alias)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def zoning_defined_configuration_alias_member_entry_get(self, alias=None, member_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type alias: alias_name
    :param alias: Keyword argument tuple.

    :type alias_name: unicode
    :param alias_name: **alias** tuple argument:  <WORD>;;Alias-Name

        * length restriction: ::

            ['1..64']

        * pattern restriction: ::

            '[0-9a-zA-Z_]{1,64}'

    **Instance Keyword Argument Tuple**:

    :type member_entry: alias_entry_name
    :param member_entry: Keyword argument tuple.

    :type alias_entry_name: unicode
    :param alias_entry_name: **member_entry** tuple argument:  <WWN>;;Member-Name - add one or more WWNmembers to an alias, the [no] option removesonly one member at a time.

        * pattern restriction: ::

            '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){7})(;[0-9a-fA-F'
            ']{2}(:[0-9a-fA-F]{2}){7})*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.zoning.defined_configuration.alias', u'alias'), ('pybind.nos.v7_1_0.zoning.defined_configuration.alias', u'alias'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias', u'alias'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.alias', u'alias')]
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.alias.member_entry', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.alias.member_entry', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.alias.member_entry', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.alias.member_entry', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'alias_name', 'extra_keyval': ''}, {'keyval': 'alias_name', 'extra_keyval': ''}, {'keyval': 'alias_name', 'extra_keyval': ''}, {'keyval': 'alias_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'alias_entry_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, alias=alias, member_entry=member_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def zoning_defined_configuration_cfg_get(self, cfg=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type cfg: cfg_name
    :param cfg: Keyword argument tuple.

    :type cfg_name: unicode
    :param cfg_name: **cfg** tuple argument:  <WORD>;;CFG-Name

        * length restriction: ::

            ['1..64']

        * pattern restriction: ::

            '[0-9a-zA-Z_]{1,64}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.cfg', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v7_1_0.zoning.defined_configuration.cfg', u'member-zone'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg', u'member-zone'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg', u'member-zone'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg', u'member-zone')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'cfg', 'keyval': 'cfg_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cfg=cfg)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def zoning_defined_configuration_cfg_member_zone_get(self, cfg=None, member_zone=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type cfg: cfg_name
    :param cfg: Keyword argument tuple.

    :type cfg_name: unicode
    :param cfg_name: **cfg** tuple argument:  <WORD>;;CFG-Name

        * length restriction: ::

            ['1..64']

        * pattern restriction: ::

            '[0-9a-zA-Z_]{1,64}'

    **Instance Keyword Argument Tuple**:

    :type member_zone: zone_name
    :param member_zone: Keyword argument tuple.

    :type zone_name: unicode
    :param zone_name: **member_zone** tuple argument:  <WORD>;;Zone-Name - add one or more zonemembers to a cfg, the [no] option removesonly one member at a time.

        * pattern restriction: ::

            '([0-9a-zA-Z_]{1,64})(;([0-9a-zA-Z_]{1,64}))*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_1_0.zoning.defined_configuration.cfg', u'cfg'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg', u'cfg'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg', u'cfg'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg', u'cfg')]
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.cfg.member_zone', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.cfg.member_zone', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.cfg.member_zone', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.cfg.member_zone', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'cfg_name', 'extra_keyval': ''}, {'keyval': 'cfg_name', 'extra_keyval': ''}, {'keyval': 'cfg_name', 'extra_keyval': ''}, {'keyval': 'cfg_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_zone', 'keyval': 'zone_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, cfg=cfg, member_zone=member_zone)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def zoning_defined_configuration_zone_get(self, zone=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Instance Keyword Argument Tuple**:

    :type zone: zone_name
    :param zone: Keyword argument tuple.

    :type zone_name: unicode
    :param zone_name: **zone** tuple argument:  <WORD>;;Zone-Name

        * length restriction: ::

            ['1..64']

        * pattern restriction: ::

            '[0-9a-zA-Z_]{1,64}'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = []
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.zone', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.zone', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.zone', u'member-entry'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone', u'member-entry'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone', u'member-entry'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.zone', u'member-entry')]
    compositions_keyval_list = []
    bindings_keyval = {'kwargs_key_name': u'zone', 'keyval': 'zone_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, zone=zone)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

def zoning_defined_configuration_zone_member_entry_get(self, zone=None, member_entry=None, resource_depth=1, api_timeout=''):
    """
    This is an auto-generated method for the PySwitchLib.

    **Supported Versions**:

        * NOS: 6.0.2b, 7.0.1a, 7.1.0
        * SLXOS: 16r.1.00b    

    **Parent Instance Keyword Argument Tuple(s)**:

    :type zone: zone_name
    :param zone: Keyword argument tuple.

    :type zone_name: unicode
    :param zone_name: **zone** tuple argument:  <WORD>;;Zone-Name

        * length restriction: ::

            ['1..64']

        * pattern restriction: ::

            '[0-9a-zA-Z_]{1,64}'

    **Instance Keyword Argument Tuple**:

    :type member_entry: entry_name
    :param member_entry: Keyword argument tuple.

    :type entry_name: unicode
    :param entry_name: **member_entry** tuple argument:  <WWN> and/or <Alias-Name>;;Member-Name - add one or more WWN and/or Alias-Namemembers to a zone, the [no] option removesonly one member at a time.

        * pattern restriction: ::

            '(([0-9a-zA-Z_]{1,64})|([0-9a-fA-F]{2}(:[0-9a-fA-'
            'F]{2}){7}))(;(([0-9a-zA-Z_]{1,64})|([0-9a-fA-F]{'
            '2}(:[0-9a-fA-F]{2}){7})))*'

    :type resource_depth: long
    :param resource_depth: Maximum depth for returned results from the GET response. (Default: 1 level(s) deep.)

    :type api_timeout: long or tuple(long, long)
    :param api_timeout: Timeout for connection and response in seconds.  If a tuple is specified, then the first value is for the connection timeout and the second value is for the response timeout.

    :rtype: (*bool, list*)
    :returns: Returns a tuple.

        #. **api_success** (*bool*) - The success or failure of the API.
        #. **details** (*list*) - List of REST request/response dictionaries, keyed by the asset's ip address.

    :raises ValueError: If the argument value does not meet type requirements or value restrictions.
    :raises ConnectionError: If requests module connection or response timeout occurs.
    :raises RestInterfaceError: If requests module does not get a successful response from the rest URI.
    """

    operation_type = 'get'
    compositions_list = [('pybind.nos.v7_0_1a.zoning.defined_configuration.zone', u'zone'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone', u'zone'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone', u'zone'), ('pybind.nos.v6_0_2b.zoning.defined_configuration.zone', u'zone')]
    bindings_list = [('pybind.nos.v6_0_2b.zoning.defined_configuration.zone.member_entry', 'pybind.nos.v6_0_2b.brocade_zone', 'pybind.nos.v6_0_2b'), ('pybind.nos.v7_0_1a.zoning.defined_configuration.zone.member_entry', 'pybind.nos.v7_0_1a.brocade_zone', 'pybind.nos.v7_0_1a'), ('pybind.nos.v7_1_0.zoning.defined_configuration.zone.member_entry', 'pybind.nos.v7_1_0.brocade_zone', 'pybind.nos.v7_1_0'), ('pybind.slxos.v16r_1_00b.zoning.defined_configuration.zone.member_entry', 'pybind.slxos.v16r_1_00b.brocade_zone', 'pybind.slxos.v16r_1_00b')]
    composed_child_list = []
    compositions_keyval_list = [{'keyval': 'zone_name', 'extra_keyval': ''}, {'keyval': 'zone_name', 'extra_keyval': ''}, {'keyval': 'zone_name', 'extra_keyval': ''}, {'keyval': 'zone_name', 'extra_keyval': ''}]
    bindings_keyval = {'kwargs_key_name': u'member_entry', 'keyval': 'entry_name', 'extra_keyval': ''}
    composed_child_leafval_list = []
    pybind_object = self._get_pybind_object(compositions_list=compositions_list, bindings_list=bindings_list, composed_child_list=composed_child_list, compositions_keyval_list=compositions_keyval_list, bindings_keyval=bindings_keyval, composed_child_leafval_list=composed_child_leafval_list, zone=zone, member_entry=member_entry)

    return self._config_get_worker(operation_type=operation_type, pybind_object=pybind_object, bindings_list=bindings_list, composed_child_list=composed_child_list, resource_depth=resource_depth, timeout=api_timeout)

