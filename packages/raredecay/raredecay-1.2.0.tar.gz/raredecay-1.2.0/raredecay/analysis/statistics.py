# -*- coding: utf-8 -*-
"""
Created on Thu Oct 20 20:00:33 2016

@author: Jonas Eschle 'Mayou36'

This modul contains several tools like fits.
"""
import numpy as np

import ROOT
from ROOT import RooRealVar, RooArgList, RooArgSet, RooAddPdf, RooDataSet
from ROOT import RooFit, RooCBShape, RooExponential
# from ROOT import RooGaussian, RooMinuit
from ROOT import TCanvas  # HACK to prevent not plotting canvas by root_numpy import. BUG.
from root_numpy import array2tree

from raredecay.globals_ import out

# from raredecay import meta_config


def fit_mass(data, column='B_M', n_bkg=None, n_sig=None, blind=False, second_storage=None):
    """Mass-fit but blind function not yet implemented"""

    if not (isinstance(column, str) or len(column) == 1):
        raise ValueError("Fitting to several columns " + str(column) + " not supported.")
    data_array, _t1, _t2 = data.make_dataset(second_storage, columns=column)
    del _t1, _t2

    # double crystalball variables
    min_x, max_x = min(data_array[column]), max(data_array[column])
#    x_low = RooRealVar("x", "x variable", min_x, 5100)
#    x_high = RooRealVar("x", "x variable", 5400, max_x)
#    x = x_low + x_high
    x = RooRealVar("x", "x variable", min_x, max_x)
    mean = RooRealVar("mean", "Mean of Double CB PDF", 5300, 5000, 6000)
    sigma = RooRealVar("sigma", "Sigma of Double CB PDF", 14, 0, 200)
    alpha_0 = RooRealVar("alpha_0", "alpha_0 of one side", 1., 0, 5)
    alpha_1 = RooRealVar("alpha_1", "alpha_1 of other side", -1, -5, 0.)
    lambda_0 = RooRealVar("lambda_0", "Exponent of one side", 5, 0.0, 20)
    lambda_1 = RooRealVar("lambda_1", "Exponent of other side", 7, 0.0, 25)

    # create data
    data_array = np.array([i[0] for i in data_array.as_matrix()])
    data_array.dtype = [('x', np.float64)]
    tree1 = array2tree(data_array, "x")
    data_np = RooDataSet("data_np", "Data generated by numpy", RooArgSet(x), RooFit.Import(tree1))

    # pdf construction
    frac = RooRealVar("frac", "Fraction of crystal ball pdfs", 0.5)

    crystalball1 = RooCBShape("crystallball1", "First CrystalBall PDF", x,
                              mean, sigma, alpha_0, lambda_0)
    crystalball2 = RooCBShape("crystallball2", "Second CrystalBall PDF", x,
                              mean, sigma, alpha_1, lambda_1)
    doubleCB = RooAddPdf("doubleCB", "Double CrystalBall PDF",
                         crystalball1, crystalball2, frac)

#    nsig = RooRealVar("nsig", "Number of signals events", 10000, 0, 1000000)
    # TODO: fix below
    if n_bkg is None:
        nbkg = RooRealVar("nbkg", "Number of background events", 10000, 0, 1000000)
    elif n_bkg >= 0:
        nbkg = RooRealVar("nbkg", "Number of background events", int(n_bkg))
    else:
        raise ValueError("n_bkg is not >= 0 or None")

    if n_sig is None:
        nsig = RooRealVar("nsig", "Number of signal events", 10000, 0, 1000000)
    elif n_sig >= 0:
        nsig = RooRealVar("nsig", "Number of signal events", int(n_sig))
    else:
        raise ValueError("n_sig is not >= 0")

    if n_sig == n_bkg == 0:
        raise ValueError("n_sig as well as n_bkg is 0...")

    lambda_exp = RooRealVar("lambda_exp", "lambda exp pdf bkg", -0.1, -10., 10.)
    bkg_pdf = RooExponential("bkg_pdf", "Background PDF exp", x, lambda_exp)

    comb_pdf = RooAddPdf("comb_pdf", "Combined DoubleCB and bkg PDF",
                         RooArgList(doubleCB, bkg_pdf), RooArgList(nsig, nbkg))

    # create test dataset
#    mean_gauss = RooRealVar("mean_gauss", "Mean of Gaussian", 5553, -10000, 10000)
#    sigma_gauss = RooRealVar("sigma_gauss", "Width of Gaussian", 20, 0.0001, 300)
#    gauss1 = RooGaussian("gauss1", "Gaussian test dist", x, mean_gauss, sigma_gauss)
#    lambda_data = RooRealVar("lambda_data", "lambda exp data", -.002)
#    exp_data = RooExponential("exp_data", "data example exp", x, lambda_data)
#    frac_data = RooRealVar("frac_data", "Fraction PDF of data", 0.15)
#
#    data_pdf = RooAddPdf("data_pdf", "Data PDF", gauss1, exp_data, frac_data)
#    data = data_pdf.generate(RooArgSet(x), 30000)

#    HACK
    data = data_np
    print data

#    data.printValue()
#    xframe = x.frame()
#    data_pdf.plotOn(xframe)

#    comb_pdf.fitTo(data, RooFit.Extended(ROOT.kTRUE), RooFit.NumCPU(meta_config.get_n_cpu()))
    # HACK to get 8 cores in testing

    result_fit = comb_pdf.fitTo(data, RooFit.Extended(ROOT.kTRUE), RooFit.NumCPU(8))
    print nsig, type(n_sig)
    sframe = nsig.frame()
    lnL = comb_pdf.createNLL(data)
    lnProfileL = lnL.createProfile(ROOT.RooArgSet(nsig))
    lnProfileL.plotOn(sframe)
    sframe.Draw()

#    nll_plot = RooRealVar("nll_plot", "NLL plotting range", 0.01, 0.99)
#    nll_frame = nll_plot.frame()
#    my_nll = comb_pdf.createNLL(data, RooFit.NumCPU(8))
#    RooMinuit(my_nll).migrad()
#    my_nll.plotOn(nll_frame)
#    nll_frame.Draw()
#    data.plotOn(xframe)
#    comb_pdf.plotOn(xframe)
#    xframe.Draw()

#    return xframe

    params = comb_pdf.getVariables()
    params.Print("v")


if __name__ == '__main__':
    data = "empty"
#    data = RooDataSet("data", )
    from raredecay.tools.data_storage import HEPDataStorage
    import pandas as pd

    data = HEPDataStorage(pd.DataFrame(np.random.normal(loc=5400, scale=100, size=(10000, 2)),
                                       columns=['x', 'y']))
    fit_mass(data=data, column='x')
    print "finished"
