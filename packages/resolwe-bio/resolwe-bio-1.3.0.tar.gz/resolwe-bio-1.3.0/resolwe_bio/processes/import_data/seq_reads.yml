# =================================
# Import - Sequencing Reads (FASTQ)
# =================================
---

- slug: upload-fastq-single
  name: Reads (single-end)
  requirements:
    expression-engine: jinja
  data_name: '{{ src.0.file|default("?") }}'
  version: 1.0.22
  type: data:reads:fastq:single
  flow_collection: sample
  category: upload
  persistence: RAW
  description: >
    Upload NGS reads in FASTQ format.
  input:
    - name: src
      label: NGS reads (FASTQ)
      type: list:basic:file
      description: >
        NGS reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
  output:
    - name: fastq
      label: Reads file
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      {% for reads in src %}
        re-import "{{ reads.file_temp|default(reads.file) }}" "{{ reads.file }}" "fastq|fq|bz2" "fastq" 0.5
      {% endfor %}

      for reads in `ls -v *.fastq.gz`
      do
        FASTQGZ=${FASTQGZ}"$reads "
      done

      re-save-file-list fastq ${FASTQGZ}

      for reads in `ls -v *.fastq`
      do
        FASTQ=${FASTQ}"$reads "
      done

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc ${FASTQ} --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for report_dir in ./fastqc/*/
      do
        ENCODING=`parse_encoding_type.py ${report_dir}fastqc_data.txt`
        if [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 encoding in supported."
        fi
      done

      for fqc in `ls -v *_fastqc.zip`
      do
        FASTQC=${FASTQC}"$fqc "
        NAME=`basename $fqc _fastqc.zip`
        FASTQC_URL=${FASTQC_URL}"{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]} "
      done

      re-save-file-list fastqc_archive ${FASTQC}
      re-save-list fastqc_url ${FASTQC_URL}

- slug: upload-fastq-paired
  name: Reads (paired-end)
  requirements:
    expression-engine: jinja
  data_name: '{{ src1.0.file|default("?") }}'
  version: 1.0.22
  type: data:reads:fastq:paired
  category: upload
  flow_collection: sample
  persistence: RAW
  description: >
    Upload paired-end reads in FASTQ format.
  input:
    - name: src1
      label: NGS upstream reads (FASTQ)
      type: list:basic:file
      description: >
        NGS reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
    - name: src2
      label: NGS downstream reads (FASTQ)
      type: list:basic:file
      description: >
        NGS reads in FASTQ format. Supported extensions: .fastq.gz (preferred), .fq.* or .fastq.*
      validate_regex: '(\.(fastq|fq)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      {% for reads in src1 %}
        re-import "{{ reads.file_temp|default(reads.file) }}" "{{ reads.file }}" "fastq|fq|bz2" "fastq" 0.5
        FW_FASTQGZ=${FW_FASTQGZ}"${NAME}.fastq.gz "
        FW_FASTQC=${FW_FASTQC}"${NAME}_fastqc.zip "
        FW_FASTQC_URL=${FW_FASTQC_URL}"{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]} "
      {% endfor %}

      {% for reads in src2 %}
        re-import "{{ reads.file_temp|default(reads.file) }}" "{{ reads.file }}" "fastq|fq|bz2" "fastq" 0.5
        RW_FASTQGZ=${RW_FASTQGZ}"${NAME}.fastq.gz "
        RW_FASTQC=${RW_FASTQC}"${NAME}_fastqc.zip "
        RW_FASTQC_URL=${RW_FASTQC_URL}"{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]} "
      {% endfor %}

      re-save-file-list fastq ${FW_FASTQGZ}
      re-save-file-list fastq2 ${RW_FASTQGZ}

      for reads in `ls -v *.fastq`
      do
        FASTQ=${FASTQ}"$reads "
      done

      echo "Postprocessing FastQC..."
      mkdir "fastqc" && fastqc ${FASTQ} --extract --outdir="fastqc" 2> stderr.txt
      re-checkrc "Failed while processing with FastQC."
      if [[ $(grep --text "Failed to process file" stderr.txt) != "" ]]
      then
        re-error "Failed while processing with FastQC."
      fi

      mv fastqc/*_fastqc.zip .

      for report_dir in ./fastqc/*/
      do
        ENCODING=`parse_encoding_type.py ${report_dir}fastqc_data.txt`
        if [ "${ENCODING}" != "Sanger / Illumina 1.9" ]; then
          re-error "Only Sanger / Illumina 1.9 encoding in supported."
        fi
      done

      re-save-file-list fastqc_archive ${FW_FASTQC}
      re-save-file-list fastqc_archive2 ${RW_FASTQC}
      re-save-list fastqc_url ${FW_FASTQC_URL}
      re-save-list fastqc_url2 ${RW_FASTQC_URL}
