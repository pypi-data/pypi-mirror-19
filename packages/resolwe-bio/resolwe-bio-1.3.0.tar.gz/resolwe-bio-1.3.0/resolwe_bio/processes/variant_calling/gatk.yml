# ======================
# Variant calling - GATK
# ======================
---

- slug: vc-gatk
  name: Variant calling (GATK)
  requirements:
    expression-engine: jinja
  data_name: "Called variants ({{ mapping.bam.file|basename|default('?') }})"
  version: 1.0.13
  type: data:variants:vcf:gatk
  category: analyses:variants
  flow_collection: sample
  persistence: CACHED
  description: >
    GATK varint calling. Note: Usage of Genome Analysis Toolkit requires a licence.
  input:
    - name: genome
      label: Reference genome
      type: data:genome:fasta
      required: true
    - name: mapping
      label: Mapped reads
      type: data:alignment:bam
      required: true
    - name: br_and_ind_ra
      label: Do variant base recalibration and indel realignment
      type: basic:boolean
      default: true
    - name: collectinsertsizemetrics
      label: Collect insert size metrics
      type: basic:boolean
      default: false
      description: >
        Writes a file containing metrics about the statistical distribution of insert size (excluding duplicates) and generates a Histogram plot.
    - name: known_sites
      label: Known sites
      type: data:variants:vcf
      required: false
    - name: known_indels
      label: Known indels
      type: list:data:variants:vcf
      required: false
    - name: reads_info
      label: Reads information
      group:
      - name: ID
        label: Read group identifier
        type: basic:string
        required: true
        default: x
      - name: SM
        label: Sample
        type: basic:string
        required: true
        default: x
        description: >
          Sample. Use pool name where a pool is being sequenced.
      - name: PL
        label: Platform/technology
        type: basic:string
        required: true
        description: >
          Platform/technology used to produce the reads.
        choices:
          - label: Capillary
            value: Capillary
          - label: Ls454
            value: Ls454
          - label: Illumina
            value: Illumina
          - label: SOLiD
            value: SOLiD
          - label: Helicos
            value: Helicos
          - label: IonTorrent
            value: IonTorrent
          - label: Pacbio
            value: Pacbio
        default: Illumina
        required: true
      - name: LB
        label: Library
        type: basic:string
        default: x
        required: true
      - name: PU
        label: Platform unit
        type: basic:string
        description: >
          Platform unit (e.g. flowcell-barcode.lane for Illumina or slide for SOLiD). Unique identifier.
        default: x
        required: true
      - name: CN
        label: Sequencing center
        type: basic:string
        description: >
          Name of sequencing center producing the read.
        default: x
        required: true
      - name: DT
        label: Date
        type: basic:date
        description: >
          Date the run was produced.
        required: true
    - name: Varc_param
      label: Parameters of HaplotypeCaller
      group:
      - name: stand_emit_conf
        label: Emission confidence threshold
        type: basic:integer
        required: true
        default: 10
        description: >
           The minimum confidence threshold (phred-scaled) at which the program should emit sites that appear to be possibly variant.
      - name: stand_call_conf
        label: Calling confidence threshold
        type: basic:integer
        required: true
        default: 30
        description: >
          the minimum confidence threshold (phred-scaled) at which the program should emit variant sites as called. If a site's associated genotype has a confidence score lower than the calling threshold, the program will emit the site as filtered and will annotate it as LowQual. This threshold separates high confidence calls from low confidence calls.
  output:
    - name: vcf
      label: Called variants file
      type: basic:file
    - name: ism
      label: Insert size metrics
      type: basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      echo "uncompressing genome, indexing"
      GENOME_NAME=`basename '{{ genome.fasta.file }}' .fasta.gz`
      gzip -cd {{ genome.fasta.file }} > "${GENOME_NAME}.fasta"
      samtools faidx "${GENOME_NAME}.fasta"
      picard-tools CreateSequenceDictionary R="${GENOME_NAME}.fasta" O="${GENOME_NAME}.dict"
      echo "{\"proc.progress\":0.05,\"proc.rc\":$?}"

      echo "bam files processing"
      BAM_FILE=`basename '{{ mapping.bam.file }}' .bam`

      echo "sorting, marking duplicates, indexing"
      picard-tools MarkDuplicates I="{{ mapping.bam.file }}" O="${BAM_FILE}_inds.bam" METRICS_FILE=junk.txt VALIDATION_STRINGENCY=LENIENT
      echo "{\"proc.progress\":0.1,\"proc.rc\":$?}"
      picard-tools AddOrReplaceReadGroups I="${BAM_FILE}_inds.bam" O="${BAM_FILE}_indh.bam" RGID={{reads_info.ID}} RGLB={{reads_info.LB}} RGPL={{reads_info.PL}} RGPU={{reads_info.PU}} RGSM={{reads_info.SM}} RGCN={{reads_info.CN}} RGDT={{reads_info.DT}}
      echo "{\"proc.progress\":0.15,\"proc.rc\":$?}"
      samtools index "${BAM_FILE}_indh.bam"
      echo "{\"proc.progress\":0.2,\"proc.rc\":$?}"

      {% if collectinsertsizemetrics %}
        picard-tools CollectInsertSizeMetrics I="${BAM_FILE}_indh.bam" O="${BAM_FILE}".CollectInsertSizeMetrics H="${BAM_FILE}".CollectIsertSizeMetrics.pdf VALIDATION_STRINGENCY=LENIENT
        echo "{\"proc.progress\":0.25,\"proc.rc\":$?,\"ism\":{\"file\":\"${BAM_FILE}.CollectIsertSizeMetrics.pdf\"}}"
      {% endif %}

      {% if br_and_ind_ra %}
        echo "indel realignment"
        gatk -T RealignerTargetCreator -I "${BAM_FILE}_indh.bam" -R "${GENOME_NAME}.fasta" -o indel_interval.bed {% if known_indels %} -known {% for indelx in known_indels %}{{ indelx.vcf.file }} {% endfor %}{% endif %}
        echo "{\"proc.progress\":0.3,\"proc.rc\":$?}"
        gatk -T IndelRealigner -I "${BAM_FILE}_indh.bam" -R "${GENOME_NAME}.fasta" -o "${BAM_FILE}_noncal.bam" -targetIntervals indel_interval.bed -compress 0
        echo "{\"proc.progress\":0.35,\"proc.rc\":$?}"

        echo "Base recalibration"
        gatk -T BaseRecalibrator -I "${BAM_FILE}_noncal.bam"  -R "${GENOME_NAME}.fasta" -o recal_data.table -knownSites '{{ known_sites.vcf.file }}'
        echo "{\"proc.progress\":0.4,\"proc.rc\":$?}"
        gatk -T PrintReads -I "${BAM_FILE}_noncal.bam" -R "${GENOME_NAME}.fasta" -o "${BAM_FILE}_final.bam" -BQSR recal_data.table
        echo "{\"proc.progress\":0.45,\"proc.rc\":$?}"
      {% else %}
        mv "${BAM_FILE}_indh.bam" "${BAM_FILE}_final.bam"
      {% endif %}

      samtools index "${BAM_FILE}_final.bam"

      echo "variant calling"
      gatk -T UnifiedGenotyper -I "${BAM_FILE}_final.bam" -R "${GENOME_NAME}.fasta" -o "${BAM_FILE}_GATKvariants.vcf" {% if known_sites %} --dbsnp {{ known_sites.vcf.file }} {% endif %} -stand_call_conf {{ Varc_param.stand_call_conf }} -stand_emit_conf {{ Varc_param.stand_emit_conf }} -rf ReassignOneMappingQuality -RMQF 255 -RMQT 60
      echo "{\"proc.progress\":0.8,\"proc.rc\":$?}"

      #echo "hard filtering"
      #gatk -V "${BAM_FILE}_haplotype.vcf" -o "${BAM_FILE}_filtered.vcf" -T VariantFiltration -R "${GENOME_NAME}.fasta" --filterName GATKstandard --filterExpression "QUAL < 30 || QD < 5.0"
      #vcftools --vcf "${BAM_FILE}_filtered.vcr"
      #mv "${BAM_FILE}_filtered.vcr" "${BAM_FILE}_GATKvariants.vcf"

      bgzip -c "${BAM_FILE}_GATKvariants.vcf" > "${BAM_FILE}_GATKvariants.vcf.bgz"
      echo "{\"proc.progress\":0.9,\"proc.rc\":$?}"
      tabix -p vcf "${BAM_FILE}_GATKvariants.vcf.bgz"
      echo "{\"proc.progress\":0.95,\"proc.rc\":$?}"

      echo "{\"proc.progress\":1,\"vcf\":{\"file\": \"${BAM_FILE}_GATKvariants.vcf\", \"refs\":[\"${BAM_FILE}_GATKvariants.vcf.bgz\",\"${BAM_FILE}_GATKvariants.vcf.bgz.tbi\"] }}"
