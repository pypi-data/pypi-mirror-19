# ===================
# Import tabular file
# ===================
---

- slug: upload-tab-file
  name: Tabular file
  requirements:
    expression-engine: jinja
  data_name: '{{ src.file|default("?") }}'
  version: 0.0.2
  type: data:file:tab
  category: upload
  persistence: RAW
  description: >
    Upload tabular file.
  input:
    - name: src
      label: CSV file
      type: basic:file
      description: >
        Tabular file. Supported extensions: .txt, .tsv, .tab, .csv, .xls, .xlsx or *.gz
      validate_regex: '(\.(csv|tab|tsv|txt|xls|xlsx)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$'
  output:
    - name: file
      label: Tabular file
      type: basic:file
    - name: src_file
      label: Source file
      type: basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      if [[ '.{{ src.file }}' =~ \.(xls|xlsx)$ ]]; then
        mv "{{ src.file_temp }}" "{{ src.file }}"
        FILENAME=$(basename "{{ src.file }}")  # get file name
        NAME="${FILENAME%.*}"  # remove extension
        parse_tabular_file.py "{{ src.file }}" "${NAME}.tab.gz"
        re-checkrc
        re-save-file src_file "{{ src.file }}"
        re-save-file file "${NAME}.tab.gz"
      elif [[ '.{{ src.file }}' =~ (\.(csv)(|\.gz|\.bz2|\.tgz|\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z))|(\.bz2)$ ]]; then
        re-import "{{ src.file_temp }}" "{{ src.file }}" "csv" "csv" 0.1
        parse_tabular_file.py "${NAME}.csv" "${NAME}.tab.gz"
        re-checkrc
        re-save-file src_file "{{ src.file }}"
        re-save-file file "${NAME}.tab.gz"
      else
        re-import "{{ src.file_temp }}" "{{ src.file }}" "tab|tsv|txt" "tab" 0.1
        parse_tabular_file.py "${NAME}.tab" "${NAME}_tabular.tab.gz"
        re-checkrc
        re-save-file src_file "{{ src.file }}"
        re-save-file file "${NAME}_tabular.tab.gz"
      fi
