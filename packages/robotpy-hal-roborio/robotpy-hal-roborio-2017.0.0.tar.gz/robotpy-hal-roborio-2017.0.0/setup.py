#!/usr/bin/env python3

import atexit
from os.path import dirname, exists, join
import shutil
import subprocess
import sys
from urllib.request import urlretrieve, urlcleanup

from setuptools import setup

setup_dir = dirname(__file__)
git_dir = join(setup_dir, '..', '.git')
base_package = 'hal_impl'
version_file = join(setup_dir, base_package, 'version.py')
hal_version = '2017.1.1'

#
# Code for downloading/extracting HAL shared library files
# - Used by wpilib tests
#

hal_site = 'http://first.wpi.edu/FRC/roborio/maven/release/edu/wpi/first/wpilib/athena-runtime'
hal_zip = 'athena-runtime-%s.zip' % hal_version

hal_base_files = [
    'libHALAthena.so',
    'libwpiutil.so',
]

hal_files = [join(setup_dir, base_package, f) for f in hal_base_files]

__version__ = "master"
__hal_version__ = None

# Read the version if it exists
if exists(version_file):
    with open(version_file, 'r') as fp:
        exec(fp.read(), globals())

def download_halzip():
    print("Downloading", hal_zip)
    
    def _reporthook(count, blocksize, totalsize):
        percent = int(count*blocksize*100/totalsize)
        sys.stdout.write("\r%02d%%" % percent)
        sys.stdout.flush()

    filename, headers = urlretrieve("%s/%s/%s" % (hal_site, hal_version, hal_zip),
                                    reporthook=_reporthook)
    atexit.register(urlcleanup)
    return filename

hal_download_zip = None

# Download the HAL if required
if not all(map(exists, hal_files)) or __hal_version__ != hal_version:
    import zipfile
    
    hal_download_zip = download_halzip()
    with zipfile.ZipFile(hal_download_zip) as z:
        for bf, f in zip(hal_base_files, hal_files):
            with z.open(join('lib', bf), 'r') as zfp:
                with open(f, 'wb') as fp:
                    shutil.copyfileobj(zfp, fp)

# Automatically generate a version.py based on the git version
if exists(git_dir):
    p = subprocess.Popen(["git", "describe", "--tags", "--long", "--dirty=-dirty"],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    out, err = p.communicate()
    # Make sure the git version has at least one tag
    if err:
        print("Error: You need to create a tag for this repo to use the builder")
        sys.exit(1)

    # Convert git version to PEP440 compliant version
    # - Older versions of pip choke on local identifiers, so we can't include the git commit
    version, commits, local = out.decode('utf-8').rstrip().split('-', 2)
    if commits != '0' or '-dirty' in local:
        version = '%s.post0.dev%s' % (version, commits)
else:
    version = __version__

# Generate a new version.py if required
if not exists(version_file) or __version__ != version or __hal_version__ != hal_version:
    with open(version_file, 'w') as fp:
        fp.write("# Autogenerated by setup.py\n__version__ = '{0}'\n__hal_version__ = '{1}'".format(version, hal_version))


with open(join(setup_dir, 'README.rst'), 'r') as readme_file:
    long_description = readme_file.read()

if __name__ == '__main__':
    setup(
        name='robotpy-hal-roborio',
        version=version,
        description='WPILib HAL layer for roboRIO platform',
        long_description=long_description,
        author='Peter Johnson, Dustin Spicuzza',
        author_email='robotpy@googlegroups.com',
        url='https://github.com/robotpy',
        keywords='frc first robotics hal can',
        packages=['hal_impl'],
        package_data={'hal_impl': hal_base_files},
        install_requires='robotpy-hal-base==' + version, # is this a bad idea?
        license="BSD License",
        classifiers=[
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "Intended Audience :: Education",
            "License :: OSI Approved :: BSD License",
            "Operating System :: POSIX :: Linux",
            "Programming Language :: Python :: 3.4",
            "Programming Language :: Python :: 3.5",
            "Topic :: Scientific/Engineering"
        ]
        )
