---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LambdaS3Bucket:
    Type: "String"
    Description: "The S3 bucket where the lambda zip file is stored."

  LambdaS3Key:
    Type: "String"
    Description: "The S3 key of the lambda zip file."

  LambdaTimeout:
    Type: "Number"
    Description: "The timeout in seconds for the lambda function."
    Default: 5

  LambdaMemorySize:
    Type: "Number"
    Description: "The memory allocation for the lambda function in megabytes."
    Default: 128

  APIName:
    Type: "String"
    Description: "The name of the API."
    Default: "API"

  APIDescription:
    Type: "String"
    Description: "A description of the API."
    Default: ""

  APIBasePath:
    Type: "String"
    Description: "The base path of the deployed API."
    Default: "api"

Resources:
  FunctionExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  Function:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - "FunctionExecutionRole"
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Role: !GetAtt ["FunctionExecutionRole", "Arn"]
      Timeout: !Ref LambdaTimeout
      Handler: "handler.lambda_handler"
      Runtime: "python2.7"
      MemorySize: !Ref LambdaMemorySize

  API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Body:
        swagger: "2.0"
        info:
          title: !Ref APIName
          description: !Ref APIDescription
        schemes:
          - "https"
        paths:
          /:
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["Function", "Arn"], "/invocations"]]
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["Function", "Arn"], "/invocations"]]
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  APIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref API
      StageName: !Ref APIBasePath

  APILambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ["Function", "Arn"]
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref "API", "/*/*/*"]]

Outputs:
  endpoint:
      Value: !Join ["", ["https://", !Ref API, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", !Ref APIBasePath]]
