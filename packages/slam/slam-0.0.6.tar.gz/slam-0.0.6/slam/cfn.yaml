---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  LambdaS3Bucket:
    Type: "String"
    Description: "The S3 bucket where the lambda zip file is stored."

  LambdaS3Key:
    Type: "String"
    Description: "The S3 key of the lambda zip file."

  LambdaTimeout:
    Type: "Number"
    Description: "The timeout in seconds for the lambda function."
    Default: 5

  LambdaMemorySize:
    Type: "Number"
    Description: "The memory allocation for the lambda function in megabytes."
    Default: 128

  APIName:
    Type: "String"
    Description: "The name of the API."
    Default: "API"

  APIDescription:
    Type: "String"
    Description: "A description of the API."
    Default: ""

  {% for stage in stages %}
  {% if stage != devstage %}
  {{stage|title}}Version:
    Type: "String"
    Description: "The lambda version number associated with the {{stage}} stage."
    Default: "$LATEST"

  {% endif %}
  {% endfor %}
Resources:
  FunctionExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      {% if dynamodb_tables %}
      Policies:
        - PolicyName: "DynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource:
                  - "*"
      {% endif %}

  Function:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - "FunctionExecutionRole"
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Role: !GetAtt ["FunctionExecutionRole", "Arn"]
      Timeout: !Ref LambdaTimeout
      Handler: "handler.lambda_handler"
      Runtime: "python2.7"
      MemorySize: !Ref LambdaMemorySize

  API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Body:
        swagger: "2.0"
        info:
          title: !Ref APIName
          description: !Ref APIDescription
        schemes:
          - "https"
        paths:
          /:
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["Function", "Arn"], ":${stageVariables.STAGE}", "/invocations"]]
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["Function", "Arn"], ":${stageVariables.STAGE}", "/invocations"]]
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  {% for stage in stages %}
  {{stage|title}}FunctionAlias:
    Type: "AWS::Lambda::Alias"
    Properties:
      Name: {{stage}}
      FunctionName: !Ref Function
      {% if stage != devstage %}
      FunctionVersion: !Ref {{stage|title}}Version
      {% else %}
      FunctionVersion: "$LATEST"
      {% endif %}

  {{stage|title}}APIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref API
      StageName: {{stage}}
      StageDescription:
        Variables:
          STAGE: "{{stage}}"
          {% for v in vars[stage] %}
          {{v}}: "{{vars[stage][v]}}"
          {% endfor %}

  {{stage|title}}APILambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - "{{stage|title}}FunctionAlias"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref {{stage|title}}FunctionAlias
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref "API", "/*/*/*"]]

  {% for name, table in dynamodb_tables.items() %}
  {{stage|title}}DynamoDBTable{{loop.index}}:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "{{stage}}.{{name}}"
      AttributeDefinitions:
        {% for attr, type in table.attributes.items() %}
        - AttributeName: "{{attr}}"
          AttributeType: "{{type}}"
        {% endfor %}
      KeySchema:
        {% if table.key is iterable and table.key is not string %}
        {% for key in table.key %}
        - AttributeName: "{{key}}"
          KeyType: "{% if loop.index == 1 %}HASH{% else %}RANGE{% endif %}"
        {% endfor %}
        {% else %}
        - AttributeName: "{{table.key}}"
          KeyType: "HASH"
        {% endif %}
      ProvisionedThroughput:
        {% if table.provisioned_throughput %}
        ReadCapacityUnits: {{table.provisioned_throughput[0]}}
        WriteCapacityUnits: {{table.provisioned_throughput[1]}}
        {% else %}
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
        {% endif %}
      {% if table.local_secondary_indexes %}
      LocalSecondaryIndexes:
        {% for name, index in table.local_secondary_indexes.items() %}
        - IndexName: "{{name}}"
          KeySchema:
            {% if table.key is iterable and table.key is not string %}
            - AttributeName: "{{table.key[0]}}"
            {% else %}
            - AttributeName: "{{table.key}}"
            {% endif %}
              KeyType: "HASH"
            - AttributeName: "{{index.key}}"
              KeyType: "RANGE"
          Projection:
            {% if not index.projection %}
            ProjectionType: "KEYS_ONLY"
            {% elif index.projection == "all" %}
            ProjectionType: "ALL"
            {% else %}
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              {% for attr in index.projection %}
              - "{{attr}}"
              {% endfor %}
            {% endif %}
        {% endfor %}
      {% endif %}
      {% if table.global_secondary_indexes %}
      GlobalSecondaryIndexes:
        {% for name, index in table.global_secondary_indexes.items() %}
        - IndexName: "{{name}}"
          KeySchema:
            {% if index.key is iterable and index.key is not string %}
            {% for key in index.key %}
            - AttributeName: "{{key}}"
              KeyType: "{% if loop.index == 1 %}HASH{% else %}RANGE{% endif %}"
            {% endfor %}
            {% else %}
            - AttributeName: "{{index.key}}"
              KeyType: "HASH"
            {% endif %}
          Projection:
            {% if not index.projection %}
            ProjectionType: "KEYS_ONLY"
            {% elif index.projection == "all" %}
            ProjectionType: "ALL"
            {% else %}
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              {% for attr in index.projection %}
              - "{{attr}}"
              {% endfor %}
            {% endif %}
          ProvisionedThroughput:
            {% if index.provisioned_throughput %}
            ReadCapacityUnits: {{index.provisioned_throughput[0]}}
            WriteCapacityUnits: {{index.provisioned_throughput[1]}}
            {% else %}
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
            {% endif %}
        {% endfor %}
      {% endif %}

  {% endfor %}
  {% endfor %}
Outputs:
  FunctionArn:
    Value: !GetAtt ["Function", "Arn"]

  {% for stage in stages %}
  {{stage|title}}Endpoint:
      Value: !Join ["", ["https://", !Ref API, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/{{stage}}"]]

  {% endfor %}
