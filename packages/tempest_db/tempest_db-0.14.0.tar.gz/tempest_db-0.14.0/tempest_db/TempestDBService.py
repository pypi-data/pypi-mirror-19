#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def outDegree(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    pass

  def inDegree(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    pass

  def outNeighbors(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    pass

  def inNeighbors(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    pass

  def outNeighbor(self, edgeType, node, i):
    """
    Parameters:
     - edgeType
     - node
     - i
    """
    pass

  def inNeighbor(self, edgeType, node, i):
    """
    Parameters:
     - edgeType
     - node
     - i
    """
    pass

  def connectedComponent(self, source, edgeTypes, maxSize):
    """
    Parameters:
     - source
     - edgeTypes
     - maxSize
    """
    pass

  def kStepOutNeighborsFiltered(self, edgeType, source, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - source
     - k
     - sqlClause
     - filter
     - alternating
    """
    pass

  def kStepInNeighborsFiltered(self, edgeType, source, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - source
     - k
     - sqlClause
     - filter
     - alternating
    """
    pass

  def pprUndirected(self, edgeTypes, seeds, pageRankParams):
    """
    Parameters:
     - edgeTypes
     - seeds
     - pageRankParams
    """
    pass

  def pprSingleTarget(self, edgeType, seedNodes, targetNode, biPPRParams):
    """
    Parameters:
     - edgeType
     - seedNodes
     - targetNode
     - biPPRParams
    """
    pass

  def nodeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    pass

  def edgeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    pass

  def nodes(self, nodeType, sqlClause):
    """
    Parameters:
     - nodeType
     - sqlClause
    """
    pass

  def getMultiNodeAttributeAsJSON(self, nodes, attributeName):
    """
    Parameters:
     - nodes
     - attributeName
    """
    pass

  def addNode(self, node):
    """
    Parameters:
     - node
    """
    pass

  def setNodeAttribute(self, node, attributeName, attributeValue):
    """
    Parameters:
     - node
     - attributeName
     - attributeValue
    """
    pass

  def addEdges(self, edgeType, sourceNodes, targetNodes):
    """
    Parameters:
     - edgeType
     - sourceNodes
     - targetNodes
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def outDegree(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    self.send_outDegree(edgeType, node)
    return self.recv_outDegree()

  def send_outDegree(self, edgeType, node):
    self._oprot.writeMessageBegin('outDegree', TMessageType.CALL, self._seqid)
    args = outDegree_args()
    args.edgeType = edgeType
    args.node = node
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_outDegree(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = outDegree_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "outDegree failed: unknown result")

  def inDegree(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    self.send_inDegree(edgeType, node)
    return self.recv_inDegree()

  def send_inDegree(self, edgeType, node):
    self._oprot.writeMessageBegin('inDegree', TMessageType.CALL, self._seqid)
    args = inDegree_args()
    args.edgeType = edgeType
    args.node = node
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inDegree(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inDegree_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inDegree failed: unknown result")

  def outNeighbors(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    self.send_outNeighbors(edgeType, node)
    return self.recv_outNeighbors()

  def send_outNeighbors(self, edgeType, node):
    self._oprot.writeMessageBegin('outNeighbors', TMessageType.CALL, self._seqid)
    args = outNeighbors_args()
    args.edgeType = edgeType
    args.node = node
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_outNeighbors(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = outNeighbors_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "outNeighbors failed: unknown result")

  def inNeighbors(self, edgeType, node):
    """
    Parameters:
     - edgeType
     - node
    """
    self.send_inNeighbors(edgeType, node)
    return self.recv_inNeighbors()

  def send_inNeighbors(self, edgeType, node):
    self._oprot.writeMessageBegin('inNeighbors', TMessageType.CALL, self._seqid)
    args = inNeighbors_args()
    args.edgeType = edgeType
    args.node = node
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inNeighbors(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inNeighbors_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inNeighbors failed: unknown result")

  def outNeighbor(self, edgeType, node, i):
    """
    Parameters:
     - edgeType
     - node
     - i
    """
    self.send_outNeighbor(edgeType, node, i)
    return self.recv_outNeighbor()

  def send_outNeighbor(self, edgeType, node, i):
    self._oprot.writeMessageBegin('outNeighbor', TMessageType.CALL, self._seqid)
    args = outNeighbor_args()
    args.edgeType = edgeType
    args.node = node
    args.i = i
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_outNeighbor(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = outNeighbor_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "outNeighbor failed: unknown result")

  def inNeighbor(self, edgeType, node, i):
    """
    Parameters:
     - edgeType
     - node
     - i
    """
    self.send_inNeighbor(edgeType, node, i)
    return self.recv_inNeighbor()

  def send_inNeighbor(self, edgeType, node, i):
    self._oprot.writeMessageBegin('inNeighbor', TMessageType.CALL, self._seqid)
    args = inNeighbor_args()
    args.edgeType = edgeType
    args.node = node
    args.i = i
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_inNeighbor(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = inNeighbor_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    if result.ex3 is not None:
      raise result.ex3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "inNeighbor failed: unknown result")

  def connectedComponent(self, source, edgeTypes, maxSize):
    """
    Parameters:
     - source
     - edgeTypes
     - maxSize
    """
    self.send_connectedComponent(source, edgeTypes, maxSize)
    return self.recv_connectedComponent()

  def send_connectedComponent(self, source, edgeTypes, maxSize):
    self._oprot.writeMessageBegin('connectedComponent', TMessageType.CALL, self._seqid)
    args = connectedComponent_args()
    args.source = source
    args.edgeTypes = edgeTypes
    args.maxSize = maxSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_connectedComponent(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = connectedComponent_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "connectedComponent failed: unknown result")

  def kStepOutNeighborsFiltered(self, edgeType, source, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - source
     - k
     - sqlClause
     - filter
     - alternating
    """
    self.send_kStepOutNeighborsFiltered(edgeType, source, k, sqlClause, filter, alternating)
    return self.recv_kStepOutNeighborsFiltered()

  def send_kStepOutNeighborsFiltered(self, edgeType, source, k, sqlClause, filter, alternating):
    self._oprot.writeMessageBegin('kStepOutNeighborsFiltered', TMessageType.CALL, self._seqid)
    args = kStepOutNeighborsFiltered_args()
    args.edgeType = edgeType
    args.source = source
    args.k = k
    args.sqlClause = sqlClause
    args.filter = filter
    args.alternating = alternating
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_kStepOutNeighborsFiltered(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = kStepOutNeighborsFiltered_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    if result.error4 is not None:
      raise result.error4
    raise TApplicationException(TApplicationException.MISSING_RESULT, "kStepOutNeighborsFiltered failed: unknown result")

  def kStepInNeighborsFiltered(self, edgeType, source, k, sqlClause, filter, alternating):
    """
    Parameters:
     - edgeType
     - source
     - k
     - sqlClause
     - filter
     - alternating
    """
    self.send_kStepInNeighborsFiltered(edgeType, source, k, sqlClause, filter, alternating)
    return self.recv_kStepInNeighborsFiltered()

  def send_kStepInNeighborsFiltered(self, edgeType, source, k, sqlClause, filter, alternating):
    self._oprot.writeMessageBegin('kStepInNeighborsFiltered', TMessageType.CALL, self._seqid)
    args = kStepInNeighborsFiltered_args()
    args.edgeType = edgeType
    args.source = source
    args.k = k
    args.sqlClause = sqlClause
    args.filter = filter
    args.alternating = alternating
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_kStepInNeighborsFiltered(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = kStepInNeighborsFiltered_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    if result.error4 is not None:
      raise result.error4
    raise TApplicationException(TApplicationException.MISSING_RESULT, "kStepInNeighborsFiltered failed: unknown result")

  def pprUndirected(self, edgeTypes, seeds, pageRankParams):
    """
    Parameters:
     - edgeTypes
     - seeds
     - pageRankParams
    """
    self.send_pprUndirected(edgeTypes, seeds, pageRankParams)
    return self.recv_pprUndirected()

  def send_pprUndirected(self, edgeTypes, seeds, pageRankParams):
    self._oprot.writeMessageBegin('pprUndirected', TMessageType.CALL, self._seqid)
    args = pprUndirected_args()
    args.edgeTypes = edgeTypes
    args.seeds = seeds
    args.pageRankParams = pageRankParams
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pprUndirected(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = pprUndirected_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    raise TApplicationException(TApplicationException.MISSING_RESULT, "pprUndirected failed: unknown result")

  def pprSingleTarget(self, edgeType, seedNodes, targetNode, biPPRParams):
    """
    Parameters:
     - edgeType
     - seedNodes
     - targetNode
     - biPPRParams
    """
    self.send_pprSingleTarget(edgeType, seedNodes, targetNode, biPPRParams)
    return self.recv_pprSingleTarget()

  def send_pprSingleTarget(self, edgeType, seedNodes, targetNode, biPPRParams):
    self._oprot.writeMessageBegin('pprSingleTarget', TMessageType.CALL, self._seqid)
    args = pprSingleTarget_args()
    args.edgeType = edgeType
    args.seedNodes = seedNodes
    args.targetNode = targetNode
    args.biPPRParams = biPPRParams
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pprSingleTarget(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = pprSingleTarget_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex1 is not None:
      raise result.ex1
    if result.ex2 is not None:
      raise result.ex2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "pprSingleTarget failed: unknown result")

  def nodeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    self.send_nodeCount(edgeType)
    return self.recv_nodeCount()

  def send_nodeCount(self, edgeType):
    self._oprot.writeMessageBegin('nodeCount', TMessageType.CALL, self._seqid)
    args = nodeCount_args()
    args.edgeType = edgeType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_nodeCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = nodeCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "nodeCount failed: unknown result")

  def edgeCount(self, edgeType):
    """
    Parameters:
     - edgeType
    """
    self.send_edgeCount(edgeType)
    return self.recv_edgeCount()

  def send_edgeCount(self, edgeType):
    self._oprot.writeMessageBegin('edgeCount', TMessageType.CALL, self._seqid)
    args = edgeCount_args()
    args.edgeType = edgeType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_edgeCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = edgeCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ex is not None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "edgeCount failed: unknown result")

  def nodes(self, nodeType, sqlClause):
    """
    Parameters:
     - nodeType
     - sqlClause
    """
    self.send_nodes(nodeType, sqlClause)
    return self.recv_nodes()

  def send_nodes(self, nodeType, sqlClause):
    self._oprot.writeMessageBegin('nodes', TMessageType.CALL, self._seqid)
    args = nodes_args()
    args.nodeType = nodeType
    args.sqlClause = sqlClause
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_nodes(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = nodes_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "nodes failed: unknown result")

  def getMultiNodeAttributeAsJSON(self, nodes, attributeName):
    """
    Parameters:
     - nodes
     - attributeName
    """
    self.send_getMultiNodeAttributeAsJSON(nodes, attributeName)
    return self.recv_getMultiNodeAttributeAsJSON()

  def send_getMultiNodeAttributeAsJSON(self, nodes, attributeName):
    self._oprot.writeMessageBegin('getMultiNodeAttributeAsJSON', TMessageType.CALL, self._seqid)
    args = getMultiNodeAttributeAsJSON_args()
    args.nodes = nodes
    args.attributeName = attributeName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMultiNodeAttributeAsJSON(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMultiNodeAttributeAsJSON_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMultiNodeAttributeAsJSON failed: unknown result")

  def addNode(self, node):
    """
    Parameters:
     - node
    """
    self.send_addNode(node)
    self.recv_addNode()

  def send_addNode(self, node):
    self._oprot.writeMessageBegin('addNode', TMessageType.CALL, self._seqid)
    args = addNode_args()
    args.node = node
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addNode(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addNode_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    return

  def setNodeAttribute(self, node, attributeName, attributeValue):
    """
    Parameters:
     - node
     - attributeName
     - attributeValue
    """
    self.send_setNodeAttribute(node, attributeName, attributeValue)
    self.recv_setNodeAttribute()

  def send_setNodeAttribute(self, node, attributeName, attributeValue):
    self._oprot.writeMessageBegin('setNodeAttribute', TMessageType.CALL, self._seqid)
    args = setNodeAttribute_args()
    args.node = node
    args.attributeName = attributeName
    args.attributeValue = attributeValue
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setNodeAttribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = setNodeAttribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    if result.error3 is not None:
      raise result.error3
    return

  def addEdges(self, edgeType, sourceNodes, targetNodes):
    """
    Parameters:
     - edgeType
     - sourceNodes
     - targetNodes
    """
    self.send_addEdges(edgeType, sourceNodes, targetNodes)
    self.recv_addEdges()

  def send_addEdges(self, edgeType, sourceNodes, targetNodes):
    self._oprot.writeMessageBegin('addEdges', TMessageType.CALL, self._seqid)
    args = addEdges_args()
    args.edgeType = edgeType
    args.sourceNodes = sourceNodes
    args.targetNodes = targetNodes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addEdges(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addEdges_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.error1 is not None:
      raise result.error1
    if result.error2 is not None:
      raise result.error2
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["outDegree"] = Processor.process_outDegree
    self._processMap["inDegree"] = Processor.process_inDegree
    self._processMap["outNeighbors"] = Processor.process_outNeighbors
    self._processMap["inNeighbors"] = Processor.process_inNeighbors
    self._processMap["outNeighbor"] = Processor.process_outNeighbor
    self._processMap["inNeighbor"] = Processor.process_inNeighbor
    self._processMap["connectedComponent"] = Processor.process_connectedComponent
    self._processMap["kStepOutNeighborsFiltered"] = Processor.process_kStepOutNeighborsFiltered
    self._processMap["kStepInNeighborsFiltered"] = Processor.process_kStepInNeighborsFiltered
    self._processMap["pprUndirected"] = Processor.process_pprUndirected
    self._processMap["pprSingleTarget"] = Processor.process_pprSingleTarget
    self._processMap["nodeCount"] = Processor.process_nodeCount
    self._processMap["edgeCount"] = Processor.process_edgeCount
    self._processMap["nodes"] = Processor.process_nodes
    self._processMap["getMultiNodeAttributeAsJSON"] = Processor.process_getMultiNodeAttributeAsJSON
    self._processMap["addNode"] = Processor.process_addNode
    self._processMap["setNodeAttribute"] = Processor.process_setNodeAttribute
    self._processMap["addEdges"] = Processor.process_addEdges

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_outDegree(self, seqid, iprot, oprot):
    args = outDegree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = outDegree_result()
    try:
      result.success = self._handler.outDegree(args.edgeType, args.node)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("outDegree", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inDegree(self, seqid, iprot, oprot):
    args = inDegree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inDegree_result()
    try:
      result.success = self._handler.inDegree(args.edgeType, args.node)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("inDegree", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_outNeighbors(self, seqid, iprot, oprot):
    args = outNeighbors_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = outNeighbors_result()
    try:
      result.success = self._handler.outNeighbors(args.edgeType, args.node)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("outNeighbors", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inNeighbors(self, seqid, iprot, oprot):
    args = inNeighbors_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inNeighbors_result()
    try:
      result.success = self._handler.inNeighbors(args.edgeType, args.node)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("inNeighbors", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_outNeighbor(self, seqid, iprot, oprot):
    args = outNeighbor_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = outNeighbor_result()
    try:
      result.success = self._handler.outNeighbor(args.edgeType, args.node, args.i)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidIndexException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      msg_type = TMessageType.REPLY
      result.ex3 = ex3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("outNeighbor", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_inNeighbor(self, seqid, iprot, oprot):
    args = inNeighbor_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = inNeighbor_result()
    try:
      result.success = self._handler.inNeighbor(args.edgeType, args.node, args.i)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidIndexException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except InvalidArgumentException as ex3:
      msg_type = TMessageType.REPLY
      result.ex3 = ex3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("inNeighbor", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_connectedComponent(self, seqid, iprot, oprot):
    args = connectedComponent_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = connectedComponent_result()
    try:
      result.success = self._handler.connectedComponent(args.source, args.edgeTypes, args.maxSize)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidNodeIdException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except InvalidArgumentException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("connectedComponent", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_kStepOutNeighborsFiltered(self, seqid, iprot, oprot):
    args = kStepOutNeighborsFiltered_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = kStepOutNeighborsFiltered_result()
    try:
      result.success = self._handler.kStepOutNeighborsFiltered(args.edgeType, args.source, args.k, args.sqlClause, args.filter, args.alternating)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except SQLException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except InvalidNodeIdException as error4:
      msg_type = TMessageType.REPLY
      result.error4 = error4
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("kStepOutNeighborsFiltered", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_kStepInNeighborsFiltered(self, seqid, iprot, oprot):
    args = kStepInNeighborsFiltered_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = kStepInNeighborsFiltered_result()
    try:
      result.success = self._handler.kStepInNeighborsFiltered(args.edgeType, args.source, args.k, args.sqlClause, args.filter, args.alternating)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except SQLException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except InvalidNodeIdException as error4:
      msg_type = TMessageType.REPLY
      result.error4 = error4
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("kStepInNeighborsFiltered", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pprUndirected(self, seqid, iprot, oprot):
    args = pprUndirected_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pprUndirected_result()
    try:
      result.success = self._handler.pprUndirected(args.edgeTypes, args.seeds, args.pageRankParams)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidNodeIdException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except InvalidArgumentException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("pprUndirected", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pprSingleTarget(self, seqid, iprot, oprot):
    args = pprSingleTarget_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pprSingleTarget_result()
    try:
      result.success = self._handler.pprSingleTarget(args.edgeType, args.seedNodes, args.targetNode, args.biPPRParams)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidNodeIdException as ex1:
      msg_type = TMessageType.REPLY
      result.ex1 = ex1
    except InvalidArgumentException as ex2:
      msg_type = TMessageType.REPLY
      result.ex2 = ex2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("pprSingleTarget", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_nodeCount(self, seqid, iprot, oprot):
    args = nodeCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = nodeCount_result()
    try:
      result.success = self._handler.nodeCount(args.edgeType)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidArgumentException as ex:
      msg_type = TMessageType.REPLY
      result.ex = ex
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("nodeCount", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_edgeCount(self, seqid, iprot, oprot):
    args = edgeCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = edgeCount_result()
    try:
      result.success = self._handler.edgeCount(args.edgeType)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except InvalidArgumentException as ex:
      msg_type = TMessageType.REPLY
      result.ex = ex
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("edgeCount", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_nodes(self, seqid, iprot, oprot):
    args = nodes_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = nodes_result()
    try:
      result.success = self._handler.nodes(args.nodeType, args.sqlClause)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except SQLException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("nodes", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMultiNodeAttributeAsJSON(self, seqid, iprot, oprot):
    args = getMultiNodeAttributeAsJSON_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMultiNodeAttributeAsJSON_result()
    try:
      result.success = self._handler.getMultiNodeAttributeAsJSON(args.nodes, args.attributeName)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("getMultiNodeAttributeAsJSON", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addNode(self, seqid, iprot, oprot):
    args = addNode_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addNode_result()
    try:
      self._handler.addNode(args.node)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except SQLException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("addNode", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setNodeAttribute(self, seqid, iprot, oprot):
    args = setNodeAttribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setNodeAttribute_result()
    try:
      self._handler.setNodeAttribute(args.node, args.attributeName, args.attributeValue)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except InvalidArgumentException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except SQLException as error3:
      msg_type = TMessageType.REPLY
      result.error3 = error3
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("setNodeAttribute", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addEdges(self, seqid, iprot, oprot):
    args = addEdges_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addEdges_result()
    try:
      self._handler.addEdges(args.edgeType, args.sourceNodes, args.targetNodes)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except UndefinedGraphException as error1:
      msg_type = TMessageType.REPLY
      result.error1 = error1
    except UnequalListSizeException as error2:
      msg_type = TMessageType.REPLY
      result.error2 = error2
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("addEdges", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class outDegree_args:
  """
  Attributes:
   - edgeType
   - node
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 2
  )

  def __init__(self, edgeType=None, node=None,):
    self.edgeType = edgeType
    self.node = node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outDegree_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 2)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.node)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outDegree_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outDegree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inDegree_args:
  """
  Attributes:
   - edgeType
   - node
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 2
  )

  def __init__(self, edgeType=None, node=None,):
    self.edgeType = edgeType
    self.node = node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inDegree_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 2)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.node)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inDegree_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inDegree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbors_args:
  """
  Attributes:
   - edgeType
   - node
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 2
  )

  def __init__(self, edgeType=None, node=None,):
    self.edgeType = edgeType
    self.node = node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbors_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 2)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.node)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbors_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Node()
            _elem5.read(iprot)
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbors_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter6 in self.success:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbors_args:
  """
  Attributes:
   - edgeType
   - node
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 2
  )

  def __init__(self, edgeType=None, node=None,):
    self.edgeType = edgeType
    self.node = node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbors_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 2)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.node)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbors_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Node()
            _elem12.read(iprot)
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbors_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter13 in self.success:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbor_args:
  """
  Attributes:
   - edgeType
   - node
   - i
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 2
    (3, TType.I32, 'i', None, None, ), # 3
  )

  def __init__(self, edgeType=None, node=None, i=None,):
    self.edgeType = edgeType
    self.node = node
    self.i = i

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.i = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbor_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 2)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    if self.i is not None:
      oprot.writeFieldBegin('i', TType.I32, 3)
      oprot.writeI32(self.i)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.node)
    value = (value * 31) ^ hash(self.i)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class outNeighbor_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Node, Node.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidIndexException, InvalidIndexException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex1=None, ex2=None, ex3=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Node()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidIndexException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('outNeighbor_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbor_args:
  """
  Attributes:
   - edgeType
   - node
   - i
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 2
    (3, TType.I32, 'i', None, None, ), # 3
  )

  def __init__(self, edgeType=None, node=None, i=None,):
    self.edgeType = edgeType
    self.node = node
    self.i = i

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.i = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbor_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 2)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    if self.i is not None:
      oprot.writeFieldBegin('i', TType.I32, 3)
      oprot.writeI32(self.i)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.node)
    value = (value * 31) ^ hash(self.i)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class inNeighbor_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
   - ex3
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Node, Node.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidIndexException, InvalidIndexException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ex3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, ex1=None, ex2=None, ex3=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2
    self.ex3 = ex3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Node()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidIndexException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ex3 = InvalidArgumentException()
          self.ex3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('inNeighbor_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    if self.ex3 is not None:
      oprot.writeFieldBegin('ex3', TType.STRUCT, 3)
      self.ex3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    value = (value * 31) ^ hash(self.ex3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class connectedComponent_args:
  """
  Attributes:
   - source
   - edgeTypes
   - maxSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'source', (Node, Node.thrift_spec), None, ), # 1
    (2, TType.LIST, 'edgeTypes', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'maxSize', None, None, ), # 3
  )

  def __init__(self, source=None, edgeTypes=None, maxSize=None,):
    self.source = source
    self.edgeTypes = edgeTypes
    self.maxSize = maxSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.source = Node()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.edgeTypes = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString()
            self.edgeTypes.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('connectedComponent_args')
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 1)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.edgeTypes is not None:
      oprot.writeFieldBegin('edgeTypes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.edgeTypes))
      for iter20 in self.edgeTypes:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.maxSize is not None:
      oprot.writeFieldBegin('maxSize', TType.I32, 3)
      oprot.writeI32(self.maxSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.edgeTypes)
    value = (value * 31) ^ hash(self.maxSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class connectedComponent_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Node()
            _elem26.read(iprot)
            self.success.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidNodeIdException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = InvalidArgumentException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('connectedComponent_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter27 in self.success:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepOutNeighborsFiltered_args:
  """
  Attributes:
   - edgeType
   - source
   - k
   - sqlClause
   - filter
   - alternating
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'source', (Node, Node.thrift_spec), None, ), # 2
    (3, TType.I32, 'k', None, None, ), # 3
    (4, TType.STRING, 'sqlClause', None, None, ), # 4
    (5, TType.MAP, 'filter', (TType.I32,None,TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'alternating', None, None, ), # 6
  )

  def __init__(self, edgeType=None, source=None, k=None, sqlClause=None, filter=None, alternating=None,):
    self.edgeType = edgeType
    self.source = source
    self.k = k
    self.sqlClause = sqlClause
    self.filter = filter
    self.alternating = alternating

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.source = Node()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.k = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sqlClause = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.filter = {}
          (_ktype29, _vtype30, _size28 ) = iprot.readMapBegin()
          for _i32 in xrange(_size28):
            _key33 = iprot.readI32()
            _val34 = iprot.readI32()
            self.filter[_key33] = _val34
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.alternating = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepOutNeighborsFiltered_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 2)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.k is not None:
      oprot.writeFieldBegin('k', TType.I32, 3)
      oprot.writeI32(self.k)
      oprot.writeFieldEnd()
    if self.sqlClause is not None:
      oprot.writeFieldBegin('sqlClause', TType.STRING, 4)
      oprot.writeString(self.sqlClause)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.filter))
      for kiter35,viter36 in self.filter.items():
        oprot.writeI32(kiter35)
        oprot.writeI32(viter36)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.alternating is not None:
      oprot.writeFieldBegin('alternating', TType.BOOL, 6)
      oprot.writeBool(self.alternating)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.k)
    value = (value * 31) ^ hash(self.sqlClause)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.alternating)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepOutNeighborsFiltered_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
   - error4
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (SQLException, SQLException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'error4', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None, error4=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3
    self.error4 = error4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = Node()
            _elem42.read(iprot)
            self.success.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = SQLException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.error4 = InvalidNodeIdException()
          self.error4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepOutNeighborsFiltered_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter43 in self.success:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    if self.error4 is not None:
      oprot.writeFieldBegin('error4', TType.STRUCT, 4)
      self.error4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    value = (value * 31) ^ hash(self.error4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepInNeighborsFiltered_args:
  """
  Attributes:
   - edgeType
   - source
   - k
   - sqlClause
   - filter
   - alternating
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.STRUCT, 'source', (Node, Node.thrift_spec), None, ), # 2
    (3, TType.I32, 'k', None, None, ), # 3
    (4, TType.STRING, 'sqlClause', None, None, ), # 4
    (5, TType.MAP, 'filter', (TType.I32,None,TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'alternating', None, None, ), # 6
  )

  def __init__(self, edgeType=None, source=None, k=None, sqlClause=None, filter=None, alternating=None,):
    self.edgeType = edgeType
    self.source = source
    self.k = k
    self.sqlClause = sqlClause
    self.filter = filter
    self.alternating = alternating

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.source = Node()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.k = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sqlClause = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.filter = {}
          (_ktype45, _vtype46, _size44 ) = iprot.readMapBegin()
          for _i48 in xrange(_size44):
            _key49 = iprot.readI32()
            _val50 = iprot.readI32()
            self.filter[_key49] = _val50
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.alternating = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepInNeighborsFiltered_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 2)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.k is not None:
      oprot.writeFieldBegin('k', TType.I32, 3)
      oprot.writeI32(self.k)
      oprot.writeFieldEnd()
    if self.sqlClause is not None:
      oprot.writeFieldBegin('sqlClause', TType.STRING, 4)
      oprot.writeString(self.sqlClause)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.filter))
      for kiter51,viter52 in self.filter.items():
        oprot.writeI32(kiter51)
        oprot.writeI32(viter52)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.alternating is not None:
      oprot.writeFieldBegin('alternating', TType.BOOL, 6)
      oprot.writeBool(self.alternating)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.k)
    value = (value * 31) ^ hash(self.sqlClause)
    value = (value * 31) ^ hash(self.filter)
    value = (value * 31) ^ hash(self.alternating)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class kStepInNeighborsFiltered_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
   - error4
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (SQLException, SQLException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'error4', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None, error4=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3
    self.error4 = error4

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype56, _size53) = iprot.readListBegin()
          for _i57 in xrange(_size53):
            _elem58 = Node()
            _elem58.read(iprot)
            self.success.append(_elem58)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = SQLException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.error4 = InvalidNodeIdException()
          self.error4.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('kStepInNeighborsFiltered_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter59 in self.success:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    if self.error4 is not None:
      oprot.writeFieldBegin('error4', TType.STRUCT, 4)
      self.error4.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    value = (value * 31) ^ hash(self.error4)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pprUndirected_args:
  """
  Attributes:
   - edgeTypes
   - seeds
   - pageRankParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'edgeTypes', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'seeds', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 2
    None, # 3
    None, # 4
    (5, TType.STRUCT, 'pageRankParams', (MonteCarloPageRankParams, MonteCarloPageRankParams.thrift_spec), None, ), # 5
  )

  def __init__(self, edgeTypes=None, seeds=None, pageRankParams=None,):
    self.edgeTypes = edgeTypes
    self.seeds = seeds
    self.pageRankParams = pageRankParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.edgeTypes = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = iprot.readString()
            self.edgeTypes.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.seeds = []
          (_etype69, _size66) = iprot.readListBegin()
          for _i70 in xrange(_size66):
            _elem71 = Node()
            _elem71.read(iprot)
            self.seeds.append(_elem71)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.pageRankParams = MonteCarloPageRankParams()
          self.pageRankParams.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pprUndirected_args')
    if self.edgeTypes is not None:
      oprot.writeFieldBegin('edgeTypes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.edgeTypes))
      for iter72 in self.edgeTypes:
        oprot.writeString(iter72)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.seeds is not None:
      oprot.writeFieldBegin('seeds', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.seeds))
      for iter73 in self.seeds:
        iter73.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pageRankParams is not None:
      oprot.writeFieldBegin('pageRankParams', TType.STRUCT, 5)
      self.pageRankParams.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeTypes)
    value = (value * 31) ^ hash(self.seeds)
    value = (value * 31) ^ hash(self.pageRankParams)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pprUndirected_result:
  """
  Attributes:
   - success
   - error1
   - error2
   - error3
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(Node, Node.thrift_spec),TType.DOUBLE,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, error1=None, error2=None, error3=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype75, _vtype76, _size74 ) = iprot.readMapBegin()
          for _i78 in xrange(_size74):
            _key79 = Node()
            _key79.read(iprot)
            _val80 = iprot.readDouble()
            self.success[_key79] = _val80
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidNodeIdException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = InvalidArgumentException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pprUndirected_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.DOUBLE, len(self.success))
      for kiter81,viter82 in self.success.items():
        kiter81.write(oprot)
        oprot.writeDouble(viter82)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pprSingleTarget_args:
  """
  Attributes:
   - edgeType
   - seedNodes
   - targetNode
   - biPPRParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.LIST, 'seedNodes', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'targetNode', (Node, Node.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'biPPRParams', (BidirectionalPPRParams, BidirectionalPPRParams.thrift_spec), None, ), # 4
  )

  def __init__(self, edgeType=None, seedNodes=None, targetNode=None, biPPRParams=None,):
    self.edgeType = edgeType
    self.seedNodes = seedNodes
    self.targetNode = targetNode
    self.biPPRParams = biPPRParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.seedNodes = []
          (_etype86, _size83) = iprot.readListBegin()
          for _i87 in xrange(_size83):
            _elem88 = Node()
            _elem88.read(iprot)
            self.seedNodes.append(_elem88)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.targetNode = Node()
          self.targetNode.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.biPPRParams = BidirectionalPPRParams()
          self.biPPRParams.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pprSingleTarget_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.seedNodes is not None:
      oprot.writeFieldBegin('seedNodes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.seedNodes))
      for iter89 in self.seedNodes:
        iter89.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targetNode is not None:
      oprot.writeFieldBegin('targetNode', TType.STRUCT, 3)
      self.targetNode.write(oprot)
      oprot.writeFieldEnd()
    if self.biPPRParams is not None:
      oprot.writeFieldBegin('biPPRParams', TType.STRUCT, 4)
      self.biPPRParams.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.seedNodes)
    value = (value * 31) ^ hash(self.targetNode)
    value = (value * 31) ^ hash(self.biPPRParams)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pprSingleTarget_result:
  """
  Attributes:
   - success
   - ex1
   - ex2
  """

  thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex1', (InvalidNodeIdException, InvalidNodeIdException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ex1=None, ex2=None,):
    self.success = success
    self.ex1 = ex1
    self.ex2 = ex2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.DOUBLE:
          self.success = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex1 = InvalidNodeIdException()
          self.ex1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ex2 = InvalidArgumentException()
          self.ex2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pprSingleTarget_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.DOUBLE, 0)
      oprot.writeDouble(self.success)
      oprot.writeFieldEnd()
    if self.ex1 is not None:
      oprot.writeFieldBegin('ex1', TType.STRUCT, 1)
      self.ex1.write(oprot)
      oprot.writeFieldEnd()
    if self.ex2 is not None:
      oprot.writeFieldBegin('ex2', TType.STRUCT, 2)
      self.ex2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex1)
    value = (value * 31) ^ hash(self.ex2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodeCount_args:
  """
  Attributes:
   - edgeType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
  )

  def __init__(self, edgeType=None,):
    self.edgeType = edgeType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodeCount_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodeCount_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = InvalidArgumentException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodeCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class edgeCount_args:
  """
  Attributes:
   - edgeType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
  )

  def __init__(self, edgeType=None,):
    self.edgeType = edgeType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('edgeCount_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class edgeCount_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = InvalidArgumentException()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('edgeCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.ex is not None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.ex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodes_args:
  """
  Attributes:
   - nodeType
   - sqlClause
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeType', None, None, ), # 1
    (2, TType.STRING, 'sqlClause', None, None, ), # 2
  )

  def __init__(self, nodeType=None, sqlClause=None,):
    self.nodeType = nodeType
    self.sqlClause = sqlClause

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sqlClause = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodes_args')
    if self.nodeType is not None:
      oprot.writeFieldBegin('nodeType', TType.STRING, 1)
      oprot.writeString(self.nodeType)
      oprot.writeFieldEnd()
    if self.sqlClause is not None:
      oprot.writeFieldBegin('sqlClause', TType.STRING, 2)
      oprot.writeString(self.sqlClause)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nodeType)
    value = (value * 31) ^ hash(self.sqlClause)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class nodes_result:
  """
  Attributes:
   - success
   - error1
   - error2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, error1=None, error2=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = Node()
            _elem95.read(iprot)
            self.success.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = SQLException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('nodes_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter96 in self.success:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMultiNodeAttributeAsJSON_args:
  """
  Attributes:
   - nodes
   - attributeName
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nodes', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'attributeName', None, None, ), # 2
  )

  def __init__(self, nodes=None, attributeName=None,):
    self.nodes = nodes
    self.attributeName = attributeName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nodes = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = Node()
            _elem102.read(iprot)
            self.nodes.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.attributeName = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMultiNodeAttributeAsJSON_args')
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nodes))
      for iter103 in self.nodes:
        iter103.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.attributeName is not None:
      oprot.writeFieldBegin('attributeName', TType.STRING, 2)
      oprot.writeString(self.attributeName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nodes)
    value = (value * 31) ^ hash(self.attributeName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMultiNodeAttributeAsJSON_result:
  """
  Attributes:
   - success
   - error1
   - error2
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRUCT,(Node, Node.thrift_spec),TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, error1=None, error2=None,):
    self.success = success
    self.error1 = error1
    self.error2 = error2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype105, _vtype106, _size104 ) = iprot.readMapBegin()
          for _i108 in xrange(_size104):
            _key109 = Node()
            _key109.read(iprot)
            _val110 = iprot.readString()
            self.success[_key109] = _val110
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMultiNodeAttributeAsJSON_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRUCT, TType.STRING, len(self.success))
      for kiter111,viter112 in self.success.items():
        kiter111.write(oprot)
        oprot.writeString(viter112)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addNode_args:
  """
  Attributes:
   - node
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 1
  )

  def __init__(self, node=None,):
    self.node = node

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addNode_args')
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 1)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.node)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addNode_result:
  """
  Attributes:
   - error1
   - error2
   - error3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (SQLException, SQLException.thrift_spec), None, ), # 3
  )

  def __init__(self, error1=None, error2=None, error3=None,):
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = SQLException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addNode_result')
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setNodeAttribute_args:
  """
  Attributes:
   - node
   - attributeName
   - attributeValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'node', (Node, Node.thrift_spec), None, ), # 1
    (2, TType.STRING, 'attributeName', None, None, ), # 2
    (3, TType.STRING, 'attributeValue', None, None, ), # 3
  )

  def __init__(self, node=None, attributeName=None, attributeValue=None,):
    self.node = node
    self.attributeName = attributeName
    self.attributeValue = attributeValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.node = Node()
          self.node.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.attributeName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.attributeValue = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setNodeAttribute_args')
    if self.node is not None:
      oprot.writeFieldBegin('node', TType.STRUCT, 1)
      self.node.write(oprot)
      oprot.writeFieldEnd()
    if self.attributeName is not None:
      oprot.writeFieldBegin('attributeName', TType.STRING, 2)
      oprot.writeString(self.attributeName)
      oprot.writeFieldEnd()
    if self.attributeValue is not None:
      oprot.writeFieldBegin('attributeValue', TType.STRING, 3)
      oprot.writeString(self.attributeValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.node)
    value = (value * 31) ^ hash(self.attributeName)
    value = (value * 31) ^ hash(self.attributeValue)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setNodeAttribute_result:
  """
  Attributes:
   - error1
   - error2
   - error3
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'error3', (SQLException, SQLException.thrift_spec), None, ), # 3
  )

  def __init__(self, error1=None, error2=None, error3=None,):
    self.error1 = error1
    self.error2 = error2
    self.error3 = error3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = InvalidArgumentException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.error3 = SQLException()
          self.error3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setNodeAttribute_result')
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    if self.error3 is not None:
      oprot.writeFieldBegin('error3', TType.STRUCT, 3)
      self.error3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    value = (value * 31) ^ hash(self.error3)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addEdges_args:
  """
  Attributes:
   - edgeType
   - sourceNodes
   - targetNodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'edgeType', None, None, ), # 1
    (2, TType.LIST, 'sourceNodes', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'targetNodes', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 3
  )

  def __init__(self, edgeType=None, sourceNodes=None, targetNodes=None,):
    self.edgeType = edgeType
    self.sourceNodes = sourceNodes
    self.targetNodes = targetNodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.edgeType = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sourceNodes = []
          (_etype116, _size113) = iprot.readListBegin()
          for _i117 in xrange(_size113):
            _elem118 = Node()
            _elem118.read(iprot)
            self.sourceNodes.append(_elem118)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.targetNodes = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = Node()
            _elem124.read(iprot)
            self.targetNodes.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addEdges_args')
    if self.edgeType is not None:
      oprot.writeFieldBegin('edgeType', TType.STRING, 1)
      oprot.writeString(self.edgeType)
      oprot.writeFieldEnd()
    if self.sourceNodes is not None:
      oprot.writeFieldBegin('sourceNodes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.sourceNodes))
      for iter125 in self.sourceNodes:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targetNodes is not None:
      oprot.writeFieldBegin('targetNodes', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.targetNodes))
      for iter126 in self.targetNodes:
        iter126.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.edgeType)
    value = (value * 31) ^ hash(self.sourceNodes)
    value = (value * 31) ^ hash(self.targetNodes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addEdges_result:
  """
  Attributes:
   - error1
   - error2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'error1', (UndefinedGraphException, UndefinedGraphException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'error2', (UnequalListSizeException, UnequalListSizeException.thrift_spec), None, ), # 2
  )

  def __init__(self, error1=None, error2=None,):
    self.error1 = error1
    self.error2 = error2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.error1 = UndefinedGraphException()
          self.error1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.error2 = UnequalListSizeException()
          self.error2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addEdges_result')
    if self.error1 is not None:
      oprot.writeFieldBegin('error1', TType.STRUCT, 1)
      self.error1.write(oprot)
      oprot.writeFieldEnd()
    if self.error2 is not None:
      oprot.writeFieldBegin('error2', TType.STRUCT, 2)
      self.error2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error1)
    value = (value * 31) ^ hash(self.error2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
