#
# Copyright 2017 Russell Smiley
#
# This file is part of timetools.
#
# timetools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# timetools is distributed in the hope that it will be useful
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with timetools.  If not, see <http://www.gnu.org/licenses/>.
#

import math
import numpy


def generateLogIntervalScale (minValue, maxValue, numberPoints):
    '''
    Generate a sequence of points with logarithmic spacing over a range.
    '''
    logMinValue = math.log10(minValue)
    logMaxValue = math.log10(maxValue)
    
    logElements = numpy.linspace(logMinValue, logMaxValue, num = numberPoints)
    
    intervals = numpy.power(10, logElements)
    
    return intervals


def generateMonotonicLogScale (logScale):
    '''
    Transform a sequence of integers on a quasi-logarithmic scale into a unique, monotonic sequence.
    
    The output array is of numpy.intp type, assuming that the array will be used for numpy indexing.
    '''
    # Assume that the intervals are integers
    # The sequence is probably generated by floor(generateLogIntervalScale)
    
    monotonicScale = numpy.intp(logScale.copy())
    for k in numpy.arange(0, len(monotonicScale)):
        thisElement = monotonicScale[k]
        logicalIndexing = (monotonicScale == thisElement)
        logicalIndexing[k] = False
        monotonicScale[logicalIndexing] = thisElement + 1
        
    return monotonicScale
    